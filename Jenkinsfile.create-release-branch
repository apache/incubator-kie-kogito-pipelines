@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    parameters {
        string(name: 'REPOSITORY_NAME', defaultValue: '', description: 'Which repository name ?')
        string(name: 'RELEASE_BRANCH', defaultValue: '', description: 'Release branch to create')
        
        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')
        string(name: 'GIT_AUTHOR_CREDS_ID', defaultValue: 'kie-ci', description: 'Git author credentials id')
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    echo 'Initialize'

                    assert getRepositoryName() != ''
                    assert getReleaseBranch() != ''

                    currentBuild.displayName = "${getReleaseBranch()} [${getRepositoryName()}]"
                }
            }
        }

        stage('Create release branch') {
            steps {
                script {
                    echo "Create release branch ${getReleaseBranch()} for repository ${getRepositoryName()}"

                    dir(getRepositoryName()){
                        deleteDir()
                        checkout(githubscm.resolveRepository(getRepositoryName(), getGitAuthor(), 'master', false))
                        sh 'git fetch origin'
                        String branchRemoteResult = sh(script: "git ls-remote origin ${getReleaseBranch()} | wc -l", returnStdout: true).trim()
                        if(Integer.parseInt(branchRemoteResult) > 0){
                            echo 'Release branch already exist ... will not create it'
                        } else {
                            echo "Release branch ${getReleaseBranch()} does not exist ... gonna create it"
                            githubscm.createBranch(getReleaseBranch())
                            githubscm.pushObject('origin', getReleaseBranch(), getGitAuthorCredsId())
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

String getReleaseBranch(){
    return params.RELEASE_BRANCH
}

String getGitAuthor(){
    return params.GIT_AUTHOR
}

String getGitAuthorCredsId(){
    return params.GIT_AUTHOR_CREDS_ID
}

String getRepositoryName(){
    return params.REPOSITORY_NAME
}