# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Jenkins DSL

on:
  pull_request:
    paths:
    - 'dsl/**'

jobs:
  getDslDownstreamMatrix:
    runs-on: ubuntu-latest
    name: Get DSL downstream projects Matrix
    outputs:
        matrix: ${{ steps.setmatrix.outputs.repositories }}
    steps:
      - name: Checkout 
        uses: actions/checkout@v2

      - name: Install yq
        run: |
          echo $PATH
          wget https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64.tar.gz -O - |  tar xz && ls -al && mv yq_linux_amd64 yq

      - id: setmatrix
        run: |
         matrixArray=$(./yq eval '.repositories[].name' dsl/config/branch.yaml) # Creates array of all repositories
         # Start Generate Json String
         echo "$matrixArray" | \
         jq --slurp --raw-input 'split("\n")[:-1]' | \
         jq  "{\"repository\": .[] }" | \
         jq -sc "{ \"include\": . }" > tmp
         cat ./tmp
         # End Generate Json String
         matrixStringifiedObject=$(cat ./tmp) # Use this as jq @sh wasn't cooperating
         echo "::set-output name=repositories::$matrixStringifiedObject"
  downstream-dsl-tests:
    runs-on: ubuntu-latest
    needs: getDslDownstreamMatrix
    strategy:
      matrix: ${{fromJson(needs.getDslDownstreamMatrix.outputs.matrix)}}
      fail-fast: false
    name: Downstream - ${{ matrix.repository }}
    steps:
    - name: Checkout 
      uses: actions/checkout@v2

    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Setup default branches
      run: |
        echo 'BASE_BRANCH=${{ github.base_ref }}' >> $GITHUB_ENV
    
    - name: Setup correct base branch for opta repositories
      if: ${{ startsWith(matrix.repository, 'opta') && github.base_ref != 'main' }}
      run: |
        IFS='.' read -ra ver <<< "${{ github.base_ref }}"
        release=${ver[2]}
        minor=${ver[1]}
        major=${ver[0]}
        echo "BASE_BRANCH=$((major+7)).$minor.$release" >> $GITHUB_ENV

    - name: Setup correct base branch for drools repositories
      if: ${{ startsWith(matrix.repository, 'drools') && github.base_ref != 'main' }}
      run: |
        IFS='.' read -ra ver <<< "${{ github.base_ref }}"
        release=${ver[2]}
        minor=${ver[1]}
        major=${ver[0]}
        echo "BASE_BRANCH=$((major+7)).$minor.$release" >> $GITHUB_ENV

    - name: Setup correct base branch for optaplanner-quickstarts
      if: github.base_ref == 'main' && matrix.repository == 'optaplanner-quickstarts'
      run: |
        echo 'BASE_BRANCH=development' >> $GITHUB_ENV

    - name: Test DSL
      env:
        DSL_DEFAULT_MAIN_CONFIG_FILE_REPO: kiegroup/kogito-pipelines
        DSL_DEFAULT_MAIN_CONFIG_FILE_REF: main
        DSL_DEFAULT_MAIN_CONFIG_FILE_PATH: .ci/jenkins/config/main.yaml
      run: |
        dsl/seed/scripts/seed_test.sh -o ${{ matrix.repository }} \
                  -h ${{ github.head_ref }} \
                  -r ${{ github.event.pull_request.head.repo.full_name }} \
                  -b ${{ env.BASE_BRANCH }} \
                  -t ${{ github.event.pull_request.base.repo.full_name }} \
                  -d ${{ github.base_ref }} \
                  .ci/jenkins/dsl