@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem24g && !master'
    }
    tools {
        maven 'kie-maven-3.6.3'
        jdk 'kie-jdk11'
    }
    parameters {
        string(description: 'The RHBA Maven Repo URL', name: 'RHBA_MAVEN_REPO_URL')
        string(description: 'The RHBA version prefix, something like 7.52.0.Final-redhat', name: 'RHBA_VERSION_PREFIX')
        string(description: 'The deployment URL', name: 'KOGITO_DEPLOYMENT_REPO_URL')
        booleanParam(description: 'Skip Tests? True as default', name: 'SKIP_TESTS', defaultValue: true)
        string(description: 'The UMB message version', name: 'UMB_VERSION', defaultValue: 'main')
        string(description: 'The product version', name: 'PRODUCT_VERSION')
        string(description: 'The optaplanner product version', name: 'OPTAPLANNER_PRODUCT_VERSION')
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
    }
    environment {
        DATE_TIME_SUFFIX_FORMAT = 'yyyyMMddHH'
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'
            }
        }
        stage('Clone build configuration repo') {
            steps {
                script {
                    def currentBranch = env.BRANCH_NAME ?: env.GIT_BRANCH
                    println "Checking out ${env.BUILD_CONFIGURATION_REPO_URL}:${currentBranch} into build_config folder"
                    sh "git clone -b ${currentBranch} --single-branch ${env.BUILD_CONFIGURATION_REPO_URL} build_config"
                }
            }
        }
        stage('Get latest RHBA product version') {
            steps {
                script {
                    env.RHBA_LASTEST_PRODUCT_VERSION = maven.getLatestArtifactVersionPrefixFromRepository(RHBA_MAVEN_REPO_URL, 'org.drools', 'drools', RHBA_VERSION_PREFIX)
                    println "[INFO] RHBA latest product version ${env.RHBA_LASTEST_PRODUCT_VERSION} from ${RHBA_MAVEN_REPO_URL}. Filtered by ${RHBA_VERSION_PREFIX}"
                }
            }
        }
        stage('Build Nightly projects') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE')
                {
                    script {
                        def pipelineHelper = new PipelineHelper(this)
                        pipelineHelper.retry(
                        {
                            def SETTINGS_XML_ID = 'kogito-nightly-master'
                            def projectCollection = ['kogito-runtimes', 'optaplanner', 'kogito-examples', 'optaplanner-quickstarts', 'optaweb-vehicle-routing', 'optaweb-employee-rostering', 'jboss-integration/kogito-rhba']
                            def projectVariableMap = [:]
                            def additionalVariables = ['optaplannerProductVersion': env.OPTAPLANNER_PRODUCT_VERSION, 'optaplanner-quickstarts-scmRevision': 'stable', 'rhbaProductVersion': env.RHBA_LASTEST_PRODUCT_VERSION]
                            configFileProvider([configFile(fileId: '49737697-ebd6-4396-9c22-11f7714808eb', variable: 'PRODUCTION_PROJECT_LIST')]) {
                                pmebuild.buildProjects(projectCollection, "${SETTINGS_XML_ID}", "$WORKSPACE/build_config/kogito/nightly", "${env.PME_CLI_PATH}", projectVariableMap, additionalVariables, [:])
                            }
                        }, 2, 480*60)
                    }
                }
            }
        }
        stage('Generate Properties Files') {
            steps {
                script {
                    if(env.ALREADY_BUILT_PROJECTS?.trim()) {
                        def PME_BUILD_VARIABLES = env.PME_BUILD_VARIABLES.split(';').collect{ it.split('=')}.inject([:]) {map, item -> map << [(item.length == 2 ? item[0] : null): (item.length == 2 ? item[1] : null)]}

                        build job: env.KOGITO_PROPERTIES_GENERATOR_PATH, parameters: [
                            [$class: 'BooleanParameterValue', name: 'IS_PROD', value: false],
                            [$class: 'StringParameterValue', name: 'BRANCH_NAME', value: env.BRANCH_NAME],
                            [$class: 'StringParameterValue', name: 'KOGITO_PRODUCT_VERSION', value: PME_BUILD_VARIABLES['productVersion']],
                            [$class: 'StringParameterValue', name: 'OPTAPLANNER_PRODUCT_VERSION', value: PME_BUILD_VARIABLES['optaplannerProductVersion']],
                            [$class: 'StringParameterValue', name: 'TIME_STAMP', value: "${PME_BUILD_VARIABLES['datetimeSuffix']}"],
                            [$class: 'StringParameterValue', name: 'GIT_INFORMATION_HASHES', value: "${treatGitHashes(env.GIT_INFORMATION_HASHES)}"]
                        ]
                    } else {
                        println "[WARNING] No artifacts to upload. None project has been built."
                    }
                }
            }
        }
        stage('Upload Files to repository') {
            steps {
                script {
                    if(env.ALREADY_BUILT_PROJECTS?.trim()) {
                        echo "[INFO] Start uploading ${env.WORKSPACE}/deployDirectory"
                        if(fileExists("${env.WORKSPACE}/deployDirectory")){
                            dir("${env.WORKSPACE}/deployDirectory") {
                                withCredentials([usernameColonPassword(credentialsId: "${env.NIGHTLY_DEPLOYMENT_CREDENTIAL}", variable: 'deploymentCredentials')]) {
                                    sh 'zip -r kogito .'
                                    sh "curl --upload-file kogito.zip -u $deploymentCredentials -v ${KOGITO_DEPLOYMENT_REPO_URL}"
                                }
                            }
                        }
                    } else {
                        println "[WARNING] No artifacts to upload. None project has been built."
                    }
                }
            }
        }
        stage ('Send UMB Message to QE.') {
            steps {
                script {
                    if(env.ALREADY_BUILT_PROJECTS?.trim()) {
                        echo '[INFO] Sending KOGITO UMB message to QE.'
                        def PME_BUILD_VARIABLES = env.PME_BUILD_VARIABLES.split(';').collect{ it.split('=')}.inject([:]) {map, item -> map << [(item.length == 2 ? item[0] : null): (item.length == 2 ? item[1] : null)]}

                        def propertiesFileUrl = "${env.STAGING_SERVER_URL}/kogito/KOGITO-${PME_BUILD_VARIABLES['productVersion']}.${PME_BUILD_VARIABLES['milestone']}/kogito-${PME_BUILD_VARIABLES['datetimeSuffix']}.properties"
                        def topic = "VirtualTopic.qe.ci.ba.kogito.${env.UMB_VERSION}.nightly.trigger"
                        def eventType = "kogito-${env.UMB_VERSION}-nightly-qe-trigger"
                        def messageBody = getMessageBody(propertiesFileUrl, env.ALREADY_BUILT_PROJECTS)
                        echo "[INFO] Message Body: ${messageBody}"
                        echo "[INFO] Topic: ${topic}"
                        echo "[INFO] Event Type: ${eventType}"
                        build job: env.SEND_UMB_MESSAGE_JOB_PATH, parameters: [
                                [$class: 'StringParameterValue', name: 'MESSAGE_BODY', value: messageBody],
                                [$class: 'StringParameterValue', name: 'TOPIC', value: topic],
                                [$class: 'StringParameterValue', name: 'EVENT_TYPE', value: eventType]
                        ]
                        echo '[SUCCESS] Message was successfully sent.'
                    } else {
                        println "[WARNING] No artifacts to upload. None project has been built."
                    }
                }
            }
        }
    }
    post {
        failure {
            emailext body: 'Kogito ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL} \n' +
                    ' \n' +
                    '${BUILD_LOG, maxLines=750}', subject: 'Kogito ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        unstable {
            emailext body: 'Kogito ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL} \n' +
                    ' \n' +
                    'Failed tests: ${BUILD_URL}/testReport \n' +
                    ' \n' +
                    '${BUILD_LOG, maxLines=750}', subject: 'Kogito ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        fixed {
            emailext body: 'Kogito ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL}', subject: 'Kogito ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        always {
            archiveArtifacts artifacts: '**/*.maven.log', fingerprint: false, defaultExcludes: true, caseSensitive: true, allowEmptyArchive: true
        }
        cleanup {
            cleanWs()
        }
    }
}

def getMessageBody(String propertiesFileUrl, String alreadyBuiltProjects) { 
    def alreadyBuiltProjectsArray = (alreadyBuiltProjects ?: '').split(";")
    return """
{
	"propertiesFileUrl": "${propertiesFileUrl}",
	"builtProjects": ${new groovy.json.JsonBuilder(alreadyBuiltProjectsArray).toString()}
}"""    
}

def treatGitHashes(String gitInformationHashes) {
    return gitInformationHashes.replace('-', '.').replaceAll(/([\w\d\-\_\.]*\/)([\w\d\-\_\.]*)/,'$2.scm.hash').replace(';', '\n')
}
