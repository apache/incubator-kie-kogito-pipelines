import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

RUNTIMES_DEPLOY = 'kogito-runtimes-deploy'
OPTAPLANNER_DEPLOY = 'optaplanner-deploy'
APPS_DEPLOY = 'kogito-apps-deploy'
EXAMPLES_DEPLOY = 'kogito-examples-deploy'
IMAGES_DEPLOY = 'kogito-images-deploy'
EXAMPLES_IMAGES_DEPLOY = 'kogito-examples-images-deploy'
OPERATOR_DEPLOY = 'kogito-operator-deploy'
RUNTIMES_PROMOTE = 'kogito-runtimes-promote'
OPTAPLANNER_PROMOTE = 'optaplanner-promote'
APPS_PROMOTE = 'kogito-apps-promote'
EXAMPLES_PROMOTE = 'kogito-examples-promote'
IMAGES_PROMOTE = 'kogito-images-promote'
EXAMPLES_IMAGES_PROMOTE = 'kogito-examples-images-promote'
OPERATOR_PROMOTE = 'kogito-operator-promote'

// Map of executed jobs
// See https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
// for more options on built job entity
JOBS = [:]

defaultImageParamsPrefix = 'IMAGE'
kogitoImagesParamsPrefix = 'KOGITO_IMAGES'
examplesImagesParamsPrefix = 'EXAMPLES_IMAGES'
baseImageParamsPrefix = 'BASE_IMAGE'
promoteImageParamsPrefix = 'PROMOTE_IMAGE'

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Some generated env is also defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        IMAGE_NAME_NIGHTLY_SUFFIX = 'nightly'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    assert getKogitoArtifactsVersion() != ''
                    if (isArtifactsDeploy() || isArtifactsPromote()) {
                        assert getOptaPlannerVersion() != ''
                    }

                    currentBuild.displayName = getDisplayName()

                    sendNotification("Release Pipeline has started...\nKogito artifacts version=${getKogitoArtifactsVersion()}\nOptaplanner version=${getOptaPlannerVersion()}\n=> ${env.BUILD_URL}")

                    // Safety measure to not publish to main JBoss
                    if (getGitAuthor() != 'kiegroup' && !getArtifactsRepositoryParam()) {
                        sendNotification("Git Author is different from `kiegroup` and no `ARTIFACTS_REPOSITORY` parameter has been provided. Are you sure you want to continue ? => ${env.BUILD_URL}input")
                        input message: 'Should the pipeline continue with no `ARTIFACTS_REPOSITORY` defined ?', ok: 'Yes'
                    }
                }
            }
        }

        stage('Build & Deploy Kogito Runtimes') {
            when {
                expression { return isArtifactsDeploy() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)

                    buildJob(RUNTIMES_DEPLOY, buildParams)
                }
            }
        }

        stage('Build & Deploy OptaPlanner') {
            when {
                expression { return isArtifactsDeploy() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams(getOptaPlannerVersion())
                    addSkipTestsParam(buildParams)
                    addStringParam(buildParams, 'KOGITO_VERSION', getKogitoArtifactsVersion())
                    addStringParam(buildParams, 'QUICKSTARTS_BUILD_BRANCH_NAME', getOptaPlannerReleaseBranch())
                    buildJob(OPTAPLANNER_DEPLOY, buildParams)
                }
            }
        }

        stage('Build & Deploy Kogito Apps') {
            when {
                expression { return isArtifactsDeploy() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    addStringParam(buildParams, 'OPTAPLANNER_VERSION', getOptaPlannerVersion())

                    buildJob(APPS_DEPLOY, buildParams)
                }
            }
        }

        stage('Build & Deploy Kogito Examples') {
            when {
                expression { return isArtifactsDeploy() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    addStringParam(buildParams, 'OPTAPLANNER_VERSION', getOptaPlannerVersion())

                    buildJob(EXAMPLES_DEPLOY, buildParams)
                }
            }
        }

        stage('Artifacts\' staging finalization') {
            steps {
                script {
                    sendNotification("All artifacts have been staged. You can find them here: ${getStagingRepository()}")

                    String jobUrl = getJobUrl(EXAMPLES_DEPLOY)
                    def deployProps = jobUrl ? readDeployProperties(jobUrl) : [:]

                    env.EXAMPLES_URI = params.EXAMPLES_URI ?: (deployProps['kogito-examples.pr.source.uri'] ?: "https://github.com/${getGitAuthor()}/kogito-examples")
                    env.EXAMPLES_REF = params.EXAMPLES_REF ?: (deployProps['kogito-examples.pr.source.ref'] ?: util.getReleaseBranchFromVersion(getKogitoArtifactsVersion()))

                    echo "Got examples uri ${env.EXAMPLES_URI}"
                    echo "Got examples ref ${env.EXAMPLES_REF}"
                }
            }
        }

        stage('Build & Deploy Kogito Images') {
            when {
                expression { return isImagesDeploy() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams(getKogitoImagesVersion())
                    addStringParam(buildParams, 'KOGITO_ARTIFACTS_VERSION', getKogitoArtifactsVersion())
                    addImageBuildParams(buildParams, getKogitoImagesTempTag())
                    addSkipTestsParam(buildParams)
                    addExamplesParam(buildParams)

                    buildJob(IMAGES_DEPLOY, buildParams)
                }
            }
        }

        stage('Build & Deploy Examples Images') {
            when {
                expression { return isExamplesImagesDeploy() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams(getKogitoArtifactsVersion())
                    addSkipTestsParam(buildParams)
                    addImageBuildParams(buildParams, getKogitoExamplesImagesTempTag())
                    addStringParam(buildParams, constructKey(defaultImageParamsPrefix, 'NAME_PREFIX'), 'examples')

                    // For BDD tests
                    addImageBuildParams(buildParams, getKogitoImagesTempTag(), false, kogitoImagesParamsPrefix)
                    addExamplesParam(buildParams)

                    buildJob(EXAMPLES_IMAGES_DEPLOY, buildParams)
                }
            }
        }

        stage('Build & Deploy Kogito Operator') {
            when {
                expression { return isOperatorDeploy() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams(getKogitoOperatorVersion())
                    addSkipTestsParam(buildParams)
                    addImageBuildParams(buildParams, getKogitoOperatorTempTag())

                    // For BDD tests
                    // We use the quay image registry for temp images until https://issues.redhat.com/browse/KOGITO-2219 is solved
                    if (isImagesDeploy()) {
                        addImageBuildParams(buildParams, getKogitoImagesTempTag(), false, kogitoImagesParamsPrefix)
                    } else {
                        // If we are in that case, we suppose images have been released ...
                        addImageBuildParams(buildParams, getKogitoImagesFinalTag(), true, kogitoImagesParamsPrefix)
                    }

                    if (isExamplesImagesDeploy()) {
                        addImageBuildParams(buildParams, getKogitoExamplesImagesTempTag(), false, examplesImagesParamsPrefix)
                    } else {
                        // If we are in that case, we suppose images have been released ...
                        addImageBuildParams(buildParams, getKogitoExamplesImagesFinalTag(), true, examplesImagesParamsPrefix)
                    }
                    addStringParam(buildParams, constructKey(examplesImagesParamsPrefix, 'CACHE_MODE'), 'always')
                    addStringParam(buildParams, constructKey(examplesImagesParamsPrefix, 'NAME_PREFIX'), 'examples')

                    addExamplesParam(buildParams)

                    buildJob(OPERATOR_DEPLOY, buildParams)
                }
            }
        }

        stage('Are staged artifacts released?') {
            when {
                // Execute only if artifacts repository was not given, which means the staging repository has been created
                expression { return isArtifactsDeploy() && !getArtifactsRepositoryParam() }
            }
            steps {
                script {
                    String body = "${getKogitoArtifactsVersion()} artifacts are ready for release.\n" +
                                 "Please release the staging repositories and then confirm here: ${env.BUILD_URL}input"
                    sendNotification(body)
                    input message: 'Has the staging repository been released ?', ok: 'Yes'

                    sendNotification('Artifacts have been released. Finalizing now the release ...')
                }
            }
        }

        stage('Promote Kogito Runtimes') {
            when {
                expression { return getJobUrl(RUNTIMES_DEPLOY) }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams()
                    addDeployBuildUrlParam(buildParams, RUNTIMES_DEPLOY)

                    buildJob(RUNTIMES_PROMOTE, buildParams)
                }
            }
        }

        stage('Promote OptaPlanner') {
            when {
                expression { return getJobUrl(OPTAPLANNER_DEPLOY) }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams(getOptaPlannerVersion())
                    addDeployBuildUrlParam(buildParams, OPTAPLANNER_DEPLOY)
                    addStringParam(buildParams, 'KOGITO_VERSION', getKogitoArtifactsVersion())

                    buildJob(OPTAPLANNER_PROMOTE, buildParams)
                }
            }
        }

        stage('Promote Kogito Apps') {
            when {
                expression { return getJobUrl(APPS_DEPLOY) }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams()
                    addStringParam(buildParams, 'OPTAPLANNER_VERSION', getOptaPlannerVersion())
                    addDeployBuildUrlParam(buildParams, APPS_DEPLOY)

                    buildJob(APPS_PROMOTE, buildParams)
                }
            }
        }

        stage('Promote Kogito Examples') {
            when {
                expression { return getJobUrl(EXAMPLES_DEPLOY) }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams()
                    addStringParam(buildParams, 'OPTAPLANNER_VERSION', getOptaPlannerVersion())
                    addDeployBuildUrlParam(buildParams, EXAMPLES_DEPLOY)
                    addBooleanParam(buildParams, 'UPDATE_STABLE_BRANCH', params.DEPLOY_AS_LATEST)

                    buildJob(EXAMPLES_PROMOTE, buildParams)
                }
            }
        }

        stage('Promote Kogito Images') {
            when {
                expression { return getJobUrl(IMAGES_DEPLOY) }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams(getKogitoImagesVersion())
                    addDeployBuildUrlParamOrClosure(buildParams, IMAGES_DEPLOY) {
                        addImageBuildParams(buildParams, getKogitoImagesTempTag(), false, baseImageParamsPrefix)
                    }
                    addImageBuildParams(buildParams, getKogitoImagesFinalTag(), true, promoteImageParamsPrefix)
                    addBooleanParam(buildParams, 'DEPLOY_WITH_LATEST_TAG', params.DEPLOY_AS_LATEST)

                    buildJob(IMAGES_PROMOTE, buildParams)
                }
            }
        }

        stage('Promote Examples Images') {
            when {
                expression { return isExamplesImagesPromote() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams()
                    
                    addDeployBuildUrlParamOrClosure(buildParams, EXAMPLES_IMAGES_DEPLOY)  {
                        addImageBuildParams(buildParams, getKogitoExamplesImagesTempTag(), false, baseImageParamsPrefix)
                        addStringParam(buildParams, constructKey(baseImageParamsPrefix, 'NAME_PREFIX'), 'examples')
                    }

                    addImageBuildParams(buildParams, getKogitoExamplesImagesFinalTag(), true, promoteImageParamsPrefix)
                    addStringParam(buildParams, constructKey(promoteImageParamsPrefix, 'NAME_PREFIX'), 'examples')
                    addBooleanParam(buildParams, 'DEPLOY_WITH_LATEST_TAG', params.DEPLOY_AS_LATEST)

                    buildJob(EXAMPLES_IMAGES_PROMOTE, buildParams)
                }
            }
        }

        stage('Promote Kogito Operator') {
            when {
                expression { return getJobUrl(OPERATOR_DEPLOY) }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams(getKogitoOperatorVersion())
                    addDeployBuildUrlParamOrClosure(buildParams, OPERATOR_DEPLOY)  {
                        addImageBuildParams(buildParams, getKogitoOperatorTempTag(), false, baseImageParamsPrefix)
                    }

                    // Base image information is given by the deploy URL
                    addImageBuildParams(buildParams, getKogitoOperatorFinalTag(), true, promoteImageParamsPrefix)
                    addBooleanParam(buildParams, 'DEPLOY_WITH_LATEST_TAG', params.DEPLOY_AS_LATEST)

                    buildJob(OPERATOR_PROMOTE, buildParams)
                }
            }
        }

        // To be enabled later
        // stage("Deploy docs") {
        //     steps {
        //         script {
        //             sendStageNotification()

        //             // TODO manual confirmation from Stetson

        //             // Set params
        //             def buildParams = [:]
        //             // TODO how to set oldVersion ?
        //             addStringParam(buildParams, "oldVersion", "???")
        //             addStringParam(buildParams, "newVersion", getKogitoArtifactsVersion())
        //             addStringParam(buildParams, "tagName", "${getKogitoArtifactsVersion()}-kogito")
        //             // TODO how to set nextSnapshot ?
        //             addStringParam(buildParams, "nextSnapshot", "???")

    //             buildJob(OPERATOR_DEPLOY, "../../kogito-docs/kogito-docs-upload", buildParams)
    //         }
    //     }
    // }
    }
    post {
        always {
            cleanWs()
        }
        success {
            script {
                sendSuccessfulReleaseNotification()
            }
        }
        unsuccessful {
            sendErrorNotification()
        }
    }
}

def buildJob(String jobName, List buildParams) {
    echo "Build ${jobName} with params ${buildParams}"

    def job = build(job: "./${jobName}", wait: true, parameters: buildParams, propagate: false)
    def jobResult = job.getResult()
    def jobUrl = job.getAbsoluteUrl()
    if (jobResult != 'SUCCESS') {
        echo "Sending a notification about an unsuccessful job build ${jobName}."
        sendNotification("`${jobName}` finished with status `${jobResult}`.\nSee: ${jobUrl}\n\nPlease provide which action should be done (retry ? continue ? skip ? abort ?): ${env.BUILD_URL}input")

        // abort is handled automatically by the pipeline in the input
        def result = input message: "Job `${jobName}` is in status ${jobResult}. What do you want to do ?\nBeware that skipping a deploy job will not launch the promote part.", parameters: [choice(name: 'ACTION', choices: ['retry', 'continue', 'skip'].join('\n')), string(name: 'MESSAGE', description: 'If you want to add information to your action...')]
        String resultStr = "`${jobName}` failure => Decision was made to ${result['ACTION']}."
        if (result['MESSAGE'] != '') {
            resultStr += "Additional Information: `${result['MESSAGE']}`"
        }
        echo resultStr
        sendNotification(resultStr)

        // If skip, do not do anything (no registration)
        if (result['ACTION'] == 'retry') {
            return buildJob(jobName, buildParams)
        } else if (result['ACTION'] == 'continue') {
            registerJob(jobName, job)
        }
    } else {
        // Succeeded
        registerJob(jobName, job)
    }

    return job
}

def registerJob(String jobName, def job) {
    JOBS[jobName] = job
}

def getJob(String jobName) {
    return JOBS[jobName]
}

String getJobUrl(String jobName) {
    echo "getJobUrl for ${jobName}"
    def job = getJob(jobName)
    return job ? job.getAbsoluteUrl() : ''
}

void sendSuccessfulReleaseNotification() {
    String bodyMsg = 'Release is successful with those jobs:\n'
    JOBS.each {
        bodyMsg += "- ${it.key}\n"
    }
    bodyMsg += "\nPlease look here: ${BUILD_URL} for more information"
    sendNotification(bodyMsg)
}

void sendErrorNotification() {
    sendNotification("Kogito release job #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}")
}

void sendStageNotification() {
    sendNotification("${env.STAGE_NAME}")
}

void sendNotification(String body) {
    echo 'Send Notification'
    echo body
    emailext body: body, subject: "[${env.GIT_BRANCH_NAME}] Release Pipeline",
                to: env.KOGITO_CI_EMAIL_TO
}

def readDeployProperties(String buildUrl) {
    def deployProperties = [:]
    if (buildUrl != '') {
        if (!buildUrl.endsWith('/')) {
            buildUrl += '/'
        }
        sh "wget ${buildUrl}artifact/deployment.properties -O deployment.properties"
        deployProperties = readProperties file: 'deployment.properties'
        echo deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
    return deployProperties
}

List getDefaultBuildParams(String version = '') {
    version = version ?: getKogitoArtifactsVersion()

    List buildParams = []
    addDisplayNameParam(buildParams, getDisplayName(version))
    addStringParam(buildParams, 'PROJECT_VERSION', version)
    return buildParams
}

void addDisplayNameParam(buildParams, name = '') {
    name = name ?: getDisplayName()
    addStringParam(buildParams, 'DISPLAY_NAME', name)
}

void addDeployBuildUrlParam(buildParams, jobName) {
    addDeployBuildUrlParamOrClosure(buildParams, jobName)
}

void addDeployBuildUrlParamOrClosure(buildParams, jobName, closure = null) {
    String url = getJobUrl(jobName)
    if(url) {
        addStringParam(buildParams, 'DEPLOY_BUILD_URL', getJobUrl(jobName))
    } else if(closure){
        closure()
    }
}

void addSkipTestsParam(buildParams) {
    addBooleanParam(buildParams, 'SKIP_TESTS', params.SKIP_TESTS)
}

void addExamplesParam(buildParams) {
    addStringParam(buildParams, 'EXAMPLES_URI', env.EXAMPLES_URI)
    addStringParam(buildParams, 'EXAMPLES_REF', env.EXAMPLES_REF)
}

void addImageBuildParams(List buildParams, String tag, boolean isFinalImage = false, String paramsPrefix = defaultImageParamsPrefix) {
    addBooleanParam(buildParams, constructKey(paramsPrefix, 'USE_OPENSHIFT_REGISTRY'), !isFinalImage && params.USE_TEMP_OPENSHIFT_REGISTRY)
    addStringParam(buildParams, constructKey(paramsPrefix, 'REGISTRY_CREDENTIALS'), env.IMAGE_REGISTRY_CREDENTIALS)
    addStringParam(buildParams, constructKey(paramsPrefix, 'REGISTRY'), env.IMAGE_REGISTRY)
    addStringParam(buildParams, constructKey(paramsPrefix, 'NAMESPACE'), env.IMAGE_NAMESPACE)
    if (!isFinalImage) {
        addStringParam(buildParams, constructKey(paramsPrefix, 'NAME_SUFFIX'), env.IMAGE_NAME_NIGHTLY_SUFFIX)
    }
    addStringParam(buildParams, constructKey(paramsPrefix, 'TAG'), tag)
}

void addStringParam(List params, String key, String value) {
    params.add(string(name: key, value: value))
}

void addBooleanParam(List params, String key, boolean value) {
    params.add(booleanParam(name: key, value: value))
}

String constructKey(String prefix, String paramId) {
    return prefix ? "${prefix}_${paramId}" : paramId
}

String getDisplayName(version = '') {
    version = version ?: getKogitoArtifactsVersion()
    return "Release ${version}"
}

String getKogitoArtifactsVersion() {
    return params.PROJECT_VERSION
}

String getKogitoImagesVersion() {
    return params.KOGITO_IMAGES_VERSION ?: removeVersionSuffixIfExist(getKogitoArtifactsVersion())
}

String getKogitoOperatorVersion() {
    return params.KOGITO_OPERATOR_VERSION ?: removeVersionSuffixIfExist(getKogitoArtifactsVersion())
}

String getOptaPlannerVersion() {
    return params.OPTAPLANNER_VERSION
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getArtifactsRepositoryParam() {
    return env['ARTIFACTS_REPOSITORY'] ?: ''
}

String getOptaPlannerReleaseBranch() {
    return params.OPTAPLANNER_RELEASE_BRANCH ?: util.getReleaseBranchFromVersion(getOptaPlannerVersion())
}

String getStagingRepository() {
    return getArtifactsRepositoryParam() ?: env.DEFAULT_STAGING_REPOSITORY
}

boolean isArtifactsDeploy() {
    return !params.SKIP_ARTIFACTS_DEPLOY
}

boolean isImagesDeploy() {
    return !params.SKIP_IMAGES_DEPLOY
}

boolean isExamplesImagesDeploy() {
    return !params.SKIP_EXAMPLES_IMAGES_DEPLOY
}

boolean isOperatorDeploy() {
    return !params.SKIP_OPERATOR_DEPLOY
}

boolean isArtifactsPromote() {
    return isArtifactsDeploy() && !params.SKIP_ARTIFACTS_PROMOTE
}

boolean isImagesPromote() {
    return isImagesDeploy() && !params.SKIP_IMAGES_PROMOTE
}

boolean isExamplesImagesPromote() {
    return isExamplesImagesDeploy() && !params.SKIP_EXAMPLES_IMAGES_PROMOTE
}

boolean isOperatorPromote() {
    return isOperatorDeploy() && !params.SKIP_OPERATOR_PROMOTE
}

String getKogitoImagesTempTag() {
    return "${getKogitoImagesVersion()}-temp".toLowerCase()
}

String getKogitoImagesFinalTag() {
    return "${getKogitoImagesVersion()}".toLowerCase()
}

String getKogitoExamplesImagesTempTag() {
    return "${getKogitoArtifactsVersion()}-temp".toLowerCase()
}

String getKogitoExamplesImagesFinalTag() {
    return "${getKogitoArtifactsVersion()}".toLowerCase()
}

String getKogitoOperatorTempTag() {
    return "${getKogitoOperatorVersion()}-temp".toLowerCase()
}

String getKogitoOperatorFinalTag() {
    return "${getKogitoOperatorVersion()}".toLowerCase()
}

String removeVersionSuffixIfExist(String version) {
    Integer[] versionSplit = util.parseVersion(version)
    return "${versionSplit[0]}.${versionSplit[1]}.${versionSplit[2]}"
}
