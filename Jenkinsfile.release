@Library('jenkins-pipeline-shared-libraries')_

CREATE_RELEASE_BRANCHES = 'create-release-branches'
RUNTIMES_DEPLOY = 'kogito-runtimes-deploy'
IMAGES_DEPLOY = 'kogito-images-deploy'
OPERATOR_DEPLOY = 'kogito-operator-deploy'
RUNTIMES_PROMOTE = 'kogito-runtimes-promote'
IMAGES_PROMOTE = 'kogito-images-promote'
OPERATOR_PROMOTE = 'kogito-operator-promote'

KOGITO_REPOS = [
    'kogito-runtimes',
    'kogito-apps',
    'kogito-examples',
    'kogito-images',
    'kogito-cloud-operator',
    'kogito-pipelines' // Create branch to activate nightlies if needed
]

// Map of executed jobs
// See https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
// for more options on built job entity
JOBS = [:]

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    parameters {
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Project version to release as Major.minor.micro')
        booleanParam(name: 'DEPLOY_AS_LATEST', defaultValue: 'false', description: 'Given project version is considered the latest version')

        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip all tests')

        string(name: 'ARTIFACTS_REPOSITORY', defaultValue: '', description: 'Override default. Provide a staging repository for artifacts to be deployed to')
        string(name: 'EXAMPLES_URI', defaultValue: '', description: 'Override default. Git uri to the kogito-examples repository to use for tests.')
        string(name: 'EXAMPLES_REF', defaultValue: '', description: 'Override default. Git reference (branch/tag) to the kogito-examples repository to use for tests.')

        booleanParam(name: 'SKIP_RUNTIMES_DEPLOY', defaultValue: false, description: 'To skip Runtimes Test & Deployment. If skipped, please provide `ARTIFACTS_REPOSITORY`')
        booleanParam(name: 'SKIP_RUNTIMES_PROMOTE', defaultValue: false, description: 'To skip Runtimes Promote only. Automatically skipped if SKIP_RUNTIMES_DEPLOY is true.')
        booleanParam(name: 'SKIP_IMAGES_DEPLOY', defaultValue: false, description: 'To skip Images Test & Deployment.')
        booleanParam(name: 'SKIP_IMAGES_PROMOTE', defaultValue: false, description: 'To skip Images Promote only. Automatically skipped if SKIP_IMAGES_DEPLOY is true')
        booleanParam(name: 'SKIP_OPERATOR_DEPLOY', defaultValue: false, description: 'To skip Operator Test & Deployment.')
        booleanParam(name: 'SKIP_OPERATOR_PROMOTE', defaultValue: false, description: 'To skip Operator Promote only. Automatically skipped if SKIP_OPERATOR_DEPLOY is true.')

        booleanParam(name: 'USE_TEMP_OPENSHIFT_REGISTRY', defaultValue: false, description: 'If enabled, use Openshift registry to push temporary images')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')

        // RELEASE_BRANCH => will be set in Initialization phase

        // We use quay as temporary registry for testing between the jobs instead of Openshift, due to https://issues.redhat.com/browse/KOGITO-2219
        IMAGE_REGISTRY_CREDENTIALS = 'release_kogito'
        IMAGE_REGISTRY = 'quay.io'
        IMAGE_NAMESPACE = 'kiegroup'
        // Use nightly for now with a different tag but we should find another solution
        IMAGE_NAME_SUFFIX = 'nightly'
        // TEMP_TAG => will be set in Initialization phase

        // IMAGE_PROMOTE_TAG => will be set in Initialization phase

        AUTHOR_CREDS_ID = 'kie-ci'
        GIT_AUTHOR='kiegroup'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    echo 'Initialize'

                    assert getProjectVersion() != ''

                    currentBuild.displayName = getProjectVersion()
                    
                    // Set release branch
                    Integer[] versionSplit = util.parseVersion(getProjectVersion())
                    env.RELEASE_BRANCH = "${versionSplit[0]}.${versionSplit[1]}.x"
                    echo "Release Branch ${getReleaseBranch()}"

                    env.TEMP_TAG = "${getProjectVersion()}-temp"
                    echo "temporary tag is ${env.TEMP_TAG}"

                    env.IMAGE_PROMOTE_TAG = getProjectVersion()
                    
                    sendNotification("Release Pipeline for version ${getProjectVersion()} has started...")
                }
            }
        }

        stage('Create release branches') {
            steps {
                script {
                    echo "Call ${CREATE_RELEASE_BRANCHES} job"

                    def buildParams = []
                    addDisplayNameParam(buildParams)
                    addStringParam(buildParams, 'RELEASE_BRANCH', getReleaseBranch())

                    buildJob(CREATE_RELEASE_BRANCHES, buildParams)

                    sendNotification("${getReleaseBranch()} branches have been created on the different kogito repositories")
                }
            }
        }

        stage('Build & Deploy Runtimes') {
            when {
                expression { return isRuntimesDeploy() }
            }
            steps {
                script {
                    echo "Call ${RUNTIMES_DEPLOY} job"

                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    if(params.ARTIFACTS_REPOSITORY != ''){
                        addStringParam(buildParams, 'MAVEN_DEPLOY_REPOSITORY', params.ARTIFACTS_REPOSITORY)
                    }

                    buildJob(RUNTIMES_DEPLOY, buildParams)
                }
            }
        }

        stage('Retrieve Runtimes information'){
            steps {
                script {
                    String jobUrl = getJobUrl(RUNTIMES_DEPLOY)
                    def deployProps = [:]
                    if(jobUrl != "") {
                        deployProps = readDeployProperties(jobUrl)
                    }

                    env.STAGING_REPOSITORY = params.ARTIFACTS_REPOSITORY ?: (deployProps['staging-repo.url'] ?: '')
                    env.EXAMPLES_URI = params.EXAMPLES_URI ?: (deployProps['kogito-examples.pr.source.uri'] ?: '')
                    env.EXAMPLES_REF = params.EXAMPLES_REF ?: (deployProps['kogito-examples.pr.source.ref'] ?: env.RELEASE_BRANCH)

                    echo "Got staging repository ${env.STAGING_REPOSITORY}"
                    echo "Got examples uri ${env.EXAMPLES_URI}"
                    echo "Got examples ref ${env.EXAMPLES_REF}"
                }
            }
        }

        stage('Build & Deploy Images') {
            when {
                expression { return isImagesDeploy() }
            }
            steps {
                script {
                    echo "Call ${IMAGES_DEPLOY} job"

                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    addImageBuildParams(buildParams, '', env.TEMP_TAG, true, false)
                    addStringParam(buildParams, 'EXAMPLES_URI', env.EXAMPLES_URI)
                    addStringParam(buildParams, 'EXAMPLES_REF', env.EXAMPLES_REF)
                    addStringParam(buildParams, 'MAVEN_ARTIFACT_REPOSITORY', env.STAGING_REPOSITORY) // Get artifacts from staging repository

                    buildJob(IMAGES_DEPLOY, buildParams)
                }
            }
        }

        stage('Build & Deploy Operator') {
            when {
                expression { return isOperatorDeploy() }
            }
            steps {
                script {
                    echo "Call ${OPERATOR_DEPLOY} job"

                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    addImageBuildParams(buildParams, '', env.TEMP_TAG, true, false)
                    
                    // For BDD tests
                    // We use the quay image registry for temp images until https://issues.redhat.com/browse/KOGITO-2219 is solved
                    if(isImagesDeploy()){
                        addBooleanParam(buildParams, 'KOGITO_IMAGES_IN_OPENSHIFT_REGISTRY', params.USE_TEMP_OPENSHIFT_REGISTRY)
                        addStringParam(buildParams, 'KOGITO_IMAGES_REGISTRY', env.IMAGE_REGISTRY)
                        addStringParam(buildParams, 'KOGITO_IMAGES_NAMESPACE', env.IMAGE_NAMESPACE)
                        addStringParam(buildParams, 'KOGITO_IMAGES_NAME_SUFFIX', env.IMAGE_NAME_SUFFIX)
                        addStringParam(buildParams, 'KOGITO_IMAGES_TAG', env.TEMP_TAG)
                    }
                    addStringParam(buildParams, 'EXAMPLES_URI', env.EXAMPLES_URI)
                    addStringParam(buildParams, 'EXAMPLES_REF', env.EXAMPLES_REF)
                    addStringParam(buildParams, 'MAVEN_ARTIFACT_REPOSITORY', env.STAGING_REPOSITORY) // Get artifacts from staging repository

                    buildJob(OPERATOR_DEPLOY, buildParams)
                }
            }
        }

        stage('Promote runtimes') {
            when {
                expression { return isRuntimesPromote() }
            }
            steps {
                script {
                    echo "Call ${RUNTIMES_PROMOTE} job"

                    def buildParams = getDefaultBuildParams()
                    addStringParam(buildParams, 'DEPLOY_BUILD_URL', getJobUrl(RUNTIMES_DEPLOY))
                    addBooleanParam(buildParams, 'UPDATE_STABLE_BRANCH', params.DEPLOY_AS_LATEST)

                    buildJob(RUNTIMES_PROMOTE, buildParams)
                }
            }
        }

        stage('Promote images') {
            when {
                expression { return isImagesPromote() }
            }
            steps {
                script {
                    echo "Call ${IMAGES_PROMOTE} job"
                    
                    def buildParams = getDefaultBuildParams()
                    addStringParam(buildParams, 'DEPLOY_BUILD_URL', getJobUrl(IMAGES_DEPLOY))
                    addImageBuildParams(buildParams, 'PROMOTE', env.IMAGE_PROMOTE_TAG, true, true)
                    addBooleanParam(buildParams, 'DEPLOY_WITH_LATEST_TAG', params.DEPLOY_AS_LATEST)

                    buildJob(IMAGES_PROMOTE, buildParams)
                }
            }
        }

        stage('Promote operator image') {
            when {
                expression { return isOperatorPromote() }
            }
            steps {
                script {
                    echo "Call ${OPERATOR_PROMOTE} job"

                    def buildParams = getDefaultBuildParams()
                    addStringParam(buildParams, 'DEPLOY_BUILD_URL', getJobUrl(OPERATOR_DEPLOY))
                    addImageBuildParams(buildParams, 'PROMOTE', env.IMAGE_PROMOTE_TAG, true, true)
                    addBooleanParam(buildParams, 'DEPLOY_WITH_LATEST_TAG', params.DEPLOY_AS_LATEST)

                    buildJob(OPERATOR_PROMOTE, buildParams)
                }
            }
        }

        // To be enabled later
        // stage("Deploy docs") {
        //     steps {
        //         script {
        //             echo "Call kogito-operator-promote job"

        //             // TODO manual confirmation from Stetson

        //             // Set params
        //             def buildParams = [:]
        //             // TODO how to set oldVersion ?
        //             addStringParam(buildParams, "oldVersion", "???")
        //             addStringParam(buildParams, "newVersion", getProjectVersion())
        //             addStringParam(buildParams, "tagName", "${getProjectVersion()}-kogito")
        //             // TODO how to set nextSnapshot ?
        //             addStringParam(buildParams, "nextSnapshot", "???")

        //             buildJob(OPERATOR_DEPLOY, "../../kogito-docs/kogito-docs-upload", buildParams) 
        //         }
        //     }
        // }
    }
    post {
        always {
            cleanWs()
        }
        success {
            sendNotification("Version ${getProjectVersion()} has been successfully released !!!!")
        }
        unsuccessful {
            sendErrorNotification()
        }
    }
}

def buildJob(String jobName, List buildParams) {
    echo "Build ${jobName} with params ${buildParams}"
    
    def job = build(job: "./${jobName}", wait: true, parameters: buildParams, propagate: false)
    JOBS[jobName] = job

    def jobResult = job.getResult()
    def jobUrl = getJobUrl(jobName)
    if(jobResult != 'SUCCESS'){
        sendNotification("`${jobName}` finished with status `${jobResult}`.\nSee: ${jobUrl}\n\nPlease provide which action should be done (retry ? skip ? abort ?): ${env.BUILD_URL}input")

        // abort is handled automatically by the pipeline in the input
        def result = input message: "Job `${jobName}` is in status ${jobResult}. What do you want to do ?", parameters: [choice(name: 'ACTION', choices: ['retry', 'skip'].join('\n')), string(name: 'MESSAGE', description: 'If you want to add information to your action...')]
        String resultStr = "Decision was made to ${result['ACTION']} the job `${jobName}`."
        if(result['MESSAGE'] != ''){
            resultStr += "Additional Information: `${result['MESSAGE']}`"
        }
        echo resultStr
        sendNotification(resultStr)
        
        if(result['ACTION'] == 'retry') {
            return buildJob(jobName, buildParams)
        }
    }
    return job
}

def getJob(String jobName){
    return JOBS[jobName]
}

String getJobUrl(String jobName){
    echo "getJobUrl for ${jobName}"
    def job = getJob(jobName)
    return job ? job.getAbsoluteUrl() : ''
}

void sendErrorNotification(){
    sendNotification("Kogito release job #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}")
}

void sendNotification(String body){
    emailext body: body, subject: "[${getReleaseBranch()}] Release Pipeline",
                to: env.KOGITO_CI_EMAIL_TO
}

def readDeployProperties(String buildUrl){
    def deployProperties = [:]
    if (buildUrl != ''){
        if(!buildUrl.endsWith('/')){
            buildUrl += '/'
        }
        sh "wget ${buildUrl}artifact/deployment.properties -O deployment.properties"
        deployProperties = readProperties file: 'deployment.properties'
        echo deployProperties.collect{ entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
    return deployProperties
}

List getDefaultBuildParams(){
    List buildParams = []
    addDisplayNameParam(buildParams)
    addStringParam(buildParams, 'BUILD_BRANCH_NAME', getReleaseBranch())
    addStringParam(buildParams, 'GIT_AUTHOR', env.GIT_AUTHOR)
    addBooleanParam(buildParams, 'RELEASE', true)
    addStringParam(buildParams, 'PROJECT_VERSION', getProjectVersion())
    return buildParams
}

void addDisplayNameParam(buildParams){
    addStringParam(buildParams, 'DISPLAY_NAME', "release-${getProjectVersion()}")
}

void addSkipTestsParam(buildParams){
    addBooleanParam(buildParams, 'SKIP_TESTS', params.SKIP_TESTS)
}

void addImageBuildParams(List buildParams = [], String paramsPrefix = '', String tag, boolean isRegistryIncluded = false, boolean isFinalImage = false){
    if (!isFinalImage && params.USE_TEMP_OPENSHIFT_REGISTRY) {
        addBooleanParam(buildParams, constructKey(paramsPrefix, 'IMAGE_USE_OPENSHIFT_REGISTRY'), true)
    } else if(isRegistryIncluded) {
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_REGISTRY_CREDENTIALS'), env.IMAGE_REGISTRY_CREDENTIALS)
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_REGISTRY'), env.IMAGE_REGISTRY)
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_NAMESPACE'), env.IMAGE_NAMESPACE)
    }
    if(!isFinalImage){
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_NAME_SUFFIX'), env.IMAGE_NAME_SUFFIX)
    }
    addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_TAG'), tag)
}

void addStringParam(List params, String key, String value){
    params.add(string(name: key, value: value))
}

void addBooleanParam(List params, String key, boolean value){
    params.add(booleanParam(name: key, value: value))
}

String constructKey(String prefix, String paramId){
    return prefix == null || prefix == '' ? paramId : "${prefix}_${paramId}"
}

String getProjectVersion(){
    return params.PROJECT_VERSION
}

String getReleaseBranch(){
    return env.RELEASE_BRANCH
}

boolean isRuntimesDeploy(){
    return !params.SKIP_RUNTIMES_DEPLOY
}

boolean isImagesDeploy(){
    return !params.SKIP_IMAGES_DEPLOY
}

boolean isOperatorDeploy(){
    return !params.SKIP_OPERATOR_DEPLOY
}

boolean isRuntimesPromote(){
    return !params.SKIP_RUNTIMES_DEPLOY && !params.SKIP_RUNTIMES_PROMOTE
}

boolean isImagesPromote(){
    return !params.SKIP_IMAGES_DEPLOY && !params.SKIP_IMAGES_PROMOTE
}

boolean isOperatorPromote(){
    return !params.SKIP_OPERATOR_DEPLOY && !params.SKIP_OPERATOR_PROMOTE
}
