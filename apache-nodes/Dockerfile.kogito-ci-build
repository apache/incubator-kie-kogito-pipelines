FROM ubuntu:latest

SHELL ["/bin/bash", "-c"]

ARG SDKMAN_JAVA="17.0.8-tem"
ARG SDKMAN_MAVEN="3.8.8"
ARG PYTHON_MAJOR_VERSION="3"
ARG PYTHON_MAJOR_MINOR_VERSION="3.11"

# set locale to C.UTF-8
ENV LANG='C.UTF-8'

RUN apt update && apt upgrade -y && apt install -y \
# skdman deps (BEGIN)
git \
findutils \
tar \
gzip \
unzip \
zip \
# skdman deps (END)
# python3 (BEGIN)
python${PYTHON_MAJOR_MINOR_VERSION} \
python${PYTHON_MAJOR_MINOR_VERSION}-dev \
python${PYTHON_MAJOR_VERSION}-pip \
python${PYTHON_MAJOR_VERSION}-gssapi \
krb5-multidev \
# python3 (END)
# system (BEGIN)
netcat \
libvshadow-utils \
sudo \
wget \
# system (END)
# drools (BEGIN)
fontconfig \
# drools (END)
# kogito python integration (BEGIN)
libglvnd0 \
# kogito python integration (END)
&& apt clean

# Cypress dependencies install (BEGIN)
RUN apt install -y \
xvfb \
libgtk2.0-dev \
libgtk-3-dev \
libnotify-dev \
libnss3-tools \
libxss1 \
libasound2 \
&& apt clean
# Cypress dependencies install (END)

RUN sudo update-alternatives --install /usr/local/bin/python python $(which python${PYTHON_MAJOR_MINOR_VERSION}) 1 && \
  sudo update-alternatives --install /usr/local/bin/python3 python3 $(which python${PYTHON_MAJOR_MINOR_VERSION}) 1 && \
  sudo update-alternatives --install /usr/local/bin/pip pip $(which pip${PYTHON_MAJOR_VERSION}) 1

RUN groupadd input && groupadd render

RUN groupadd -g 910 nonrootuser && useradd -u 910 -g 910 -s /bin/bash -m nonrootuser && \
  echo "nonrootuser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Docker
RUN apt install -y ca-certificates curl gnupg lvm2 && \
  install -m 0755 -d /etc/apt/keyrings && \
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
  chmod a+r /etc/apt/keyrings/docker.gpg && \
  echo \
    "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
  apt update && \
  apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin && \
  apt clean all && \
  update-alternatives --install /usr/local/bin/docker-compose docker-compose /usr/libexec/docker/cli-plugins/docker-compose 1

USER nonrootuser

RUN curl -s "https://get.sdkman.io" | bash && \
  source "$HOME/.sdkman/bin/sdkman-init.sh" && \
  sdk install java ${SDKMAN_JAVA} && \
  sudo update-alternatives --install /usr/local/bin/java java $(which java) 1 && \
  sdk install maven ${SDKMAN_MAVEN} && \
  sudo update-alternatives --install /usr/local/bin/mvn mvn $(which mvn) 1 && \
  sdk flush
  
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash && \
  export NVM_DIR="$HOME/.nvm" && \
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" && \
  source ~/.bashrc && nvm install "v16.20.0" && \
  sudo update-alternatives --install /usr/local/bin/node node $(which node) 1 && \
  sudo update-alternatives --install /usr/local/bin/npm npm $(which npm) 1
  
RUN wget https://go.dev/dl/go1.19.10.linux-amd64.tar.gz -P /tmp && \
  sudo mkdir /opt/golang && \
  sudo tar -C /opt/golang -xzf /tmp/go*.tar.gz && \
  sudo chown -R nonrootuser:nonrootuser /opt/golang/go && \
  sudo chmod -R 755 /opt/golang/go && \
  echo 'export GOPATH=${HOME}/go' | sudo tee /etc/profile.d/go.sh && \
  echo "source /etc/profile.d/go.sh" >> $HOME/.bashrc && \
  rm -rf /tmp/go* && \
  sudo update-alternatives --install /usr/local/bin/go go /opt/golang/go/bin/go 1

# Cekit
RUN pip${PYTHON_MAJOR_VERSION} install cekit==4.8.0 behave lxml docker docker-squash elementPath pyyaml ruamel.yaml python-dateutil Jinja2 pykwalify colorlog click
RUN wget https://github.com/openshift/source-to-image/releases/download/v1.3.8/source-to-image-v1.3.8-980ca195-linux-amd64.tar.gz -P /tmp && \
  tmp_dir=$(mktemp -d) && \
  tar -C ${tmp_dir} -xzvf /tmp/source-to-image-v1.3.8-980ca195-linux-amd64.tar.gz && \
  ls ${tmp_dir} && \
  sudo mv ${tmp_dir}/s2i /usr/local/bin/ && \
  rm -rf ${tmp_dir} /tmp/source-to-image/*

# gh cli
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
  && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
  && sudo apt update \
  && sudo apt install gh -y

# Install kubectl
RUN wget https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl -P /tmp && \
  chmod +x /tmp/kubectl && \
  sudo mv /tmp/kubectl /usr/local/bin/kubectl

# Install oc client
RUN wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-4.13/openshift-client-linux.tar.gz -P /tmp && \
  tmp_dir=$(mktemp -d) && \
  tar -C ${tmp_dir} -xvf /tmp/openshift-client-linux.tar.gz && \
  sudo mv ${tmp_dir}/oc /usr/local/bin && \
  rm -rf ${tmp_dir} /tmp/openshift-client*

# Bash aliases
RUN echo -e "\nalias alternatives='update-alternatives'" >> .bashrc

ENV HOME="/home/nonrootuser/"

ENV JAVA_HOME="/home/nonrootuser/.sdkman/candidates/java/current/"
ENV MAVEN_HOME="/home/nonrootuser/.sdkman/candidates/maven/current/"
ENV MAVEN_OPTS="-Xms1024m -Xmx12g"
ENV NODE_HOME="/home/nonrootuser/.nvm/versions/node/v16.20.0"
ENV NODE_OPTIONS="--max_old_space_size=4096"
ENV GOPATH="/home/nonrootuser/go"
ENV GOROOT="/opt/golang/go"

ENV CONTAINER_ENGINE="docker"
ENV CONTAINER_ENGINE_TLS_OPTIONS=""

WORKDIR /project/directory
