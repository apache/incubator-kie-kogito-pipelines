@Library('jenkins-pipeline-shared-libraries')_

additionalTimeout = "${env.ADDITIONAL_TIMEOUT?.trim() ?: 120}"

agentLabel = "${env.ADDITIONAL_LABEL?.trim() ? ADDITIONAL_LABEL : 'kie-rhel7 && kie-mem16g'} && !master"
build_jdk_tool = env.BUILD_JDK_TOOL?.trim() ?: 'kie-jdk11'
build_maven_tool = env.BUILD_MAVEN_TOOL?.trim() ?: 'kie-maven-3.8.1'

pr_type = env.BUILDCHAIN_PR_TYPE?.trim() ?: 'pr'
build_chain_additional_arguments = env.BUILDCHAIN_PROJECT ? "-sp=${env.BUILDCHAIN_PROJECT.trim()}" : ''

is_native = env.NATIVE ? env.NATIVE.toBoolean() : false
is_lts = env.LTS ? env.LTS.toBoolean() : false

settingsXmlId = 'kogito_release_settings'

pipeline {
    agent {
        label agentLabel
    }
    tools {
        nodejs 'nodejs-12.16.3'
    }
    options {
        timestamps ()
        timeout(time: additionalTimeout, unit: 'MINUTES')
    }
    environment {
        FIREFOX_FOLDER = '/opt/tools/firefox-60esr'
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'
            }
        }
        // executes a script that compresses the consoleText and attaches it to the mail
        stage('build sh script') {
            steps {
                script {
                    mailer.buildLogScriptPR()
                }
            }
        }
        stage('check space before build') {
            steps {
                script {
                    util.spaceLeft()
                }
            }
        }
        stage('Build projects') {
            tools {
                jdk build_jdk_tool
                maven build_maven_tool
            }
            steps {
                script {
                    if (isSonarCloudAnalysis()) {
                        env.BUILD_MVN_OPTS = "${env.BUILD_MVN_OPTS} -Prun-code-coverage"
                    }
                    def buildChainActionInfo = getBuildChainActionInfo(is_native, is_lts, build_chain_additional_arguments)

                    configFileProvider([configFile(fileId: settingsXmlId, variable: 'MAVEN_SETTINGS_FILE')]) {
                        withCredentials([string(credentialsId: 'kie-ci1-token', variable: 'GITHUB_TOKEN')]) {
                            sh "build-chain-action -token=${GITHUB_TOKEN} -df='https://raw.githubusercontent.com/\${GROUP}/kogito-pipelines/main/.ci/${buildChainActionInfo.file}' -folder='bc' build ${buildChainActionInfo.action} -url=${env.ghprbPullLink} ${buildChainActionInfo.arguments} --skipParallelCheckout -cct '(^mvn .*)||\$1 -s ${MAVEN_SETTINGS_FILE} -Dmaven.wagon.http.ssl.insecure=true'"
                        }
                    }
                }
            }
        }
        stage('Sonar analysis') {
            tools {
                jdk build_jdk_tool
                maven build_maven_tool
            }
            steps {
                script {
                    if (isSonarCloudAnalysis()) {
                        def project = util.getProjectTriggeringJob()[1]
                        dir("bc/kiegroup_${project.replaceAll('-', '_')}") {
                            maven.runMavenWithSettingsSonar(settingsXmlId, '-nsu generate-resources -Psonarcloud-analysis -Denforcer.skip=true', 'SONARCLOUD_TOKEN', 'sonar_analysis.maven.log')
                        }
                    } else {
                        println '[INFO] No sonar analysis execution.'
                    }
                }
            }
        }
        stage('check space after build') {
            steps {
                script {
                    util.spaceLeft()
                }
            }
        }
    }
    post {
        always {
            sh '$WORKSPACE/trace.sh'
            junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'
        }
        failure {
            script {
                mailer.sendEmail_failedPR()
            }
        }
        unstable {
            script {
                mailer.sendEmail_unstablePR()
            }
        }
        fixed {
            script {
                mailer.sendEmail_fixedPR()
            }
        }
        cleanup {
            script {
                // Clean also docker in case of usage of testcontainers lib
                util.cleanNode('docker')
            }
        }
    }
}

def isPR() {
    return pr_type == 'pr'
}

def isFDB() {
    return pr_type == 'fdb'
}

def isSingle() {
    return pr_type == 'single'
}

def getBuildChainActionInfo(Boolean isNative, Boolean isLts, String defaultArguments) {
    def definitionFile = isNative ? 'pull-request-native-config.yaml' :
                         isLts ? 'pull-request-lts-config.yaml' :
                         'pull-request-config.yaml'
    return isFDB() ? [action: 'fd', file: definitionFile, arguments: defaultArguments] :
                     isSingle() ? [action: 'single', file: definitionFile, arguments: defaultArguments] :
                     [action: 'pr', file: definitionFile, arguments: defaultArguments]
}

boolean isDefaultCheck() {
    return !isNative && !isLts
}

boolean isSonarCloudAnalysis() {
    if (isPR()) {
        def project = util.getProjectTriggeringJob()[1]
        return isDefaultCheck() && env.BUILDCHAIN_PROJECT && env.BUILDCHAIN_PROJECT == project
    }
    return false
}
