import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

OPTAPLANNER_DEPLOY = 'optaplanner-deploy'
APPS_DEPLOY = 'kogito-apps-deploy'
EXAMPLES_DEPLOY = 'kogito-examples-deploy'

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    parameters {
        string(name: 'KOGITO_VERSION', defaultValue: '', description: 'Kogito version to be set as Major.minor.micro')
        string(name: 'OPTAPLANNER_VERSION', defaultValue: '', description: 'Optaplanner version of OptaPlanner as Major.minor.micro')

        string(name: 'ARTIFACTS_REPOSITORY', defaultValue: '', description: 'Override default. Provide a staging repository for artifacts to be deployed to')
        string(name: 'MAVEN_SETTINGS_CONFIG_FILE_ID', defaultValue: 'kogito_release_settings', description: 'Maven settings file to use for Maven config/deployment')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')

        // Credentials
        GIT_AUTHOR = 'kiegroup'
        BOT_AUTHOR = 'bsig-gh-bot'
        BOT_AUTHOR_CREDS_ID = 'bsig-gh-bot' // username/password creds
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    currentBuild.displayName = getDisplayName()

                    assert getKogitoVersion()
                    assert getOptaPlannerVersion()

                    sendNotification("Updating master with those version:\nKogito version: ${getKogitoVersion()}\nOptaplanner version: ${getOptaplannerVersion()}=> ${env.BUILD_URL}")

                    // Safety measure to not publish to main JBoss
                    if (getGitAuthor() != 'kiegroup' && !getArtifactsRepositoryParam()) {
                        sendNotification("Git Author is different from `kiegroup` and no `ARTIFACTS_REPOSITORY` parameter has been provided. Are you sure you want to continue ? => ${env.BUILD_URL}input")
                        input message: 'Should the pipeline continue with no `ARTIFACTS_REPOSITORY` defined ?', ok: 'Yes'
                    }
                }
            }
        }

        stage('Update OptaPlanner') {
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams(getOptaPlannerVersion())
                    addStringParam(buildParams, 'KOGITO_VERSION', getKogitoVersion())
                    addMavenSettingsParam(buildParams)
                    addGitBotParams(buildParams)
                    addArtifactsRepositoriesParam(buildParams)

                    buildJob(OPTAPLANNER_DEPLOY, buildParams)
                }
            }
        }

        stage('Update Kogito Apps') {
            when {
                expression { return !isCreateReleaseBranchesOnly() && isArtifactsDeploy() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams()
                    addStringParam(buildParams, 'OPTAPLANNER_VERSION', getOptaPlannerVersion())
                    addMavenSettingsParam(buildParams)
                    addGitBotParams(buildParams)
                    addArtifactsRepositoriesParam(buildParams)

                    buildJob(APPS_DEPLOY, buildParams)
                }
            }
        }

        stage('Update Kogito Examples') {
            when {
                expression { return !isCreateReleaseBranchesOnly() && isArtifactsDeploy() }
            }
            steps {
                script {
                    sendStageNotification()

                    def buildParams = getDefaultBuildParams()
                    addStringParam(buildParams, 'OPTAPLANNER_VERSION', getOptaPlannerVersion())
                    addMavenSettingsParam(buildParams)
                    addGitBotParams(buildParams)
                    addArtifactsRepositoriesParam(buildParams)

                    buildJob(EXAMPLES_DEPLOY, buildParams)
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            script {
                sendSuccessfulReleaseNotification()
            }
        }
        unsuccessful {
            sendErrorNotification()
        }
    }
}

def buildJob(String jobName, List buildParams) {
    echo "Build ${jobName} with params ${buildParams}"

    def job = build(job: "./${jobName}", wait: true, parameters: buildParams, propagate: false)
    def jobResult = job.getResult()
    def jobUrl = job.getAbsoluteUrl()
    if (jobResult != 'SUCCESS') {
        echo "Sending a notification about an unsuccessful job build ${jobName}."
        sendNotification("`${jobName}` finished with status `${jobResult}`.\nSee: ${jobUrl}\n\nPlease provide which action should be done (retry ? continue ? skip ? abort ?): ${env.BUILD_URL}input")

        // abort is handled automatically by the pipeline in the input
        def result = input message: "Job `${jobName}` is in status ${jobResult}. What do you want to do ?\nBeware that skipping a deploy job will not launch the promote part.", parameters: [choice(name: 'ACTION', choices: ['retry', 'continue', 'skip'].join('\n')), string(name: 'MESSAGE', description: 'If you want to add information to your action...')]
        String resultStr = "`${jobName}` failure => Decision was made to ${result['ACTION']}."
        if (result['MESSAGE'] != '') {
            resultStr += "Additional Information: `${result['MESSAGE']}`"
        }
        echo resultStr
        sendNotification(resultStr)

        // If skip, do not do anything (no registration)
        if (result['ACTION'] == 'retry') {
            return buildJob(jobName, buildParams)
        } else if (result['ACTION'] == 'continue') {
            registerJob(jobName, job)
        }
    } else {
        // Succeeded
        registerJob(jobName, job)
    }

    return job
}

def registerJob(String jobName, def job) {
    JOBS[jobName] = job
}

def getJob(String jobName) {
    return JOBS[jobName]
}

String getJobUrl(String jobName) {
    echo "getJobUrl for ${jobName}"
    def job = getJob(jobName)
    return job ? job.getAbsoluteUrl() : ''
}

void sendSuccessfulReleaseNotification() {
    String bodyMsg = 'Release is successful with those jobs:\n'
    JOBS.each {
        bodyMsg += "- ${it.key}\n"
    }
    bodyMsg += "\nPlease look here: ${BUILD_URL} for more information"
    sendNotification(bodyMsg)
}

void sendErrorNotification() {
    sendNotification("Kogito release job #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}")
}

void sendStageNotification() {
    sendNotification("${env.STAGE_NAME}")
}

void sendNotification(String body) {
    echo 'Send Notification'
    echo body
    emailext body: body, subject: "[${getReleaseBranch()}] Release Pipeline",
                to: env.KOGITO_CI_EMAIL_TO
}

def readDeployProperties(String buildUrl) {
    def deployProperties = [:]
    if (buildUrl != '') {
        if (!buildUrl.endsWith('/')) {
            buildUrl += '/'
        }
        sh "wget ${buildUrl}artifact/deployment.properties -O deployment.properties"
        deployProperties = readProperties file: 'deployment.properties'
        echo deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
    return deployProperties
}

List getDefaultBuildParams(String version = '') {
    version = version ?: getKogitoVersion()

    List buildParams = []
    addStringParam(buildParams, 'DISPLAY_NAME', getDisplayName(version))
    addStringParam(buildParams, 'BUILD_BRANCH_NAME', 'master')
    addStringParam(buildParams, 'GIT_AUTHOR', getGitAuthor())
    addBooleanParam(buildParams, 'CREATE_PR', true)
    addStringParam(buildParams, 'PROJECT_VERSION', version)
    addBooleanParam(buildParams, 'SKIP_TESTS', true)
    return buildParams
}

void addMavenSettingsParam(buildParams) {
    addStringParam(buildParams, 'MAVEN_SETTINGS_CONFIG_FILE_ID', params.MAVEN_SETTINGS_CONFIG_FILE_ID)
}

void addArtifactsRepositoriesParam(buildParams) {
    addStringParam(buildParams, 'MAVEN_DEPENDENCIES_REPOSITORY', getArtifactsRepositoryParam())
    addStringParam(buildParams, 'MAVEN_DEPLOY_REPOSITORY', getArtifactsRepositoryParam())
}

void addGitBotParams(buildParams) {
    addStringParam(buildParams, 'GIT_AUTHOR_BOT', env.BOT_AUTHOR)
    addStringParam(buildParams, 'BOT_CREDENTIALS_ID', env.BOT_AUTHOR_CREDS_ID)
}

void addStringParam(List params, String key, String value) {
    params.add(string(name: key, value: value))
}

void addBooleanParam(List params, String key, boolean value) {
    params.add(booleanParam(name: key, value: value))
}
String getDisplayName(branch = '') {
    branch = branch ?: getReleaseBranch()
    if (isCreateReleaseBranchesOnly()) {
        return "Cut-off ${branch}"
    }
    return "Release ${branch}"
}

String getKogitoVersion() {
    return params.KOGITO_VERSION
}

String getOptaPlannerVersion() {
    return params.OPTAPLANNER_VERSION
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getArtifactsRepositoryParam() {
    return params.ARTIFACTS_REPOSITORY
}
