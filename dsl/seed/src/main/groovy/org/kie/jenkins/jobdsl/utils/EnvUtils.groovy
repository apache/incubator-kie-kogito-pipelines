package org.kie.jenkins.jobdsl.utils

import org.kie.jenkins.jobdsl.Utils

class EnvUtils {

    static List<String> getAllEnvironments(def script) {
        PrintUtils.debug(script, "getAllEnvironments => ${Utils.getBindingValue(script, 'ENVIRONMENTS')}")
        return Utils.getBindingValue(script, 'ENVIRONMENTS').split(',')
    }

    static boolean isEnvironmentEnabled(def script, String envName) {
        def value = getEnvironmentValue(script, envName, 'ENABLED')
        PrintUtils.debug(script, "isEnvironmentEnabled ${envName} => ${value != '' ? value.toBoolean() : true}")
        return value != '' ? value.toBoolean() : true
    }

    static boolean isEnvironmentAutoGenerated(def script, String envName) {
        def value = getEnvironmentValue(script, envName, 'AUTO_GENERATION')
        PrintUtils.debug(script, "isEnvironmentAutoGenerated ${envName} => ${value != '' ? value.toBoolean() : true}")
        return value != '' ? value.toBoolean() : true
    }

    static List<String> getAllEnabledEnvironments(def script) {
        List<String> environments = getAllEnvironments(script)
        List<String> enabledEnvironments = []
        for (String envName : environments) {
            if (isEnvironmentEnabled(script, envName)) {
                enabledEnvironments += envName
            }
        }
        PrintUtils.debug(script, "getAllEnabledEnvironments => ${enabledEnvironments}")
        return enabledEnvironments
    }

    static List<String> getAllEnabledEnvironmentsForIds(def script, List<String> includeEnvironmentIds, List<String> excludeEnvironmentIds) {
        List<String> environments = getAllEnabledEnvironments(script)
        List<String> filteredEnvironments = []
        for (String envName : environments) {
            if (hasEnvironmentIds(script, envName, includeEnvironmentIds) &&
                !hasEnvironmentIds(script, envName, excludeEnvironmentIds)) {
                filteredEnvironments += envName
            }
        }
        PrintUtils.debug(script, "getAllEnabledEnvironmentsForIds, include='${includeEnvironmentIds}', exclude='${excludeEnvironmentIds}' => ${filteredEnvironments}")
        return filteredEnvironments
    }

    static List<String> getAllAutoGeneratedEnvironments(def script) {
        List<String> environments = getAllEnabledEnvironments(script).findAll { isEnvironmentAutoGenerated(script, it) }
        PrintUtils.debug(script, "getAllAutoGeneratedEnvironments => ${environments}")
        return environments
    }

    static Map getEnvironmentEnvVars(def script, String envName) {
        String keyPrefix = "${createEnvironmentsKeyPrefix(envName)}ENV_VARS_"
        PrintUtils.debug(script, "Looking for env vars for env ${envName}. Key prefix is ${keyPrefix}")
        Map envVars = [:]
        for (String key : script.getBinding().getVariables().keySet()) {
            if (key.startsWith(keyPrefix)) {
                String envKey = key.replace(keyPrefix, '')
                String envValue = Utils.getBindingValue(script, key)
                envVars.put(envKey, envValue)
            }
        }
        PrintUtils.debug(script, "Got env vars = ${envVars}")
        return envVars
    }

    static List<String> getEnvironmentIds(def script, String envName) {
        return Utils.getBindingValue(script, "${createEnvironmentsKeyPrefix(envName)}IDS").split(',')
    }

    static boolean hasEnvironmentId(def script, String envName, String id) {
        return getEnvironmentIds(script, envName).contains(id)
    }

    static boolean hasEnvironmentIds(def script, String envName, List<String> ids) {
        for (String id : ids) {
            if (!hasEnvironmentId(script, envName, id)) {
                return false
            }
        }
        return true
    }


    private static def getEnvironmentValue(def script, String envName, String envKey) {
        String key = "${createEnvironmentsKeyPrefix(envName)}${envKey}"
        def value = Utils.getBindingValue(script, key)
        PrintUtils.debug(script, "getEnvironmentValue key => ${key} = ${value}")
        return value
    }

    private static String createEnvironmentsKeyPrefix(String envName) {
        return "ENVIRONMENTS_${envName.toUpperCase()}_"
    }

}
