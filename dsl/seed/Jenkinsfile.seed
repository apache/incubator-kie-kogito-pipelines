import groovy.json.JsonOutput
import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

seedConfig = [:]
seedEnvProperties = [:]

// Map<branch, Map<repo, config>>
branchConfigs = [:]

PIPELINES_REPO = 'kogito-pipelines'

// Configuration of the pipeline is done via the `config.yaml` file
pipeline {
    agent {
        label 'kie-rhel7 && kie-mem4g'
    }

    tools {
        jdk 'kie-jdk1.8'
    }

    // parameters {
    // See ./jobs/seed_job.groovy
    // }

    environment {
        REPOSITORY_DSL_FOLDER = '.jenkins/dsl'

        SEED_FOLDER = 'seed'
        DSL_SEED_FOLDER = "${WORKSPACE}/dsl/${SEED_FOLDER}"
        DSL_BRANCH_CONFIG_FILE = 'dsl/branch_config.yaml'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    checkout scm

                    if (isDebug()) {
                        println '[DEBUG] Yaml config used:'
                        sh "cat ${DSL_SEED_FOLDER}/config.yaml"
                    }
                    seedConfig = readYaml(file: "${DSL_SEED_FOLDER}/config.yaml")

                    branchConfigs = seedConfig.git.branches.collectEntries { [it, [:]] }
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    iterateReposForEachBranch('Checkout repositories') { seedBranch, branchConfig ->
                        deleteDir()

                        // Get pipelines and get dependent repositories from there
                        dir(PIPELINES_REPO) {
                            deleteDir()
                            String author = seedConfig.git.author.name
                            println "[INFO] Checkout repository ${author}/${PIPELINES_REPO} on branch ${seedBranch}"
                            checkout(githubscm.resolveRepository(PIPELINES_REPO, author, seedBranch, false))
                            try {
                                Map branchDslConfig = readYaml file: "${DSL_BRANCH_CONFIG_FILE}"
                                branchDslConfig['dependent_repositories'].each { repoConfig ->
                                    branchConfig.put(repoConfig.name, createBranchRepoConfig(seedBranch, repoConfig))
                                }
                                println "[INFO] Branch ${seedBranch} => Dependent repositories are ${branchConfig.keySet()}"
                            } catch (err) {
                                println "[ERROR] Cannot get repositories on branch ${seedBranch} => ${err}"
                            }
                        }

                        branchConfig.each { repoName, repoConfig ->
                            dir(repoName) {
                                deleteDir()
                                try {
                                    String branch = repoConfig.git.branch
                                    String author = repoConfig.git.author.name
                                    println "[INFO] Checkout repository ${author}/${repoName} on branch ${branch}"
                                    checkout(githubscm.resolveRepository(repoName, author, branch, false))
                                } catch (err) {
                                    println "[ERROR] Cannot Checkout repository ${author}/${repoName} on branch ${branch}"
                                    println "[ERROR] ${err}"
                                }
                            }
                        }

                        // After checkout add pipelines repo to the list of repo to test/generate
                        branchConfig.put(PIPELINES_REPO, createBranchRepoConfig(seedBranch, [ name : PIPELINES_REPO]))
                    }
                }
            }
        }

        stage('Print config') {
            when {
                expression { return isDebug() }
            }
            steps {
                script {
                    iterateReposForEachBranchAndEachRepo('Print config') { seedBranch, repoName, repoConfig ->
                        Map envConfig = getRepositoryEnvProperties(seedBranch, repoConfig)
                        println "[DEBUG] Configuration for branch ${seedBranch} and repo ${repoName}"
                        envConfig.each {
                            println "[DEBUG] ${it.key} = ${it.value}"
                        }
                    }
                }
            }
        }

        stage('Prepare jobs') {
            steps {
                script {
                    iterateReposForEachBranch('Copy seed folder') { seedBranch, branchConfig ->
                        // Copy seed
                        sh "cp -r ${DSL_SEED_FOLDER} ${getKeyBranchFolder(seedBranch)}"
                    }

                    iterateReposForEachBranchAndEachRepo('Copy jobs file') { seedBranch, repoName, repoConfig ->
                        dir("${REPOSITORY_DSL_FOLDER}") {
                            sh "mkdir -p ${getSeedFolder(seedBranch)}/jobs/${repoName}/"
                            if (fileExists("jobs.groovy")) {
                                sh "cp jobs.groovy ${getSeedFolder(seedBranch)}/jobs/${repoName}/"
                            }
                        }
                    }
                }
            }
        }

        stage('Test jobs') {
            steps {
                script {
                    boolean testErrors = false
                    iterateReposForEachBranch('Test jobs') { seedBranch, branchConfig ->
                        dir(getSeedFolder(seedBranch)) {
                            try {
                                sh './gradlew clean test'
                            } catch (err) {
                                println "[ERROR] Tests failed for branch ${seedBranch}"
                                testErrors = true
                            } finally {
                                junit 'build/test-results/**/*.xml'
                            }
                        }
                    }
                    if (testErrors) {
                        error 'Error while testing. See logs and artifacts...'
                    }
                }
            }
        }

        stage('Generate jobs') {
            steps {
                script {
                    iterateReposForEachBranchAndEachRepo('Generate jobs') { seedBranch, repoName, repoConfig ->
                        dir(getSeedFolder(seedBranch)) {
                            Map envConfig = getRepositoryEnvProperties(seedBranch, repoConfig)

                            String jobsFile = "jobs/${repoName}/jobs.groovy"
                            if (fileExists(jobsFile)) {
                                println "[INFO] Generate jobs for branch ${seedBranch} and repo ${repoName}."
                                jobDsl targets: jobsFile,
                                    sandbox: false,
                                    ignoreExisting: false,
                                    ignoreMissingFiles: false,
                                    removedJobAction: 'IGNORE',
                                    removedViewAction: 'DELETE',
                                    //removedConfigFilesAction: 'IGNORE',
                                    lookupStrategy: 'SEED_JOB',
                                    additionalClasspath: 'src/main/groovy',
                                    additionalParameters : envConfig
                            } else {
                                println "[WARN] No jobs file found for branch ${seedBranch} and repo ${repoName}."
                            }
                        }
                    }

                    // Generate seed job
                    dir("${DSL_SEED_FOLDER}") {
                        println '[INFO] Generate seed job'
                        jobDsl targets: 'jobs/seed_job.groovy',
                                sandbox: false,
                                ignoreExisting: false,
                                ignoreMissingFiles: false,
                                removedJobAction: 'DELETE',
                                removedViewAction: 'DELETE',
                                //removedConfigFilesAction: 'IGNORE',
                                lookupStrategy: 'SEED_JOB'
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

void iterateReposForEachBranch(String description, Closure iteration) {
    if (isDebug()) {
        println "[DEBUG] Iterate on branches ${branchConfigs.keySet()}"
    }
    branchConfigs.each { seedBranch, branchConfig ->
        println "[INFO] ${description} for branch ${seedBranch}"
        dir(seedBranch) {
            iteration(seedBranch, branchConfig)
        }
    }
}

void iterateReposForEachBranchAndEachRepo(String description, Closure iteration) {
    iterateReposForEachBranch(description) { seedBranch, branchConfig ->
        if (isDebug()) {
            println "[DEBUG] Iterate on repos ${branchConfig.keySet()}"
        }
        branchConfig.each { repoName, repoConfig ->
            println "[INFO] ${description} for repository ${repoName} on branch ${seedBranch}"
            dir(repoName) {
                iteration(seedBranch, repoName, repoConfig)
            }
        }
    }
}

String getKeyBranchFolder(String seedBranch) {
    return "${WORKSPACE}/${seedBranch}"
}

String getSeedFolder(String seedBranch) {
    return "${getKeyBranchFolder(seedBranch)}/${SEED_FOLDER}"
}

def createBranchRepoConfig(String seedBranch, def repoConfig) {
    def cfg = getRepoBasicConfig(seedBranch, repoConfig.name)
    cfg.git.branch = repoConfig.branch ?: cfg.git.branch
    if (repoConfig.author) {
        cfg.git.author.name = repoConfig.author.name ?: cfg.git.author.name
        cfg.git.author.credentials_id = repoConfig.author.credentials_id ?: cfg.git.author.credentials_id
        cfg.git.author.token_credentials_id = repoConfig.author.credentials_id ?: cfg.git.author.token_credentials_id
    }
    if (repoConfig.bot_author) {
        cfg.git.bot_author.name = repoConfig.bot_author.name ?: cfg.git.bot_author.name
        cfg.git.bot_author.credentials_id = repoConfig.bot_author.credentials_id ?: cfg.git.bot_author.credentials_id
    }
    return cfg
}

def getRepoBasicConfig(String seedBranch, String repoName) {
    Map yamlConfig = deepCopyObject(seedConfig)

    // Remove multibranch config
    yamlConfig.git.remove('branches')
    yamlConfig.git.remove('main_branch')

    // Setup specific branch/repo default config
    yamlConfig.put('job_branch_folder', seedBranch)
    yamlConfig.git.put('branch', seedBranch)
    yamlConfig.git.put('main_branch', seedConfig.git.main_branch[repoName] ?: seedConfig.git.main_branch.default)
    return yamlConfig
}

def deepCopyObject(def originalMap) {
    return readJSON(text: JsonOutput.toJson(originalMap))
}

def getRepositoryEnvProperties(String seedBranch, def repoConfig) {
    Map envProperties = [:]
    fillEnvProperties(envProperties, '', repoConfig)
    return envProperties
}

void fillEnvProperties(Map envProperties, String envKeyPrefix, Map propsMap) {
    propsMap.each { key, value ->
        String newKey = generateEnvKey(envKeyPrefix, key)
        if (value instanceof Map) {
            fillEnvProperties(envProperties, newKey, value as Map)
        } else if (value instanceof List) {
            envProperties[newKey] = (value as List).join(',')
        } else {
            envProperties[newKey] = value
        }
    }
}

String generateEnvKey(String envKeyPrefix, String key) {
    return (envKeyPrefix ? "${envKeyPrefix}_${key}" : key).toUpperCase()
}

void addFileIfExists(List files, String filePath) {
    if (fileExists(filePath)) {
        files.add(filePath)
    }
}

boolean isDebug() {
    return params.DEBUG
}