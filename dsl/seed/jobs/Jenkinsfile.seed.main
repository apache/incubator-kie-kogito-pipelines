/////////////////////////////////////////////////////////////////////////////////
// This Jenkinsfile generate the respective Branch seed jobs
/////////////////////////////////////////////////////////////////////////////////

import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

util = null

shouldRun = false
LISTEN_TO_MODIFIED_PATHS = [
    'dsl/seed/config/main.yaml',
    'dsl/seed/jobs/seed_job_main.groovy',
    'dsl/seed/jobs/Jenkinsfile.seed.main',
]

// Configuration of the pipeline is done via the `config/main.yaml` file
pipeline {
    agent none

    options {
        timestamps()
    }

    // parameters {
    // See ./jobs/seed_job.groovy
    // }

    stages {
        stage('Preliminary check') {
            agent any
            steps {
                script {
                    checkout scm
                    util = load 'dsl/seed/jobs/scripts/util.groovy'

                    shouldRun = params.FORCE_REBUILD ?: util.arePathsModified(LISTEN_TO_MODIFIED_PATHS)
                    if (!shouldRun) {
                        echo "No force rebuild or modified paths ${LISTEN_TO_MODIFIED_PATHS}"
                        echo 'Nothing done'
                        currentBuild.displayName = 'No generation'
                    }
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
        stage('Launch generation') {
            when {
                expression { return shouldRun }
            }
            stages {
                stage('Generate jobs') {
                    agent {
                        label 'kie-rhel7 && kie-mem8g'
                    }
                    tools {
                        jdk 'kie-jdk1.8'
                    }
                    stages {
                        stage('Initialize') {
                            steps {
                                script {
                                    checkout scm
                                    util = load 'dsl/seed/jobs/scripts/util.groovy'

                                    def seedConfig = readSeedConfig()

                                    currentBuild.displayName = getCustomBranchKey() ?: 'Global build'
                                    currentBuild.description = seedConfig.git.branches.join(',')
                                }
                            }
                        }

                        stage('Generate branch seed jobs') {
                            steps {
                                script {
                                    def seedConfig = readSeedConfig()
                                    seedConfig.git.branches.each { branch ->
                                        dir(util.getDslSeedFolderAbsolutePath()) {
                                            println "[INFO] Generate branch seed job for branch ${branch}"
                                            jobDsl(targets: 'jobs/seed_job_branch.groovy',
                                                    sandbox: false,
                                                    ignoreExisting: false,
                                                    ignoreMissingFiles: false,
                                                    removedJobAction: 'IGNORE',
                                                    removedViewAction: 'IGNORE',
                                                    //removedConfigFilesAction: 'IGNORE',
                                                    lookupStrategy: 'SEED_JOB',
                                                    additionalClasspath: 'src/main/groovy',
                                                    additionalParameters : [
                                                        JOB_NAME: getBranchSeedJobName(branch),
                                                        GENERATION_BRANCH: branch,
                                                        MAIN_BRANCHES: writeJSON(json: seedConfig.git.main_branch, returnText: true),
                                                        CUSTOM_REPOSITORIES: "${CUSTOM_REPOSITORIES}",
                                                        CUSTOM_AUTHOR: "${CUSTOM_AUTHOR}",
                                                        SEED_AUTHOR: "${SEED_AUTHOR}",
                                                        SEED_BRANCH: getEffectiveSeedBranch(branch),
                                                    ],
                                            )
                                        }
                                    }
                                }
                            }
                        }

                        stage('Generate main seed job') {
                            steps {
                                script {
                                    dir(util.getDslSeedFolderAbsolutePath()) {
                                        println '[INFO] Generate main seed job'
                                        jobDsl(targets: 'jobs/seed_job_main.groovy',
                                                sandbox: false,
                                                ignoreExisting: false,
                                                ignoreMissingFiles: false,
                                                removedJobAction: 'DELETE',
                                                removedViewAction: 'DELETE',
                                                //removedConfigFilesAction: 'IGNORE',
                                                lookupStrategy: 'SEED_JOB',
                                                additionalParameters : [
                                                    SEED_AUTHOR: "${SEED_AUTHOR}",
                                                    SEED_BRANCH: "${SEED_BRANCH}",
                                                ],
                                        )
                                    }
                                }
                            }
                        }

                        stage('Launch branch seed jobs') {
                            steps {
                                script {
                                    Map parallelJobs = [:]
                                    readSeedConfig().git.branches.each { branch ->
                                        parallelJobs.put(branch, { launchBranchSeedJob(branch) })
                                    }

                                    parallel parallelJobs
                                }
                            }
                        }
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
            }
        }
    }
}

String getBranchSeedJobName(String branch) {
    return "z-seed-job"
}

void launchBranchSeedJob(String branch) {
    println "[INFO] Launch branch seed job for branch ${branch}"

    List jobParams = []
    jobParams.add(booleanParam(name: 'DEBUG', value: params.DEBUG))
    jobParams.add(stringParam(name: 'CUSTOM_REPOSITORIES', value: params.CUSTOM_REPOSITORIES))
    jobParams.add(stringParam(name: 'CUSTOM_AUTHOR', value: params.CUSTOM_AUTHOR))
    jobParams.add(stringParam(name: 'SEED_AUTHOR', value: params.SEED_AUTHOR))
    jobParams.add(stringParam(name: 'SEED_BRANCH', value: getEffectiveSeedBranch(branch)))
    jobParams.add(booleanParam(name: 'FORCE_REBUILD', value: true))

    echo "Build ./${branch}/${getBranchSeedJobName(branch)} with parameters ${jobParams}"
    build(job: "./${branch}/${getBranchSeedJobName(branch)}", parameters: jobParams, wait: false)
}

String getEffectiveSeedBranch(String branch) {
    def repo = githubscm.getRepositoryScm('kogito-pipelines', "${SEED_AUTHOR}", branch)
    return repo ? branch : "${SEED_BRANCH}"
}

def readSeedConfig(String seedRepoPath = '') {
    def seedConfig = [:]
    if (getCustomBranchKey()) {
        assert params.CUSTOM_REPOSITORIES
        seedConfig = [
            git : [
                branches: [ getCustomBranchKey() ],
                main_branch : [ 'default' : getCustomMainBranch() ]
            ]
        ]
    } else {
        seedConfig = readYaml(file: util.getSeedConfigFilePath(seedRepoPath))
    }
    return seedConfig
}

String getCustomBranchKey() {
    return params.CUSTOM_BRANCH_KEY
}

String getCustomMainBranch() {
    return params.CUSTOM_MAIN_BRANCH
}
