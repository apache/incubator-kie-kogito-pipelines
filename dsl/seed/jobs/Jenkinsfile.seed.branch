/////////////////////////////////////////////////////////////////////////////////////
// This Jenkinsfile generate the respective repository seed jobs based on configured branch
/////////////////////////////////////////////////////////////////////////////////////

import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

util = null
all_repos = []

TRIGGER_REPOSITORY_JOB_DSL_SCRIPT = '''
import org.kie.jenkins.jobdsl.SeedJobUtils

// +++++++++++++++++++++++++++++++++++++++++++ create a seed job ++++++++++++++++++++++++++++++++++++++++++++++++++++

SeedJobUtils.createSeedJobTrigger(
    this,
    "z-seed-trigger-${REPO_NAME}-job",
    "${REPO_NAME}",
    "${GIT_AUTHOR}",
    "${GIT_BRANCH}",
    [ "${GIT_JENKINS_CONFIG_PATH}" ],
    "${JOB_NAME}")
'''

pipeline {
    agent {
        label 'kie-rhel8 && !master'
    }

    tools {
        jdk 'kie-jdk1.8'
    }

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    // parameters {
    // See ./seed_job_branch.groovy
    // }

    environment {
        SEED_FOLDER = 'dsl/seed'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    checkout scm

                    util = load 'dsl/seed/jobs/scripts/util.groovy'

                    all_repos = util.readBranchConfig().repositories.collect { it.name }
                }
            }
        }

        stage('Prepare jobs') {
            steps {
                script {
                    all_repos.each { repository ->
                        println "[INFO] Prepare jobs for repository ${repository}"
                        def repoConfig = getRepoConfig(repository)
                        dir("repos/${repository}") {
                            checkout(githubscm.resolveRepository(repository, repoConfig.git.author.name, repoConfig.git.branch, false))
                            String jobsFilePath = "${repoConfig.git.jenkins_config_path}/dsl/jobs.groovy"
                            echo "Copying DSL jobs file ${jobsFilePath}"
                            sh "cp ${jobsFilePath} ${WORKSPACE}/${SEED_FOLDER}/jobs/${normalizeRepositoryJobsFile(repository)}"
                        }
                    }
                }
            }
        }

        stage('Test jobs') {
            steps {
                script {
                    if (!params.SKIP_TESTS) {
                        dir("${SEED_FOLDER}") {
                            try {
                                sh './gradlew clean test'
                            } finally {
                                junit 'build/test-results/**/*.xml'
                                archiveArtifacts 'build/reports/**'
                            }
                        }
                    } else {
                        echo 'Tests are skipped'
                    }
                }
            }
        }

        stage('Generate jobs') {
            steps {
                script {
                    all_repos.each { repository ->
                        def envProps = getRepoConfigAsEnvProperties(repository)
                        envProps += [
                            GIT_MAIN_BRANCH: getMainBranch(repository),
                            REPO_NAME: "${repository}"
                        ]
                        // Add other repos `jenkins_config_path` var (useful if multijob PR checks for example)
                        envProps += all_repos.collectEntries {
                            [ (util.generateEnvKey(it, 'jenkins_config_path')): getRepoConfig(it).git.jenkins_config_path]
                        }

                        println "[INFO] Generate jobs for branch ${GENERATION_BRANCH} and repo ${repository}"
                        println "[INFO] Additional parameters: ${envProps}"
                        dir("${SEED_FOLDER}") {
                            jobDsl targets: "jobs/${normalizeRepositoryJobsFile(repository)}",
                                sandbox: false,
                                ignoreExisting: false,
                                ignoreMissingFiles: false,
                                removedJobAction: 'IGNORE',
                                removedViewAction: 'IGNORE',
                                lookupStrategy: 'SEED_JOB',
                                additionalClasspath: 'src/main/groovy',
                                additionalParameters : envProps
                        }
                    }
                }
            }
        }

        stage('Generate trigger jobs') {
            steps {
                script {
                    List repos = all_repos
                    int size = repos.size()
                    repos.eachWithIndex { repository, index ->
                        def repoConfig = getRepoConfig(repository)
                        def envProps = [
                            REPO_NAME: repository,
                            GIT_BRANCH: repoConfig.git.branch,
                            GIT_AUTHOR: repoConfig.git.author.name,
                            GIT_JENKINS_CONFIG_PATH: repoConfig.git.jenkins_config_path,
                            JOB_NAME: "${JOB_NAME}"
                        ]

                        println "[INFO] Generate trigger jobs for branch ${GENERATION_BRANCH} and repo ${repository}"
                        println "[INFO] Additional parameters: ${envProps}"
                        dir("${SEED_FOLDER}") {
                            jobDsl scriptText: TRIGGER_REPOSITORY_JOB_DSL_SCRIPT,
                                sandbox: false,
                                ignoreExisting: false,
                                ignoreMissingFiles: false,
                                removedJobAction: index >= size - 1 ? 'DELETE' : 'IGNORE',
                                removedViewAction: index >= size - 1 ? 'DELETE' : 'IGNORE',
                                lookupStrategy: 'SEED_JOB',
                                additionalClasspath: 'src/main/groovy',
                                additionalParameters : envProps
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

String normalizeRepositoryJobsFile(String repository) {
    return "${repository.replaceAll('-', '')}_jobs.groovy"
}

boolean getMainBranch(String repository) {
    return util.getMainBranch(readJSON(text: "${MAIN_BRANCHES}"), repository)
}

def getRepoConfig(String repoName) {
    def cfg = util.getRepoConfig(repoName, "${GENERATION_BRANCH}")

    if (util.isDebug()) {
        println '[DEBUG] Modified repo config:'
        println "[DEBUG] ${cfg}"
    }

    return cfg
}

def getRepoConfigAsEnvProperties(String repoName) {
    return util.convertConfigToEnvProperties(getRepoConfig(repoName))
}
