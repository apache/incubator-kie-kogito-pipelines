apply plugin: 'groovy'

sourceSets {
    jobs {
        groovy {
            srcDirs 'jobs'
            compileClasspath += main.compileClasspath
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.jenkins-ci.org/public/'
    }
}

configurations {
    testPlugins {}
}

// Exclude buggy Xalan dependency this way the JRE default TransformerFactory is used
// The xalan pulled in by htmlunit does not properly deal with spaces folder / job names
configurations.all*.exclude group: 'xalan'
// Some bogus artifact which dissappeared from the remote repos. Not needed anyway.
configurations.all*.exclude group: 'org.netbeans.modules', module: 'org-netbeans-insane'

dependencies {
    implementation "org.codehaus.groovy:groovy-all:${version_groovy}"
    implementation "org.jenkins-ci.plugins:job-dsl:${version_jenkins_plugins_job_dsl}@jar"

    testImplementation "org.spockframework:spock-core:${version_spock}"
    testImplementation "cglib:cglib-nodep:${version_cglib_nodep}" // used by Spock

    testImplementation "org.yaml:snakeyaml:${version_snakeyaml}" // used by TestUtil

    // Jenkins test harness dependencies
    testImplementation "org.jenkins-ci.main:jenkins-war:${version_jenkins}"
    testImplementation "org.jenkins-ci.main:jenkins-test-harness:${version_jenkins_test_harness}"

    // Job DSL plugin including plugin dependencies
    testImplementation "org.jenkins-ci.plugins:job-dsl:${version_jenkins_plugins_job_dsl}"
    testImplementation "org.jenkins-ci.plugins:job-dsl:${version_jenkins_plugins_job_dsl}@jar"
    testImplementation "org.jenkins-ci.plugins:branch-api:${version_jenkins_plugins_branch_api}@jar"
    testImplementation "org.jenkins-ci.plugins:cloudbees-folder:${version_jenkins_plugins_cloudbees_folder}@jar"
    testImplementation "org.jenkins-ci.plugins:config-file-provider:${version_jenkins_plugins_config_file_provider}@jar"
    testImplementation "org.jenkins-ci.plugins:credentials:${version_jenkins_plugins_credentials}@jar"
    testImplementation "org.jenkins-ci.plugins:scm-api:${version_jenkins_plugins_scm_api}@jar"
    testImplementation "org.jenkins-ci.plugins:structs:${version_jenkins_plugins_structs}@jar"
    testImplementation "org.jenkins-ci.plugins.workflow:workflow-aggregator:${version_jenkins_plugins_workflow_aggregator}@jar"

// plugins to install in test instance (all plugins used by the DSL scripts needs to be specified)
    // keep the alphabetical order
    testPlugins "org.jenkins-ci.plugins.workflow:workflow-aggregator:${version_jenkins_plugins_workflow_aggregator}"
    testPlugins "org.jenkins-ci.plugins.workflow:workflow-step-api:${version_jenkins_plugins_workflow_step_api}"
    testPlugins "org.jenkins-ci.plugins:cloudbees-folder:${version_jenkins_plugins_cloudbees_folder}"
    testPlugins "com.coravy.hudson.plugins.github:github:${version_jenkins_plugins_github}"
    testPlugins "com.sonyericsson.hudson.plugins.rebuild:rebuild:${version_jenkins_plugins_rebuild}" 
    testPlugins "org.jenkins-ci.main:maven-plugin:${version_jenkins_plugins_maven_plugin}"
    testPlugins "org.jenkins-ci.plugins:ansicolor:${version_jenkins_plugins_ansicolor}"
    testPlugins "org.jenkins-ci.plugins:build-timeout:${version_jenkins_plugins_build_timeout}"
    testPlugins "org.jenkins-ci.plugins:config-file-provider:${version_jenkins_plugins_config_file_provider}"
    testPlugins "org.jenkins-ci.plugins:credentials:${version_jenkins_plugins_credentials}"
    testPlugins "org.jenkins-ci.plugins:description-setter:${version_jenkins_plugins_description_setter}"
    testPlugins "org.jenkins-ci.plugins:email-ext:${version_jenkins_plugins_email_ext}"
    testPlugins "org.jenkins-ci.plugins:envinject:${version_jenkins_plugins_envinject}"
    testPlugins "org.jenkins-ci.plugins:git:${version_jenkins_plugins_git}"
    testPlugins "org.jenkins-ci.plugins:ghprb:${version_jenkins_plugins_ghprb}"
    testPlugins "org.jenkins-ci.plugins:jms-messaging:${version_jenkins_plugins_jms_messaging}"
    testPlugins "org.jenkins-ci.plugins:junit:${version_jenkins_plugins_junit}"
    testPlugins "org.jenkins-ci.plugins:mask-passwords:${version_jenkins_plugins_mask_passwords}"
    testPlugins "org.jenkins-ci.plugins:matrix-project:${version_jenkins_plugins_matrix_project}"
    testPlugins "org.jenkins-ci.plugins:multiple-scms:${version_jenkins_plugins_multiple_scms}"
    testPlugins "org.jenkins-ci.plugins:parameterized-trigger:${version_jenkins_plugins_parameterized_trigger}"
    testPlugins "org.jenkins-ci.plugins:pipeline-build-step:${version_jenkins_plugins_pipeline_build_step}"
    testPlugins "org.jenkinsci.plugins:pipeline-model-declarative-agent:${version_jenkins_plugins_pipeline_model_declarative_agent}"
    testPlugins "org.jenkins-ci.plugins:pipeline-input-step:${version_jenkins_plugins_pipeline_input_step}"
    testPlugins "org.jenkins-ci.plugins:pipeline-maven:${version_jenkins_plugins_pipeline_maven}"
    testPlugins "org.jenkins-ci.plugins.pipeline-stage-view:pipeline-rest-api:${version_jenkins_plugins_pipeline_rest_api}"
    testPlugins "org.jenkins-ci.plugins:pipeline-stage-step:${version_jenkins_plugins_pipeline_stage_step}"
    testPlugins "org.jenkins-ci.plugins:pipeline-utility-steps:${version_jenkins_plugins_pipeline_utility_steps}"
    testPlugins "org.jenkins-ci.plugins:pipeline-graph-analysis:${version_jenkins_plugins_pipeline_graph_analysis}"
    testPlugins "org.jenkins-ci.plugins:pipeline-milestone-step:${version_jenkins_plugins_pipeline_milestone_step}"
    testPlugins "org.jenkinsci.plugins:pipeline-model-api:${version_jenkins_plugins_pipeline_model_api}"
    testPlugins "org.jenkinsci.plugins:pipeline-model-definition:${version_jenkins_plugins_pipeline_model_definition}"
    testPlugins "org.jenkinsci.plugins:pipeline-model-extensions:${version_jenkins_plugins_pipeline_model_extensions}"
    testPlugins "org.jenkins-ci.plugins:script-security:${version_jenkins_plugins_script_security}"
    testPlugins "org.jenkins-ci.plugins:throttle-concurrents:${version_jenkins_plugins_throttle_concurrents}"
    testPlugins "org.jenkins-ci.plugins:timestamper:${version_jenkins_plugins_timestamper}"
    testPlugins "org.jenkins-ci.plugins:token-macro:${version_jenkins_plugins_token_macro}"
    testPlugins "org.jenkins-ci.plugins:toolenv:${version_jenkins_plugins_toolenv}"
    testPlugins "org.jenkins-ci.plugins:ws-cleanup:${version_jenkins_plugins_ws_cleanup}"
    testPlugins "org.jenkins-ci.plugins:xvnc:${version_jenkins_plugins_xvnc}"
    testPlugins "org.jenkins-ci.plugins:hidden-parameter:${version_jenkins_plugins_hidden_parameter}"
    testPlugins "io.jenkins.plugins:warnings-ng:${version_jenkins_plugins_warnings_ng}"

    // testPlugins "org.jvnet.hudson.plugins:ircbot:2.44"
    testPlugins "com.cloudbees.plugins:build-flow-plugin:0.20"
    testPlugins "org.jenkins-ci.plugins:nested-view:1.26"
}

task resolveTestPlugins(type: Copy) {
    from configurations.testPlugins
    into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
    include '*.hpi'
    include '*.jpi'
    def mapping = [:]

    doFirst {
        configurations.testPlugins.resolvedConfiguration.resolvedArtifacts.each {
            mapping[it.file.name] = "${it.name}.${it.extension}"
        }
    }
    rename { mapping[it] }

    doLast {
        List<String> baseNames = source*.name.collect { mapping[it] }.collect { it[0..it.lastIndexOf('.') - 1] }
        new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
    }
}

test {
    dependsOn tasks.resolveTestPlugins
    inputs.files sourceSets.jobs.groovy.srcDirs

    // set build directory for Jenkins test harness, JENKINS-26331
    systemProperty 'buildDirectory', project.buildDir.absolutePath
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
}

task rest(dependsOn: 'classes', type: JavaExec) {
    main = 'com.dslexample.rest.RestApiScriptRunner'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties System.getProperties()
}

task wrapperTask(type: Wrapper) {
    gradleVersion = '6.3'
    distributionType = 'all'
}
