import org.jenkinsci.plugins.workflow.libs.Library
import java.util.regex.Pattern

@Library('jenkins-pipeline-shared-libraries')_

// parameters
// 1. <prj>_RELEASE_BRANCH
// 2. <prj>_UPDATE_VERSION (this includes also dependencies)
// 3. QUARKUS_VERSION
// 4. DOWNGRADE_QUARKUS_PR_BRANCH
// 5. ADDITIONAL_BUILD_MAVEN_OPTS
// 6. PROJECTS_TO_REMOVE_FROM_PR_CHECKS

seedConfig = [:]
mainBranchConfig = [:]
repositoriesToBranch = []

pipeline{
    agent{
        label 'rhel8 && !built-in'
    }
    stages{
        stage('Initialize'){
            steps{
              script {
                    checkout scm

                    String projectListStr = getEcosystemProjects().collect { "${getRepoNameCamelCase(it.name)} ${getBranchFromRepository(it.name)}" }.join(' / ')
                    currentBuild.displayName = "Productize Branch for ${projectListStr}"
              }
            }
        }

        stage('Create productized branches'){
            steps{
                script {
                    List repositories = getProdRepositoriesToBranch()
                    createBranches(repositories)
                }
            }
        }

        // update the main seed config by adding the new prod branch, e.g.,
        //   - name: 8.36.x-prod
        //      seed:
        //      branch: seed-drools-8.36.x // this branch MUST already exist
        stage('Update main seed config') {
            steps {
                script {
                    String seedConfigFile = env.SEED_CONFIG_FILE_PATH

                    dir(checkoutMainSeedConfigFileRepo()) {
                        def seedConfig = readYaml file: seedConfigFile

                        if (!seedConfig.git.branches.find { it.name == getEcosystemProductizedBranch() }) {
                            def branchConfig = [
                                name: getEcosystemProductizedBranch(),
                                seed: [
                                    branch: getSeedRepoReleaseBranch(),
                                ]
                            ]

                            seedConfig.git.branches.add(branchConfig)
                        }

                        echo "Write seed config => ${seedConfig}"
                        sh "rm ${seedConfigFile}"
                        writeYaml file: seedConfigFile, data: seedConfig, overwrite: true

                        pushIfChanged(env.SEED_CONFIG_FILE_GIT_BRANCH, env.SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID, "Add productized branch ${getEcosystemProductizedBranch()} after upstream release", "Main config has been updated with release branch ${getEcosystemProductizedBranch()}")
                    }
                }
            }
        }

        // 1. update seed config repo on productized branch (e.g., 1.37.x-prod)
        //       - enable productized profile (-Dproductized) on jenkins environments branch.yaml [this MUST be executed only on config file repo, e.g., kogito-pipelines]
        //       - disable some environments when branching as they make no sense by default [this MUST be executed only on config file repo, e.g., kogito-pipelines]
        //       - set productized_repositories[].branch to the productized one, e.g., 1.37.x-prod
        //       - set productized_repositories[].is_branch_config_repo to true for the config file repo
        //       - enable productized profile (-Dproductized) on build chain config
        //       - do these changes directly on the prod branch


        stage("Update branch config on productized branch"){
            steps{
                script {
                    def prodBranch = getBranchConfigProductizedBranch()
                    def prodRepositories = getProdRepositoriesToBranch()

                    dir(checkoutMainBranchSeedConfigFileRepo()) {
                        getOrCreateGitBranch(prodBranch, getMainBranchConfigFileGitAuthorCredentialsId())

                        def branchConfigFilePath = getProdBranchConfigFilePath()
                        def branchConfig = readYaml file: branchConfigFilePath

                        branchConfig.productized_repositories = prodRepositories
                        branchConfig.productized_branch = true

                        // keep only those environments that are really needed on productized branch:
                        // native, quarkus-branch and default if exists
                        def envsToKeep = ['native', 'quarkus-branch', 'default']
                        enabledEnvs = branchConfig.environments.findAll { envName, envData ->  envsToKeep.contains(envName) }

                        // additional maven opt that enables productized profile
                        // FIXME do we need -Dproductized here as we are already adding it on buildchain config
                        def buildMvnOpts = "-Dproductized ${getAdditionalDefaultBuildMavenOpts()} "

                        // create default env if not already existing
                        enabledEnvs.default = enabledEnvs.default ?: [:]

                        // apply changes on remaining envs
                        enabledEnvs.each { envName, envData ->
                            // ensure env is enabled
                            envData.enabled = true

                            envData.env_vars = envData.env_vars ?: [:]
                            envData.env_vars.BUILD_MVN_OPTS = buildMvnOpts + (envData.env_vars.BUILD_MVN_OPTS ?: '')
                        }

                        // update environments
                        branchConfig.environments = enabledEnvs

                        // ignore the job creation for jobs in environment which are not defined (apart from the default env)
                        branchConfig.generation_config = branchConfig.generation_config ?: [:]
                        branchConfig.generation_config.missing_environment = 'ignore'

                        // disable community triggers
                        branchConfig.disable = branchConfig.disable ?: [:]
                        branchConfig.disable.triggers = true

                        // update repositories branches to the productized one
                        branchConfig.repositories.each { repo ->
                            repo.branch = getEcosystemProductizedBranch()
                        }

                        // add cloud.images if operating on kogito project

                        branchConfig.cloud = branchConfig.cloud ?: [:]
                        if (getEcosystemMainProject() == 'kogito') {
                            branchConfig.cloud.images = 'kogito-data-index-ephemeral,kogito-swf-builder,kogito-swf-devmode'
                        }

                        // override nexus artifacts repository

                        def nexusRepo = "${env.BXMS_QE_NEXUS}/content/repositories/osl-prod-nightly/"
                        branchConfig.maven = branchConfig.maven ?: [:]
                        branchConfig.maven.artifacts_repository = nexusRepo

                        branchConfig.maven.artifacts_upload_repository = branchConfig.maven.artifacts_upload_repository ?: [:]
                        branchConfig.maven.artifacts_upload_repository.url = nexusRepo
                        branchConfig.maven.artifacts_upload_repository.creds_id = 'unpacks-zip-on-qa-nexus'

                        echo "Write dsl branch_config => ${branchConfig}"
                        sh "rm -f ${branchConfigFilePath}"
                        writeYaml file: "${branchConfigFilePath}", data: branchConfig, overwrite: true

                        // update build-chain configuration

                        def buildChainConfigFilePath = readMainBranchConfig().buildchain_config.git.file_path
                        def buildChainConfig = readYaml file: buildChainConfigFilePath

                        // add -Dproductized in BUILD_MVN_OPTS, then we don't have to add -Dproductized inside DSL configs

                        sh "sed -i 's/export BUILD_MVN_OPTS=\"\\\${{ env.BUILD_MVN_OPTS }}/export BUILD_MVN_OPTS=\"\\\${{ env.BUILD_MVN_OPTS }} -Dproductized/' ${buildChainConfigFilePath}"

                        // comment out projects we are not interested in from the buildchain-config.yaml
                        def projectToRemoveFromBCPRChecks = getProjectsToRemoveFromBuildChainConfig()

                        if (projectToRemoveFromBCPRChecks.isEmpty()) {
                            echo "Removing projects ${projectToRemoveFromBCPRChecks} from build chain configuration"

                            def builds = buildChainConfig.build.findAll { build ->
                                !projectToRemoveFromBCPRChecks.contains(build.project)
                            }
                            buildChainConfig.build = builds

                            echo "Write build-chain configuration => ${buildChainConfig}"
                            sh "rm -f ${buildChainConfigFilePath}"
                            writeYaml file: "${buildChainConfigFilePath}", data: buildChainConfig, overwrite: true

                            // update build-chain project dependencies
                            def buildChainConfigDependenciesFilePath = buildChainConfigFilePath.substring(0, buildChainConfigFilePath.lastIndexOf('/') + 1) + "${buildChainConfig.dependencies}"
                            def buildChainConfigDependencies = readYaml file: buildChainConfigDependenciesFilePath

                            def deps = buildChainConfigDependencies.dependencies.findAll { dep ->
                                !projectToRemoveFromBCPRChecks.contains(dep.project)
                            }
                            buildChainConfigDependencies.dependencies = deps

                            echo "Write build-chain dependencies configuration => ${buildChainConfigDependencies}"
                            sh "rm -f ${buildChainConfigDependenciesFilePath}"
                            writeYaml file: "${buildChainConfigDependenciesFilePath}", data: buildChainConfigDependencies, overwrite: true
                        }

                        pushIfChanged(prodBranch, getMainBranchConfigFileGitAuthorCredentialsId(), "Setup DSL branch config after productized branch creation", "Branch config on ${prodBranch} has been updated with correct configuration")
                    }
                }
            }
        }


        // 2. update productized branch on other projects
        //              - disable PR checks from jobs.groovy
        //              - comment out projects we are not interested in from the buildchain-config.yaml
        //              - disable GHA jobs no more needed by commenting out workflows
        //              - ensure that fullProfile is not enabled on .ci/jenkins/dsl/jobs.groovy, if so remove it
        stage("Update prod branch for all projects to be productized"){
            steps{
                script {
                    def prodRepositories = getProdRepositoriesToBranch()
                    prodRepositories.each { repoConfig ->
                        String repository = repoConfig.name
                        String repoAuthor = repoConfig.author?.name ?: readMainBranchConfig().git.author.name
                        String repoCredsId = repoConfig.author?.credentials_id ?: readMainBranchConfig().git.author.credentials_id

                        String jobsGroovyPath = getJobDefinitionFilePath()

                        dir(repository) {
                            deleteDir()
                            // here productized branches should have been already created on repos to be productized
                            checkout(githubscm.resolveRepository(repository, repoAuthor, getProductizedBranchFromRepository(repository), false, repoCredsId))

                            getOrCreateGitBranch(repoConfig.branch, repoCredsId)

                            if (fileExists("${jobsGroovyPath}")) {
                                // def jobsGroovy = readFile file: jobsGroovyPath
                                // remove fullProfile
                                sh "sed -i 's/, addFullProfileJobParamsGetter)/)/g' ${jobsGroovyPath}"
                                // TODO: disable pr checks in getMultijobPRConfig, get them from params
                            } else {
                                echo "[WARN] Unable to find jobs.groovy for '${repository}' at '${jobsGroovyPath}'"
                            }


                            // TODO iterate over PR workflows
                            // - comment out/remove if not needed (get these from param?)

                            // push changes
                            pushIfChanged(repoConfig.branch, repoCredsId, "Pull request checks updated for productized branch", "Pull request checks updated for productized branch")
                        }
                    }
                }
            }
        }

        // 3. update the projects version in order to avoid any kind of conflicts with already existing and deployed artifacts

        stage("Update projects version"){
            when {
                expression { return getProjectUpdateVersionKeys().findAll{ it.value != '' } }
            }
            steps{
                script {
                    println "Updating projects versions"

                    def prodBranch = getEcosystemProductizedBranch()
                    String jobName = "${prodBranch}/setup-branch/0-setup-branch"
                    List jobParams = []
                    jobParams.add(booleanParam(name: 'DEPLOY', value: false))
                    // here we could have a variable number of params
                    getProjectUpdateVersionKeys().each{ p ->
                        jobParams.add(stringParam(name: p.key.replace('_UPDATE', ''), value: p.value))
                    }

                    if (!isDryRun()) {
                        def job = [:]
                        try {
                            // Retry 20 times every 5 min in order to assure seed job ran
                            retry(20) {
                                sleep 300
                                echo "Build ./${jobName} with parameters ${jobParams}"
                                job = build(job: "./${jobName}", parameters: jobParams, wait: true, propagate: false)
                            }

                            if (job.result != 'SUCCESS') {
                                unstable("Update projects version on repositories was not successful")
                            }
                        } catch (err) {
                            unstable("Error executing the ${prodBranch} setup job ...")
                            String msg = "ERROR: Setup branch job on newly created release branch '${prodBranch}' was unsuccessful."
                            if(job) {
                                msg += "\nPlease review job ${job.absoluteUrl}..."
                            }
                            sendNotification(msg)
                        }
                    } else {
                        // dry run - just print the job name and params
                        echo "Build ./${jobName} with parameters ${jobParams}"
                    }
                }
            }
        }

        // 4. call update quarkus job in order to downgrade quarkus to LTS version (version provided as parameter QUARKUS_VERSION)
        //          this will:
        //              - downgrade quarkus, there already exists a job doing this
        //              - apply patches from .ci/environments/quarkus-lts on the same PR

        stage('Downgrade quarkus to LTS version'){
            when {
                expression { return params.QUARKUS_VERSION }
            }
            steps{
                script {
                    println "Launch update quarkus all"

                    String jobName = "${getEcosystemProductizedBranch()}/tools/update-quarkus-all"
                    String quarkusDowngradePrBranch = getQuarkusDowngradePrBranch()
                    List jobParams = []
                    jobParams.add(stringParam(name: 'NEW_VERSION', value: getQuarkusVersion()))
                    jobParams.add(stringParam(name: 'PR_BRANCH', value: quarkusDowngradePrBranch))

                    echo "Build ./${jobName} with parameters ${jobParams}"
                    if (!isDryRun()) {
                        def job = [:]
                        try {
                            // Retry 20 times every 5 min in order to assure seed job ran
                            retry(20) {
                                sleep 300
                                echo "Build ./${jobName} with parameters ${jobParams}"
                                job = build(job: "./${jobName}", parameters: jobParams, wait: true, propagate: false)
                            }

                            if (job.result != 'SUCCESS') {
                                unstable("Downgrade quarkus version on repositories was not successful")
                            } else {
                                def prodRepositories = getProdRepositoriesToBranch()
                                prodRepositories.each { repoConfig ->
                                    String repoAuthor = repoConfig.author?.name ?: readMainBranchConfig().git.author.name
                                    String repoCredsId = repoConfig.author?.credentials_id ?: readMainBranchConfig().git.author.credentials_id
                                    String repository = repoConfig.name
                                    String baseBranch = repoConfig.branch ?: 'main'

                                    dir(repository) {
                                        deleteDir()
                                        checkout(githubscm.resolveRepository(repository, repoAuthor, baseBranch, false, repoCredsId))

                                        // if quarkusDowngradePrBranch has been created by update-quarkus-all job, checkout it
                                        if (checkoutGitBranchIfExists(quarkusDowngradePrBranch, repoCredsId)) {
                                            // thefollowing script takes care of applying all patches needed when downgrading to Quarkus LTS
                                            // i.e., it will apply all patches found under .ci/environments/quarkus-lts/patches
                                            def updateQuarkusLtsScriptPath = '.ci/environments/update.sh'
                                            if (fileExists(updateQuarkusLtsScriptPath)) {
                                                sh "${updateQuarkusLtsScriptPath} quarkus-lts"
                                            } else {
                                                echo "[WARN] Unable to find '${updateQuarkusLtsScriptPath}' for '${repository}'"
                                            }

                                            pushIfChanged(quarkusDowngradePrBranch, repoCredsId, "Applied patches after Quarkus downgrade to ${getQuarkusVersion()}", "Quarkus LTS patches on ${quarkusDowngradePrBranch} have been applied")
                                        }
                                    }
                                }
                            }
                        } catch (err) {
                            unstable("Error executing update quarkus all...")
                            String msg = "ERROR: Update quarkus all job on newly created prod branch was unsuccessful."
                            if(job) {
                                msg += "\nPlease review job ${job.absoluteUrl}..."
                            }
                            sendNotification(msg)
                        }
                    }
                }
            }
        }
    }
    post{
        unsuccessful {
            script {
                sendNotification("${getEcosystemMainProject()}: Branch Productization Pipeline job #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}")
            }
        }
        success {
            script {
                sendNotification("${getEcosystemMainProject()}: Branch Productization Pipeline job #${BUILD_NUMBER} was: ${currentBuild.currentResult}")
            }
        }
    }
}


void sendNotification(String body) {
    echo 'Send Notification'
    echo body
    if (!isDryRun()) {
        emailext body: body, subject: "[${getEcosystemProductizedBranch()}] ${getEcosystemMainProject()}",
                    to: env.CI_EMAIL_TO
    }
}

// Retrieve job parameters keys or values

String getBranchParameterKey(String projectName) {
    return "${projectName}_RELEASE_BRANCH".toUpperCase()
}

String getProdBranchSuffixParameterKey(String projectName) {
    def key = "${projectName}_PROD_BRANCH_SUFFIX".toUpperCase()
    return params."${key}"
}

def getProjectUpdateVersionKeys() {
    return params.findAll{ it.key.contains('_UPDATE_VERSION') }
}

String getQuarkusVersion() {
    return params.QUARKUS_VERSION
}

String getQuarkusDowngradePrBranch() {
    return params.DOWNGRADE_QUARKUS_PR_BRANCH ?: "${getEcosystemProductizedBranch()}-${getQuarkusVersion()}-downgrade"
}

Boolean isDryRun() {
    return params.DRY_RUN
}


def getAdditionalDefaultBuildMavenOpts() {
     return params.ADDITIONAL_BUILD_MAVEN_OPTS ?: ''
}

def getProjectsToRemoveFromBuildChainConfig() {
    return params.PROJECTS_TO_REMOVE_FROM_PR_CHECKS.split(',') as List ?: []
}

// Retrieve seed configuration

String checkoutMainSeedConfigFileRepo() {
    assert env.SEED_CONFIG_FILE_GIT_REPOSITORY : 'Missing main seed config file Git Repository into the environment. Please check the job configuration.'
    assert env.SEED_CONFIG_FILE_GIT_AUTHOR_NAME : 'Missing main seed config file Git Author Name into the environment. Please check the job configuration.'
    assert env.SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID : 'Missing main seed config file Git Author Credentials ID into the environment. Please check the job configuration.'
    assert env.SEED_CONFIG_FILE_GIT_BRANCH : 'Missing main seed config file Git Branch into the environment. Please check the job configuration.'

    String dirName = "seed-main-${env.SEED_CONFIG_FILE_GIT_REPOSITORY}"
    dir(dirName) {
        deleteDir()
        checkout(githubscm.resolveRepository(env.SEED_CONFIG_FILE_GIT_REPOSITORY, env.SEED_CONFIG_FILE_GIT_AUTHOR_NAME, env.SEED_CONFIG_FILE_GIT_BRANCH, false, env.SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID))
        sh "git checkout ${env.SEED_CONFIG_FILE_GIT_BRANCH}"
    }
    return dirName
}

def readSeedConfig() {
    assert env.SEED_CONFIG_FILE_PATH : 'Missing main seed config file Path into the environment. Please check the job configuration.'
    if (!seedConfig) {
        dir(checkoutMainSeedConfigFileRepo()) {
            seedConfig = readYaml(file: "${env.SEED_CONFIG_FILE_PATH}")
        }
    }
    return seedConfig
}

String getProdBranchConfigFilePath() {
    return readSeedConfig().seed.config_file.path
}

String getMainBranchConfigFileGitAuthorCredentialsId() {
    return readSeedConfig().seed.config_file.git.author.credentials_id
}

String checkoutMainBranchSeedConfigFileRepo() {
    String dirName = "seed-branch-${getMainBranchConfigFileGitRepository()}"
    dir(dirName) {
        deleteDir()
        checkout(githubscm.resolveRepository(getMainBranchConfigFileGitRepository(), getMainBranchConfigFileGitAuthorName(), getMainBranchConfigFileGitBranch(), false, getMainBranchConfigFileGitAuthorCredentialsId()))
        sh "git checkout ${getMainBranchConfigFileGitBranch()}"
    }
    return dirName
}

def readMainBranchConfig() {
    if (!mainBranchConfig) {
        dir(checkoutMainBranchSeedConfigFileRepo()) {
            mainBranchConfig = readYaml(file: "${getProdBranchConfigFilePath()}")
        }
    }
    return mainBranchConfig
}

String getRepoNameCamelCase(String repo) {
    List words = repo.split('-') as List
    return words.collect { it.isEmpty() ? it : it.substring(0, 1).toUpperCase() + it.substring(1).toLowerCase() }.join(' ')
}

String getJobDefinitionFilePath() {
    return readMainBranchConfig().jenkins?.jobs_definition_file ?: '.ci/jenkins/dsl/jobs.groovy'
}

// Retrieve impacted projects

List getEcosystemProjects() {
    return readSeedConfig().ecosystem.projects.findAll { ! (it.ignore_productization ? it.ignore_productization.toBoolean() : false)  }
}


// Retrieve branch to productize starting from current repository/project

String getProjectFromRepository(String repository) {
    return getEcosystemProjects().find { project -> project.regexs?.any { Pattern.compile(it).matcher(repository).matches() } }?.name
}

String getBranchFromProject(String projectName) {
    String key = getBranchParameterKey(projectName)
    assert params."${key}" : "No parameter ${key} available for project ${projectName}. Please check job configuration."
    return params."${key}"
}

String getBranchFromRepository(String repository) {
    def projectName = getProjectFromRepository(repository)
    if (projectName) {
        return getBranchFromProject(projectName)
    } else {
        error "Cannot retrieve repository from repository name: ${repository}. Make sure it matches pattern from ecosystem projects in the main config"
    }
}

// Retrieve repositories to branch

String getMainBranchConfigFileGitRepository() {
    return readSeedConfig().seed.config_file.git.repository
}

String getMainBranchConfigFileGitAuthorName() {
    return readSeedConfig().seed.config_file.git.author.name
}

String getMainBranchConfigFileGitBranch() {
    return readSeedConfig().seed.config_file.git.branch
}

List getProdRepositoriesToBranch() {
    if (!repositoriesToBranch) {
        repositoriesToBranch = readMainBranchConfig().productized_repositories.findAll { getProjectFromRepository(it.name) }
        def branches = readSeedConfig().git.branches
        if (!branches) {
            error "No branches are defined in main configuration..."
        }

        def releaseBranch = branches.find { it.name == getEcosystemReleaseBranch() }?.name ?: ''
        if (!releaseBranch) {
            error "No ${getEcosystemReleaseBranch()} branch defined into the main configuration..."
        }
        repositoriesToBranch.each { repoConfig ->
            // set  repoConfig.branch to the prod release one (e.g., 1.37.x) - input parameter
            def baseBranch = getBranchFromRepository(repoConfig.name)
            repoConfig.branch = repoConfig.branch ?: baseBranch ?: releaseBranch

            if (repoConfig.name == getMainBranchConfigFileGitRepository()) {
                String gitAuthor = repoConfig.author?.name ?: readMainBranchConfig().git.author.name
                if (gitAuthor == getMainBranchConfigFileGitAuthorName() &&
                    repoConfig.branch == getEcosystemReleaseBranch()) {
                    // we are already going to branch it with the setup of the branch config
                    echo "Repository ${repoConfig.name} is branch config repository"
                    repoConfig.is_branch_config_repo = true
                }
            }
        }
    }
    return repositoriesToBranch
}

// Create productized branches

String getProductizedBranchFromProject(String projectName) {
    String suffix = getProdBranchSuffixParameterKey(projectName) ?: 'prod'
    return "${getBranchFromProject(projectName)}-${suffix}"
}

String getProductizedBranchFromRepository(String repository) {
    def projectName = getProjectFromRepository(repository)
    return getProductizedBranchFromProject(projectName)
}

void createBranches(List repositories) {
    repositories.each { repoConfig ->
        String repoName = repoConfig.name
        String baseBranch = repoConfig.branch
        String prodBranch = getProductizedBranchFromRepository(repoConfig.name)
        String gitAuthorCredsId = repoConfig.author?.credentials_id ?: readMainBranchConfig().git.author.credentials_id
        assert gitAuthorCredsId : "Cannot find any credentials Id for git author ${repoConfig.author.name}. Please check your branch seed config file."
        String gitAuthor = repoConfig.author?.name ?: readMainBranchConfig().git.author.name

        echo "Checkout repo ${gitAuthor}/${repoName} on branch ${baseBranch}"
        dir(repoName) {
            deleteDir()
            checkout(githubscm.resolveRepository(repoName, gitAuthor, baseBranch, false, gitAuthorCredsId))
            getOrCreateGitBranch(prodBranch, gitAuthorCredsId)
        }
        // Update the branch with the new productized branch
        repoConfig.branch = prodBranch
    }
}

// Update main seed config

String getEcosystemMainProject() {
    return readSeedConfig().ecosystem.main_project
}

String getEcosystemProductizedBranch() {
    return getProductizedBranchFromProject(getEcosystemMainProject())
}

String getEcosystemReleaseBranch() {
    return getBranchFromProject(getEcosystemMainProject())
}

String getSeedRepoReleaseBranch() {
    return readSeedConfig().git.branches.find{ it -> it.name == getEcosystemReleaseBranch() }?.seed.branch ?: "seed-${getEcosystemMainProject()}-${getEcosystemReleaseBranch()}"
}

String getBranchConfigProductizedBranch() {
    // Check if repository already branched
    return (getProdRepositoriesToBranch().find { it -> it.is_branch_config_repo }?.branch) ?: "${getEcosystemMainProject()}-${getEcosystemProductizedBranch()}"
}

// Git utilities

void getOrCreateGitBranch(String branch, String credentialsId) {
    sh 'git fetch origin'
    String branchRemoteResult = sh(script: "git ls-remote origin ${branch} | wc -l", returnStdout: true).trim()
    if (Integer.parseInt(branchRemoteResult) > 0) {
        echo "Branch ${branch} already exist ... will not create it. Checking out !"
        sh "git checkout ${branch}"
    } else {
        echo "Branch ${branch} does not exist ... gonna create it"
        githubscm.createBranch(branch)
        if (!isDryRun()) {
            githubscm.pushObject('origin', branch,  credentialsId)
        }
    }
}

// If the provided branch exists, checkout it and return true, otherwise return false and skip checkout.
boolean checkoutGitBranchIfExists(String branch, String credentialsId) {
    sh 'git fetch origin'
    String branchRemoteResult = sh(script: "git ls-remote origin ${branch} | wc -l", returnStdout: true).trim()
    if (Integer.parseInt(branchRemoteResult) > 0) {
        echo "Branch ${branch} exist. Checking out !"
        sh "git checkout ${branch}"
        return true
    }

    echo "Branch ${branch} does not exist... skipping checkout"
    return false
}

def pushIfChanged(String branch, String credentialsId, String commitMsg, String notificationMsg) {
    if (githubscm.isThereAnyChanges()) {
        sh 'git diff'

        if (!isDryRun()) {
            githubscm.commitChanges(commitMsg)
            githubscm.pushObject('origin', branch, credentialsId)
        }

        sendNotification(notificationMsg)
    } else {
        println '[WARN] No changes to commit'
    }
}

