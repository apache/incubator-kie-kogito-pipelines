/////////////////////////////////////////////////////////////////////////////////////
// This Jenkinsfile generate the respective repository seed jobs based on configured branch
/////////////////////////////////////////////////////////////////////////////////////

import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

scriptUtils = null
all_repos = []
branchConfig = [:]

TRIGGER_REPOSITORY_JOB_DSL_SCRIPT = '''
import org.kie.jenkins.jobdsl.utils.SeedJobUtils

// +++++++++++++++++++++++++++++++++++++++++++ create a seed job ++++++++++++++++++++++++++++++++++++++++++++++++++++

SeedJobUtils.createSeedJobTrigger(
    this,
    "z-seed-trigger-${JOB_DISPLAY_NAME}-job",
    "${REPO_NAME}",
    "${GIT_AUTHOR_NAME}",
    "${GIT_AUTHOR_CREDS_ID}",
    "${GIT_BRANCH}",
    [ "${GIT_JENKINS_CONFIG_PATH}" ],
    "${JOB_NAME}")
'''

pipeline {
    agent {
        label "${env.AGENT_LABEL}"
    }

    tools {
        jdk 'jdk_11_latest'
    }

    options {
        timestamps()
        timeout(time: 180, unit: 'MINUTES')
    }

    // parameters {
    // See ./seed_job_branch.groovy
    // }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
        SEED_FOLDER = 'dsl/seed'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    checkout scm

                    scriptUtils = load 'dsl/seed/jenkinsfiles/scripts/utils.groovy'

                    all_repos = readBranchConfig().repositories.collect { it.name }
                }
            }
        }

        stage('Prepare jobs') {
            steps {
                script {
                    all_repos.each { repository ->
                        println "[INFO] Prepare jobs for repository ${repository}"
                        def repoConfig = getRepoConfig(repository)
                        dir("repos/${repository}") {
                            checkout(githubscm.resolveRepository(repository, repoConfig.git.author.name, repoConfig.git.branch, false))
                            String jobsFilePath = "${repoConfig.git.jenkins_config_path}/dsl/jobs.groovy"
                            echo "Copying DSL jobs file ${jobsFilePath}"
                            sh "cp ${jobsFilePath} ${WORKSPACE}/${SEED_FOLDER}/jobs/${normalizeRepositoryJobsFile(repository)}"
                        }
                    }
                }
            }
        }

        stage('Test jobs') {
            steps {
                script {
                    if (!params.SKIP_TESTS) {
                        String branchConfigPath = "${WORKSPACE}/${checkoutBranchConfig()}/${env.SEED_CONFIG_FILE_PATH}"
                        dir("${SEED_FOLDER}") {
                            try {
                                sh """
                                    cp ${branchConfigPath} ./branch_config.yaml
                                    ./gradlew clean test
                                """
                            } finally {
                                junit 'build/test-results/**/*.xml'
                                archiveArtifacts 'build/reports/**'
                            }
                        }
                    } else {
                        echo 'Tests are skipped'
                    }
                }
            }
        }

        stage('Generate jobs') {
            steps {
                script {
                    all_repos.each { repository ->
                        def envProps = getRepoConfigAsEnvProperties(repository)
                        envProps += [
                            DEBUG: scriptUtils.isDebug(),

                            ENVIRONMENTS: getRepoConfig(repository).environments?.keySet()?.join(',') ?: '',

                            GENERATION_BRANCH: "${GENERATION_BRANCH}",
                            GIT_MAIN_BRANCH: getMainBranch(repository),
                            REPO_NAME: "${repository}",

                            SEED_CONFIG_FILE_GIT_REPOSITORY: "${SEED_CONFIG_FILE_GIT_REPOSITORY}",
                            SEED_CONFIG_FILE_GIT_AUTHOR_NAME: "${SEED_CONFIG_FILE_GIT_AUTHOR_NAME}",
                            SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID: "${SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID}",
                            SEED_CONFIG_FILE_GIT_BRANCH: "${SEED_CONFIG_FILE_GIT_BRANCH}",
                            SEED_CONFIG_FILE_PATH: "${SEED_CONFIG_FILE_PATH}",

                            SEED_REPO: "${SEED_REPO}",
                            SEED_AUTHOR: "${SEED_AUTHOR}",
                            SEED_AUTHOR_CREDS_ID: "${SEED_AUTHOR_CREDS_ID}",
                            SEED_BRANCH: "${SEED_BRANCH}",
                        ]
                        // Add other repos `jenkins_config_path` var (useful if multijob PR checks for example)
                        envProps += all_repos.collectEntries {
                            [
                                (generateEnvKey(it, 'job_display_name')): getRepoConfig(it).job_display_name,
                                (generateEnvKey(it, 'jenkins_config_path')): getRepoConfig(it).git.jenkins_config_path,
                                (generateEnvKey(it, 'git_branch')): getRepoConfig(it).git.branch,
                                (generateEnvKey(it, 'git_author')): getRepoConfig(it).git.author.name,
                                (generateEnvKey(it, 'git_author_credentials_id')): getRepoConfig(it).git.author.credentials_id,
                                (generateEnvKey(it, 'git_author_push_credentials_id')): getRepoConfig(it).git.author.push.credentials_id,
                            ]
                        }

                        println "[INFO] Generate jobs for branch ${GENERATION_BRANCH} and repo ${repository}"
                        println "[INFO] Additional parameters: ${envProps}"
                        dir("${SEED_FOLDER}") {
                            jobDsl targets: "jobs/${normalizeRepositoryJobsFile(repository)}",
                                sandbox: false,
                                ignoreExisting: false,
                                ignoreMissingFiles: false,
                                removedJobAction: 'IGNORE',
                                removedViewAction: 'IGNORE',
                                lookupStrategy: 'SEED_JOB',
                                additionalClasspath: 'src/main/groovy',
                                additionalParameters : envProps
                        }
                    }
                }
            }
        }

        stage('Generate trigger jobs') {
            steps {
                script {
                    List repos = all_repos
                    int size = repos.size()
                    repos.eachWithIndex { repository, index ->
                        def repoConfig = getRepoConfig(repository)
                        def envProps = [
                            GENERATION_BRANCH: "${GENERATION_BRANCH}",
                            REPO_NAME: repository,
                            GIT_BRANCH: repoConfig.git.branch,
                            GIT_AUTHOR_NAME: repoConfig.git.author.name,
                            GIT_AUTHOR_CREDS_ID: repoConfig.git.author.credentials_id,
                            GIT_JENKINS_CONFIG_PATH: repoConfig.git.jenkins_config_path,
                            JOB_NAME: "${JOB_NAME}",
                            JOB_DISPLAY_NAME: repoConfig.job_display_name,
                            SEED_CONFIG_FILE_GIT_REPOSITORY: "${SEED_CONFIG_FILE_GIT_REPOSITORY}",
                            SEED_CONFIG_FILE_GIT_AUTHOR_NAME: "${SEED_CONFIG_FILE_GIT_AUTHOR_NAME}",
                            SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID: "${SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID}",
                            SEED_CONFIG_FILE_GIT_BRANCH: "${SEED_CONFIG_FILE_GIT_BRANCH}",
                            SEED_CONFIG_FILE_PATH: "${SEED_CONFIG_FILE_PATH}",
                        ]

                        println "[INFO] Generate trigger jobs for branch ${GENERATION_BRANCH} and repo ${repository}"
                        println "[INFO] Additional parameters: ${envProps}"
                        dir("${SEED_FOLDER}") {
                            jobDsl scriptText: TRIGGER_REPOSITORY_JOB_DSL_SCRIPT,
                                sandbox: false,
                                ignoreExisting: false,
                                ignoreMissingFiles: false,
                                removedJobAction: index >= size - 1 ? 'DELETE' : 'IGNORE',
                                removedViewAction: index >= size - 1 ? 'DELETE' : 'IGNORE',
                                lookupStrategy: 'SEED_JOB',
                                additionalClasspath: 'src/main/groovy',
                                additionalParameters : envProps
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        unsuccessful {
            script {
                emailext body: "**Seed job #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}",
                    subject: "[${GENERATION_BRANCH}] Seed",
                    to: env.KOGITO_CI_EMAIL_TO
            }
        }
        success {
            script {
                if (!("SUCCESS".equals(currentBuild.previousBuild?.result))) {
                    emailext body: "**Seed job #${BUILD_NUMBER} recovered and finished successfully",
                        subject: "[${GENERATION_BRANCH}] Seed",
                        to: env.KOGITO_CI_EMAIL_TO
                }
            }
        }
    }
}

String normalizeRepositoryJobsFile(String repository) {
    return "${repository.replaceAll('-', '')}_jobs.groovy"
}

boolean getMainBranch(String repository) {
    return scriptUtils.getMainBranch(readJSON(text: "${MAIN_BRANCHES}"), repository)
}

def readBranchConfig() {
    if (!branchConfig) {
        branchConfig = scriptUtils.readSeedConfigFile([
            repository: env.SEED_CONFIG_FILE_GIT_REPOSITORY,
            author: env.SEED_CONFIG_FILE_GIT_AUTHOR_NAME,
            credentials: env.SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID,
            branch: env.SEED_CONFIG_FILE_GIT_BRANCH,
            filepath: env.SEED_CONFIG_FILE_PATH,
        ])
    }
    return branchConfig
}

String checkoutBranchConfig() {
    return scriptUtils.checkoutSeedConfigFile([
        repository: env.SEED_CONFIG_FILE_GIT_REPOSITORY,
        author: env.SEED_CONFIG_FILE_GIT_AUTHOR_NAME,
        credentials: env.SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID,
        branch: env.SEED_CONFIG_FILE_GIT_BRANCH,
        filepath: env.SEED_CONFIG_FILE_PATH,
    ])
}

def getRepoConfig(String repository, String generationBranch = "${GENERATION_BRANCH}") {
    def branchConfig = readBranchConfig()
    def repoConfig = branchConfig.repositories.find { it.name == repository }

    def cfg = scriptUtils.deepCopyObject(branchConfig)
    cfg.remove('repositories')

    cfg.job_display_name = repoConfig.job_display_name

    // In case repository is disabled
    cfg.disabled = repoConfig.disabled ?: false

    cfg.git.branch = repoConfig.branch ?: generationBranch
    cfg.git.jenkins_config_path = repoConfig.jenkins_config_path ?: cfg.git.jenkins_config_path

    cfg.git.author = cfg.git.author ?: [:]
    cfg.git.author.name = repoConfig.author?.name ?: cfg.git.author.name
    cfg.git.author.credentials_id = repoConfig.author?.credentials_id ?: cfg.git.author.credentials_id
    cfg.git.author.push.credentials_id = repoConfig.author?.push?.credentials_id ?: cfg.git.author.push.credentials_id
    cfg.git.author.token_credentials_id = repoConfig.author?.credentials_id ?: cfg.git.author.token_credentials_id
    cfg.git.author.push.token_credentials_id = repoConfig.author?.push?.token_credentials_id ?: cfg.git.author.push.token_credentials_id

    String buildchainRepo = cfg.buildchain_config?.git?.repository
    if (buildchainRepo) {
        def buildchainRepoConfig = buildchainRepo == repository ? cfg : getRepoConfig(buildchainRepo, generationBranch)
        cfg.buildchain_config.git.branch = cfg.buildchain_config.git.branch ?: buildchainRepoConfig.git.branch

        cfg.buildchain_config.git.author = cfg.buildchain_config.git.author ?: [:]
        cfg.buildchain_config.git.author.name = cfg.buildchain_config.author?.name ?: buildchainRepoConfig.git.author.name
        cfg.buildchain_config.git.author.credentials_id = cfg.buildchain_config.author?.credentials_id ?: buildchainRepoConfig.git.author.credentials_id
    }

    if (scriptUtils.isDebug()) {
        println '[DEBUG] Repo config:'
        println "[DEBUG] ${cfg}"
    }
    return cfg
}

def getRepoConfigAsEnvProperties(String repoName) {
    return convertConfigToEnvProperties(getRepoConfig(repoName))
}

Map convertConfigToEnvProperties(Map propsMap, String envKeyPrefix = '') {
    Map envProperties = [:]
    fillEnvProperties(envProperties, envKeyPrefix, propsMap)
    if (scriptUtils.isDebug()) {
        println '[DEBUG] Environment properties:'
        envProperties.each {
            println "[DEBUG] ${it.key} = ${it.value}"
        }
    }
    return envProperties
}

void fillEnvProperties(Map envProperties, String envKeyPrefix, Map propsMap) {
    propsMap.each { it ->
        String newKey = generateEnvKey(envKeyPrefix, it.key)
        def value = it.value
        if (scriptUtils.isDebug()) {
            println "[DEBUG] Setting key ${newKey} and value ${value}"
        }
        if (value instanceof Map) {
            fillEnvProperties(envProperties, newKey, value as Map)
        } else if (value instanceof List || value instanceof net.sf.json.JSONArray) {
            envProperties.put(newKey, (value as List).collect { it }.join(','))
        } else {
            envProperties.put(newKey, value)
        }
    }
}

String generateEnvKey(String envKeyPrefix, String key) {
    return (envKeyPrefix ? "${envKeyPrefix}_${key}" : key).toUpperCase()
}
