import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

quarkusPlatformRepo="quarkus-platform"
branchCreated = false

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
        }
    }

    options{
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages{
        stage('CleanWorkspace') {
            steps {
                cleanWs(disableDeferredWipeout: true)
            }
        }
		stage('Initialize') {
			steps{
				script{
                    sh 'printenv'
                    
                    checkout scm

                    dir(quarkusPlatformRepo){
                        checkoutRepo(quarkusPlatformRepo, getQuarkusPlatformAuthor(), getQuarkusPlatformBranch(), getQuarkusPlatformAuthorCredsId())
                        githubscm.forkRepo("${getGitForkAuthorPushCredsId()}")
                    }
				}
			}
		}
        stage('stage') {
			when {
				expression { getCommand() == 'stage' }
			}
            steps {
                script {
                    String prLink = null
                    String commitMsg = getCommitMessage()
                    String localBranch = getLocalBranchName()
                    dir(quarkusPlatformRepo){
                        branchCreated = getOrCreateGitBranch(localBranch, "${getGitForkAuthorPushCredsId()}")
                        
                        // run update-quarkus-platform.sh with 'stage'
                        sh "${WORKSPACE}/tools/update-quarkus-platform.sh -p ${getProjectName()} -s -v ${getNewVersion()} -f ${getGitForkAuthor()} -h ${localBranch} -n -r ${getCommand()}"
                        
                        sh "git status"

                        // Add changed files, commit and open PR
                        def prBody = "Generated by Kogito pipelines"

                        if (githubscm.isThereAnyChanges()) {
                            githubscm.commitChanges(commitMsg, { sh "git add --all" })
                            githubscm.pushObject('origin', localBranch, "${getGitForkAuthorPushCredsId()}")   
                            if (branchCreated) {
                                prLink = githubscm.createPrAsDraft(commitMsg, prBody, getQuarkusPlatformBranch(), "${getGitForkAuthorCredsId()}")
                                sendNotification("Draft PR was created with ${getProjectName()} to version ${getNewVersion()}.\nHere is the PR link: ${prLink}")
                            } else {
                                echo "Branch ${localBranch} was already created so assuming the PR exists alrerady ..."
                                sendNotification("Current PR was updated with ${getProjectName()} to version ${getNewVersion()}.")
                            }
                        } else {
                            println '[WARN] no changes to commit'
                        }
                    }
                }
            }
        }
        stage('finalize') {
			when {
				expression { getCommand() == 'finalize' }
			}
            steps {
                script {
                    String commitMsg = getCommitMessage()
                    String localBranch = getLocalBranchName()
                    dir(quarkusPlatformRepo){
                        sh "git fetch origin"
                        sh "git checkout ${localBranch}"
                        
                        // run update-quarkus-platform.sh with 'finalize'
                        sh "${WORKSPACE}/tools/update-quarkus-platform.sh -p ${getProjectName()} -s -d -v ${getNewVersion()} -f ${getGitForkAuthor()} -h ${localBranch} -n -r ${getCommand()}"
                        
                        githubscm.squashCommits(getQuarkusPlatformBranch(), commitMsg)

                        githubscm.pushObject('--force-with-lease origin', localBranch, "${getGitForkAuthorPushCredsId()}")
                        sendNotification("PR was finalized with ${getProjectName()} to version ${getNewVersion()}.")
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendErrorNotification()
        }
    }
}

/**
* Return true if the branch was created
*/
boolean getOrCreateGitBranch(String branch, String credentialsId) {
    sh 'git fetch origin'
    String branchRemoteResult = sh(script: "git ls-remote origin ${branch} | wc -l", returnStdout: true).trim()
    if (Integer.parseInt(branchRemoteResult) > 0) {
        echo "Branch ${branch} already exist ... will not create it. Checking out !"
        sh "git checkout origin/${branch} -b ${branch}"
        return false
    } else {
        echo "Branch ${branch} does not exist ... gonna create it"
        githubscm.createBranch(branch)
        githubscm.pushObject('origin', branch,  credentialsId)
        return true
    }
}

void checkoutRepo(String repo, String author, String branch, String credentialsId) {
    checkout(githubscm.resolveRepository(repo, author, branch, false, credentialsId))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

void sendNotification(String body) {
    emailext body: "${body}",
             subject: "[${getBuildBranch()}] Quarkus Platform update",
             to: env.KOGITO_CI_EMAIL_TO
}

void sendErrorNotification() {
    sendNotification("Job #${BUILD_NUMBER} was: **${currentBuild.currentResult}**\nPlease look here: ${BUILD_URL}")
}

String getCommitMessage() {
    return "[${getQuarkusPlatformBranch()}] Bump up ${getProjectName()} to ${getNewVersion()}"
}

String getLocalBranchName() {
    return params.PR_BRANCH ?: "bump-${getProjectName()}-${getNewVersion()}"
}

String getNewVersion() {
    return params.NEW_VERSION
}

String getCommand() {
    return params.COMMAND
}

String getProjectName() {
    return env.PROJECT_NAME
}

String getBuildBranch() {
    return env.BUILD_BRANCH_NAME
}

String getGitForkAuthor() {
    return env.GIT_FORK_AUTHOR
}

String getGitForkAuthorCredsId() {
    return env.GIT_FORK_AUTHOR_CREDS_ID
}

String getGitForkAuthorPushCredsId() {
    return env.GIT_FORK_AUTHOR_PUSH_CREDS_ID
}

String getQuarkusPlatformBranch() {
    return params.GIT_QUARKUS_BRANCH
}

String getQuarkusPlatformAuthor() {
    return env.GIT_QUARKUS_AUTHOR_NAME
}

String getQuarkusPlatformAuthorCredsId() {
    return env.GIT_QUARKUS_AUTHOR_CREDENTIALS_ID
}
