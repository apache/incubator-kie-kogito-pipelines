@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

branchCreated = false
pipelineProperties = [:]

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
        }
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    assert getNewVersion()

                    currentBuild.displayName = getNewVersion()

                    checkout scm

                    dir(getRepoName()) {
                        deleteDir()
                        checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false, getGitAuthorCredsId()))
                    }
                }
            }
        }
        stage('Prepare for PR') {
            steps {
                script {
                    dir(getRepoName()) {
                        branchCreated = getOrCreateGitBranch(getPRBranch(), getGitAuthorPushCredsId())
                    }
                }
            }
        }
        stage('Update Maven dependencies') {
            when {
                expression { return getMavenCompareDepsRemotePoms() }
            }
            steps {
                script {
                    dir(getRepoName()) {
                        getMavenCompareDepsRemotePoms().each { remotePom ->
                            if (getMavenModules()) {
                                getMavenModules().each { module ->
                                    sh "${WORKSPACE}/tools/update-maven-compare-dependencies.sh ${remotePom} ${getNewVersion()} ${module}"
                                }
                            } else {
                                sh "${WORKSPACE}/tools/update-maven-compare-dependencies.sh ${remotePom} ${getNewVersion()}"
                            }
                        }
                    }
                }
            }
        }
        stage('Update Maven properties') {
            when {
                expression { return getMavenProperties() }
            }
            steps {
                script {
                    dir(getRepoName()) {
                        getMavenProperties().each { prop ->
                            if (getMavenModules()) {
                                getMavenModules().each { module ->
                                    sh "${WORKSPACE}/tools/update-maven-module-property.sh ${prop} ${getNewVersion()} ${module}"
                                }
                            } else {
                                sh "${WORKSPACE}/tools/update-maven-module-property.sh ${prop} ${getNewVersion()}"
                            }
                        }
                    }
                }
            }
        }
        stage('Update Gradle properties') {
            when {
                expression { return getGradleRegex() }
            }
            steps {
                script {
                    dir(getRepoName()) {
                        getGradleRegex().each { regex ->
                            sh "${WORKSPACE}/tools/update-build-gradle-regex-line.sh '${regex}' ${getNewVersion()}"
                        }
                    }
                }
            }
        }
        stage('Update other files') {
            when {
                expression { return getFilepathReplaceRegex() }
            }
            steps {
                script {
                    dir(getRepoName()) {
                        getFilepathReplaceRegex().each { filepathReplaceregex ->
                            String filepath = filepathReplaceregex.filepath
                            String regex = filepathReplaceregex.regex
                            sh """
                                sed -i 's|${regex}.*|${regex}${getNewVersion()}|g' ${filepath}
                            """
                        }
                    }
                }
            }
        }
        stage('Call scripts') {
            when {
                expression { return getScriptCalls() }
            }
            steps {
                script {
                    dir(getRepoName()) {
                        getScriptCalls().each { scriptCall ->
                            sh """
                                ${scriptCall.replaceAll('%new_version%', getNewVersion())}
                            """
                        }
                    }
                }
            }
        }
        stage('Create PR') {
            steps {
                script {
                    dir(getRepoName()) {
                        if (githubscm.isThereAnyChanges()) {
                            String commitMsg = "[${getBuildBranch()}] ${getJiraNumber() ? "[${getJiraNumber()}] " : ''}Bump ${getDependencyName()} version to ${getNewVersion()}"
                            githubscm.commitChanges(commitMsg)
                            githubscm.pushObject('origin', getPRBranch(), getGitAuthorPushCredsId())

                            if (branchCreated) {
                                String prLink = githubscm.createPR(commitMsg, 'Please review and merge', getBuildBranch(), getGitAuthorCredsId())
                                echo "Created PR ${prLink}"
                                setPipelinePropertyIfNeeded('pr.link', prLink)
                            } else {
                                echo "Branch ${getPRBranch()} was already created so assuming the PR exists alrerady ..."
                            }
                        } else {
                            println '[WARN] no changes to commit'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = pipelineProperties.collect { entry ->  "${entry.key}=${entry.value}" }.join('\n')
                writeFile(text: propertiesStr, file: "${PROPERTIES_FILENAME}")
                archiveArtifacts(artifacts: "${PROPERTIES_FILENAME}")
            }
        }
        cleanup {
            cleanWs()
        }
    }
}

String getDependencyName() {
    return "${DEPENDENCY_NAME}"
}

String getBuildBranch() {
    return "${BUILD_BRANCH_NAME}"
}

String getGitAuthor() {
    return "${GIT_AUTHOR}"
}

String getGitAuthorCredsId() {
    return "${GIT_AUTHOR_CREDS_ID}"
}

String getGitAuthorPushCredsId() {
    return "${GIT_AUTHOR_PUSH_CREDS_ID}"
}

String getPRBranch() {
    return params.PR_BRANCH ?: "bump-${getPRPrefixBranch() ?: getBuildBranch()}-${getDependencyName().toLowerCase()}-${getNewVersion()}"
}

String getPRPrefixBranch() {
    return env.PR_PREFIX_BRANCH
}

String getNewVersion() {
    return "${NEW_VERSION}"
}

String getRepoName() {
    return "${REPO_NAME}"
}

String getJiraNumber() {
    return params.JIRA_NUMBER
}

List getMavenModules() {
    return env.MAVEN_MODULES ? readJSON(text: env.MAVEN_MODULES) : []
}

List getMavenCompareDepsRemotePoms() {
    return env.MAVEN_COMPARE_DEPS_REMOTE_POMS ? readJSON(text: env.MAVEN_COMPARE_DEPS_REMOTE_POMS) : []
}

List getMavenProperties() {
    return env.MAVEN_PROPERTIES ? readJSON(text: env.MAVEN_PROPERTIES) : []
}

List getGradleRegex() {
    return env.GRADLE_REGEX ? readJSON(text: env.GRADLE_REGEX) : []
}

List getFilepathReplaceRegex() {
    return env.FILEPATH_REPLACE_REGEX ? readJSON(text: env.FILEPATH_REPLACE_REGEX) : [:]
}

List getScriptCalls() {
    return env.SCRIPTS_CALLS ? readJSON(text: env.SCRIPTS_CALLS) : []
}

/**
* Return true if the branch was created
*/
boolean getOrCreateGitBranch(String branch, String credentialsId) {
    sh 'git fetch origin'
    String branchRemoteResult = sh(script: "git ls-remote origin ${branch} | wc -l", returnStdout: true).trim()
    if (Integer.parseInt(branchRemoteResult) > 0) {
        echo "Branch ${branch} already exist ... will not create it. Checking out !"
        sh "git checkout origin/${branch} -b ${branch}"
        return false
    } else {
        echo "Branch ${branch} does not exist ... gonna create it"
        githubscm.createBranch(branch)
        githubscm.pushObject('origin', branch,  credentialsId)
        return true
    }
}

void setPipelinePropertyIfNeeded(String key, def value) {
    if (value) {
        pipelineProperties[key] = value
    }
}
