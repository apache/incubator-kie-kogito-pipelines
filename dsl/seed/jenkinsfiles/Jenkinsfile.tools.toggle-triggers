import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

pipeline {
    agent {
        docker {
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes('ubuntu')
        }
    }

    options {
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
    }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
        PR_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('CleanWorkspace') {
            steps {
                cleanWs(disableDeferredWipeout: true)
            }
        }
        stage('Initialize') {
            steps {
                script {
                    sh 'printenv'
                    dir("${getSeedConfigRepository()}") {
                        checkoutRepo(getSeedConfigRepository(), getSeedConfigAuthor(), getSeedConfigBranch(), getSeedConfigAuthorCredsId())
                    }
                }
            }
        }
        stage('Setup branch config - toggle triggers') {
            steps {
                script {
                    dir("${getSeedConfigRepository()}") {
                        def branchConfig = readYaml file: getSeedConfigFilepath()
                        branchConfig.disable.triggers = isToggleTriggers()
                        echo "Write dsl branch_config => ${branchConfig}"
                        sh "rm -f ${getSeedConfigFilepath()}"
                        writeYaml file: "${getSeedConfigFilepath()}", data: branchConfig, overwrite: true
                    }
                }
            }
        }
        stage('Create, push and merge pull request') {
            steps {
                script {
                    dir("${getSeedConfigRepository()}") {
                        if (githubscm.isThereAnyChanges()) {
                            String commitMsg = "[${getSeedConfigBranch()}] DSL triggers ${DISABLE_TRIGGERS ? 'disabled' : 'enabled'}"
                            githubscm.createBranch(getPRBranch())
                            githubscm.setUserConfigFromCreds(getGitAuthorPushCredsId())
                            githubscm.commitChanges(commitMsg)
                            githubscm.pushObject('origin', getPRBranch(), getSeedConfigAuthorPushCredsId())

                            // Create PR
                            def prBody = "Generated by ${BUILD_URL}"
                            String prLink = githubscm.createPR(commitMsg, prBody, getSeedConfigBranch(), getSeedConfigAuthorCredsId())

                            // Merge automatically PR
                            approveAndMergePR(prLink)
                        } else {
                            println '[WARN] no changes to commit'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        unsuccessful {
            sendErrorNotification()
        }
    }
}

void checkoutRepo(String repo, String gitAuthor, String branch, String gitAuthorCredsId) {
    checkout(githubscm.resolveRepository(repo, gitAuthor, branch, false, gitAuthorCredsId))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

String getSeedConfigRepository() {
    return env.SEED_CONFIG_FILE_GIT_REPOSITORY
}

String getSeedConfigAuthor() {
    return env.SEED_CONFIG_FILE_GIT_AUTHOR_NAME
}

String getSeedConfigAuthorCredsId() {
    return env.SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID
}

String getSeedConfigAuthorPushCredsId() {
    return env.SEED_CONFIG_FILE_GIT_AUTHOR_PUSH_CREDS_ID
}

String getSeedConfigBranch() {
    return env.SEED_CONFIG_FILE_GIT_BRANCH
}

String getSeedConfigFilepath() {
    return env.SEED_CONFIG_FILE_PATH
}

Boolean isToggleTriggers() {
    return params.DISABLE_TRIGGERS
}

String getPRBranch() {
    return "toggle-triggers-${PR_BRANCH_HASH}"
}

void sendNotification(String body) {
    emailext body: "${body}",
             subject: "[${getSeedConfigBranch()}] Kogito",
             to: env.KOGITO_CI_EMAIL_TO
}

void sendErrorNotification() {
    sendNotification("Job #${BUILD_NUMBER} was: **${currentBuild.currentResult}**\nPlease look here: ${BUILD_URL}")
}

void approveAndMergePR(String prLink) {
    if (prLink?.trim()) {
        githubscm.approvePR(prLink, getSeedConfigAuthorPushCredsId())
        githubscm.mergePR(prLink, getSeedConfigAuthorPushCredsId())
    }
}
