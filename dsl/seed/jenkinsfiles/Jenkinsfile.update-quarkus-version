import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

prLinks = []
failingRepos = []

pipeline {
    agent {
        label 'ubuntu'
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    assert getNewVersion()

                    currentBuild.displayName = getNewVersion()
                }
            }
        }

        stage('Update quarkus version in branch config') {
            steps {
                script {
                    String prBranch = getSeedPRBranch("${getSeedConfigFileGitBranch()}")
                    dir("${getSeedConfigFileGitRepository()}") {
                        deleteDir()
                        checkout(githubscm.resolveRepository("${getSeedConfigFileGitRepository()}", "${getSeedConfigFileGitAuthor()}", "${getSeedConfigFileGitBranch()}", false, "${getSeedConfigFileGitAuthorCredsId()}"))

                        getOrCreateGitBranch(prBranch, "${getSeedConfigFileGitAuthorPushCredsId()}")

                        updateYaml("${getSeedConfigFilePath()}") { branchConfig ->
                            if (branchConfig.environments?.'quarkus-branch'?.env_vars?.QUARKUS_BRANCH) {
                                branchConfig.environments.'quarkus-branch'.env_vars.QUARKUS_BRANCH = getNewVersionBranch()
                            }
                        }

                        if (githubscm.isThereAnyChanges()) {
                            String commitMsg = "[${getSeedConfigFileGitBranch()}] ${getJiraNumber() ? "[${getJiraNumber()}] " : ''}Bump quarkus version to ${getNewVersion()}"
                            githubscm.commitChanges(commitMsg)
                            githubscm.pushObject('origin', prBranch, "${getSeedConfigFileGitAuthorPushCredsId()}")

                            String prLink = githubscm.createPR(commitMsg, 'Please review and merge', "${getSeedConfigFileGitBranch()}", "${getSeedConfigFileGitAuthorCredsId()}")
                            echo "Created PR ${prLink}"
                            prLinks.add(prLink)
                        } else {
                            echo 'No changes to commit. No PR is created !'
                        }
                    }
                }
            }
        }

        stage('Call update quarkus jobs') {
            steps {
                script {
                    parallelStages = [:]

                    env.PROJECTS_TO_UPDATE.split(',').each { repo ->
                        parallelStages[repo] = {
                            launchUpdateQuarkusJob(repo)
                        }
                    }

                    parallel parallelStages
                }
            }
        }

        stage('Finalizing') {
            steps {
                script {
                    if (prLinks) {
                        prLinks.each { finalizePR(it) }
                    } else {
                        echo 'No PR link to update'
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                sendPRLinksNotification()
            }
        }
        unsuccessful {
            script {
                sendErrorNotification()
            }
        }
        cleanup {
            cleanWs()
        }
    }
}

void sendNotification(String body) {
    emailext body: "**Quarkus version update job to ${getNewVersion()}**\n${body}",
             subject: "[${getBuildBranch()}] Quarkus update",
             to: env.KOGITO_CI_EMAIL_TO
}

void sendPRLinksNotification() {
    String body = ''
    if (prLinks) {
        body = """
Those PRs have been created:
${prLinks.collect { "- ${it}" }.join('\n')}
"""
    } else {
        body = 'Existing PRs have been updated !'
    }
    sendNotification(body)
}

void sendErrorNotification() {
    String body = """
Job #${BUILD_NUMBER} was: **${currentBuild.currentResult}**

Please look here: ${BUILD_URL}
"""
    if (failingRepos) {
        body += """
Failing jobs:
${failingRepos.collect { "- ${it}" }.join('\n')}
"""
    }
    sendNotification(body)
}

void launchUpdateQuarkusJob(String repo) {
    println "[INFO] Launch Update quarkus job for repo ${repo}"

    String jobName = "update-quarkus-${repo}"
    List jobParams = []
    jobParams.add(stringParam(name: 'NEW_VERSION', value: getNewVersion()))
    jobParams.add(stringParam(name: 'PR_BRANCH', value: params.PR_BRANCH))
    jobParams.add(stringParam(name: 'JIRA_NUMBER', value: params.JIRA_NUMBER))

    echo "Build ./${jobName} with parameters ${jobParams}"
    def job = build(job: "./${jobName}", parameters: jobParams, wait: true, propagate: false)
    if (job.result != 'SUCCESS') {
        unstable("Update Quarkus on repository ${repo} was not successful")
        failingRepos.add(repo)
    } else {
        String prLink = readPipelineProperties(job.absoluteUrl)?.'pr.link'
        if (prLink) {
            echo "Adding PR link ${prLink}"
            prLinks.add(prLink)
        }
    }
}

def readPipelineProperties(String jobUrl) {
    if (jobUrl != '') {
        if (!jobUrl.endsWith('/')) {
            jobUrl += '/'
        }
        sh "wget ${jobUrl}artifact/${PROPERTIES_FILENAME} -O ${PROPERTIES_FILENAME}"
        pipelineProperties = readProperties file: "${PROPERTIES_FILENAME}"
        // echo all properties
        echo pipelineProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
    return pipelineProperties
}

String getSeedConfigFileGitRepository() {
    return env.SEED_CONFIG_FILE_GIT_REPOSITORY
}
String getSeedConfigFilePath() {
    return env.SEED_CONFIG_FILE_PATH
}

String getSeedConfigFileGitAuthor() {
    return env.SEED_CONFIG_FILE_GIT_AUTHOR
}

String getSeedConfigFileGitBranch() {
    return env.SEED_CONFIG_FILE_GIT_BRANCH
}

String getSeedConfigFileGitAuthorCredsId() {
    return env.SEED_CONFIG_FILE_GIT_AUTHOR_CREDS_ID
}

String getSeedConfigFileGitAuthorPushCredsId() {
    return env.SEED_CONFIG_FILE_GIT_AUTHOR_PUSH_CREDS_ID
}

String getGitAuthorTokenCredsId() {
    return env.GIT_AUTHOR_TOKEN_CREDS_ID
}

String getNewVersion() {
    return params.NEW_VERSION
}

String getNewVersionBranch() {
    Integer[] versionSplit = util.parseVersion(getNewVersion())
    return "${versionSplit[0]}.${versionSplit[1]}"
}

String getBuildBranch() {
    return "${BUILD_BRANCH_NAME}"
}

String getSeedPRBranch(String branch) {
    return params.PR_BRANCH ? "${params.PR_BRANCH}-seed" : "bump-seed-${branch}-quarkus-${getNewVersion()}"
}

String getJiraNumber() {
    return params.JIRA_NUMBER
}

void updateYaml(String filePath, Closure updateClosure) {
    def yamlData = readYaml(file: filePath)
    updateClosure(yamlData)
    writeYaml(file: filePath, data: yamlData, overwrite: true)
}

void getOrCreateGitBranch(String branch, String credentialsId) {
    sh 'git fetch origin'
    String branchRemoteResult = sh(script: "git ls-remote origin ${branch} | wc -l", returnStdout: true).trim()
    if (Integer.parseInt(branchRemoteResult) > 0) {
        echo "Branch ${branch} already exist ... will not create it. Checking out !"
        sh "git checkout origin/${branch} -b ${branch}"
    } else {
        echo "Branch ${branch} does not exist ... gonna create it"
        githubscm.createBranch(branch)
        githubscm.pushObject('origin', branch,  credentialsId)
    }
}

void finalizePR(String prLink) {
    withCredentials([string(credentialsId: "${getGitAuthorTokenCredsId()}", variable: 'GITHUB_TOKEN')]) {
        String currentBodyJson = sh(returnStdout: true, script: "gh pr view ${prLink} --json body").trim()
        echo "currentBodyjson = ${currentBodyJson}"
        String newBody = """
${readJSON(text: currentBodyJson).body}

${getPRLinksSummary()}
"""
        if (getJiraNumber()) {
            newBody = """
https://issues.redhat.com/browse/${getJiraNumber()}

${newBody}
"""
        }
        echo "new body = ${newBody}"
        writeFile(file: 'prBody', text: newBody)
        sh "gh pr edit ${prLink} --body-file prBody ${getReviewers().collect { "--add-reviewer ${it}" }.join(' ')}"
    }
}

String getPRLinksSummary() {
    return prLinks.collect { "- ${it}" }.join('\n')
}

List getReviewers() {
    return env.REVIEWERS?.split(',')
}
