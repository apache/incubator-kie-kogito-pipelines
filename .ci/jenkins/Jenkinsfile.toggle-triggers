import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

AGENT_LABEL='kie-rhel8 && !built-in'
kogitoPipelinesRepo='kogito-pipelines'

pipeline {

    agent {
        label "${AGENT_LABEL}"
    }

    options{
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
    }

    tools {
        maven "${BUILD_MAVEN_TOOL}"
        jdk "${BUILD_JDK_TOOL}"
    }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
        PR_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages{
        stage('CleanWorkspace') {
            steps {
                cleanWs()
            }
        }
        stage('Initialize') {
        steps{
            script{
                sh 'printenv'
                    dir(kogitoPipelinesRepo){
                        checkoutRepo(kogitoPipelinesRepo, GIT_AUTHOR, getBuildBranch(), GIT_AUTHOR_CREDENTIALS_ID)
                    }
                }
            }
        }
        stage('Create pull request branch') {
            steps{
                script{
                    dir(kogitoPipelinesRepo){
                        githubscm.createBranch(getPRBranch())
                    }
                }
            }
        }
        stage('Setup branch config - toggle triggers') {
            steps {
                script{
                    dir("${kogitoPipelinesRepo}/dsl/config"){
                        String branchConfigFile = 'branch.yaml'
                        // Update branch config
                        def branchConfig = readYaml file: branchConfigFile
                        branchConfig.disable.triggers = getToggleTriggers()
                        echo "Write dsl branch_config => ${branchConfig}"
                        sh "rm -f ${branchConfigFile}"
                        writeYaml file: "${branchConfigFile}", data: branchConfig, overwrite: true
                    }
                }
            }
        }
        stage('Create, push and merge pull request'){
            steps{
                script{
                    dir(kogitoPipelinesRepo){
                        String commitMsg = "[${getBuildBranch()}] DSL triggers ${DISABLE_TRIGGERS ? 'disabled' : 'enabled'}"
                        String localBranch = "${getPRBranch()}"
                        String targetBranch = "${getBuildBranch()}"
                        if (githubscm.isThereAnyChanges()) {
                            String prLink = commitAndCreatePR(commitMsg, localBranch, targetBranch)
                            sh "git checkout ${targetBranch}"
                            mergeAndPush(prLink, targetBranch)
                            githubscm.removeRemoteBranch('origin', localBranch, getGitAuthorCredsId())
                        } else {
                            println '[WARN] no changes to commit'
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        unsuccessful {
            sendErrorNotification()
        }
    }
}

void checkoutRepo(String repo, String gitAuthor, String branch, String gitAuthorCredsId) {
    checkout(githubscm.resolveRepository(repo, gitAuthor, branch, false, gitAuthorCredsId))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

String getBuildBranch() {
    return env.BUILD_BRANCH_NAME
}

Boolean getToggleTriggers() {
    return params.DISABLE_TRIGGERS
}

String getPRBranch() {
    return "toggle-triggers-${PR_BRANCH_HASH}"
}

void sendNotification(String body) {
    emailext body: "${body}",
             subject: "[${getBuildBranch()}] Kogito",
             to: env.KOGITO_CI_EMAIL_TO
}

void sendErrorNotification() {
    sendNotification("Job #${BUILD_NUMBER} was: **${currentBuild.currentResult}**\nPlease look here: ${BUILD_URL}")
}

String commitAndCreatePR(String commitMsg, String localBranch, String targetBranch) {
    def prBody = "Generated by ${BUILD_URL}"
    githubscm.commitChanges(commitMsg)
    githubscm.pushObject('origin', localBranch, getGitAuthorCredsId())
    return githubscm.createPR(commitMsg, prBody, targetBranch, getGitAuthorCredsId())
}

void mergeAndPush(String prLink, String targetBranch) {
    if (prLink?.trim()) {
        githubscm.mergePR(prLink, getGitAuthorCredsId())
        githubscm.pushObject('origin', targetBranch, getGitAuthorCredsId())
    }
}
