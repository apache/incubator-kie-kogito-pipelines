import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

// Deploy jobs
DROOLS_DEPLOY = 'drools.integration'
RUNTIMES_DEPLOY = 'kogito-runtimes.integration'
APPS_DEPLOY = 'kogito-apps.integration'
EXAMPLES_DEPLOY = 'kogito-examples.integration'

// Map of executed jobs
// See https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
// for more options on built job entity
JOBS = [:]

FAILED_STAGES = [:]
UNSTABLE_STAGES = [:]

// Should be multibranch pipeline
pipeline {
    agent {
        label 'kie-rhel8 && !built-in'
    }

    options {
        timeout(time: 720, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Some generated env is also defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        // Use branch name in nightly tag as we may have parallel main and release branch builds
        NIGHTLY_TAG = """${getBuildBranch()}-${sh(
                returnStdout: true,
                script: 'date -u "+%Y-%m-%d"'
            ).trim()}"""
}

    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "nightly tag is ${env.NIGHTLY_TAG}"

                    currentBuild.displayName = env.NIGHTLY_TAG
                }
            }
        }

        stage('Drools') {
            steps {
                script {
                    buildJob(DROOLS_DEPLOY, getDefaultBuildParams())
                }
            }
            post {
                failure {
                    addFailedStage(DROOLS_DEPLOY)
                }
            }
        }

        stage('Kogito Runtimes') {
            steps {
                script {
                    buildJob(RUNTIMES_DEPLOY, getDefaultBuildParams())
                }
            }
            post {
                failure {
                    addFailedStage(RUNTIMES_DEPLOY)
                }
            }
        }

        stage('Kogito Apps') {
            steps {
                script {
                    buildJob(APPS_DEPLOY, getDefaultBuildParams())
                }
            }
            post {
                failure {
                    addFailedStage(APPS_DEPLOY)addSkipTestsParam(buildParams)
                                    addSkipIntegrationTestsParam(buildParams)
            steps {
                script {
                    buildJob(EXAMPLES_DEPLOY, getDefaultBuildParams())
                }
            }
            post {
                failure {
                    addFailedStage(EXAMPLES_DEPLOY)
                }
            }
        }
    }
    post {
        unsuccessful {
            sendPipelineErrorNotification()
        }
    }
}

def buildJob(String jobName, List buildParams, String jobKey = jobName) {
    echo "[${jobKey}] Build ${jobName} with params ${buildParams}"

    def job = build(job: "${jobName}", wait: true, parameters: buildParams, propagate: false)
    JOBS[jobKey] = job

    // Set Unstable if job did not succeed
    if (!isJobSucceeded(jobKey)) {
        addUnstableStage(jobKey)
        unstable("Job ${jobName} finished with result ${job.result}")
    }
    return job
}

def getJob(String jobKey) {
    return JOBS[jobKey]
}

String getJobUrl(String jobKey) {
    echo "getJobUrl for ${jobKey}"
    return getJob(jobKey)?.absoluteUrl ?: ''
}

boolean isJobSucceeded(String jobKey) {
    return getJob(jobKey)?.result == 'SUCCESS'
}

boolean isJobUnstable(String jobKey) {
    return getJob(jobKey)?.result == 'UNSTABLE'
}

void addFailedStage(String jobKey = '') {
    FAILED_STAGES.put("${env.STAGE_NAME}", jobKey)
}
void addUnstableStage(String jobKey = '') {
    UNSTABLE_STAGES.put("${env.STAGE_NAME}", jobKey)
}

void sendPipelineErrorNotification() {
    String bodyMsg = "Kogito Quarkus 3 nightly job #${env.BUILD_NUMBER} was: ${currentBuild.currentResult}"

    if (FAILED_STAGES.size() > 0) {
        bodyMsg += '\nFailed stages: \n- '
        bodyMsg += FAILED_STAGES.collect { "${it.key} => ${getJobUrl(it.value)}" }.join('\n- ')
    }
    bodyMsg += '\n'
    if (UNSTABLE_STAGES.size() > 0) {
        bodyMsg += '\nUnstable stages: \n- '
        bodyMsg += UNSTABLE_STAGES.collect { "${it.key} => ${getJobUrl(it.value)}" }.join('\n- ')
    }
    bodyMsg += '\n'
    bodyMsg += "\nPlease look here: ${env.BUILD_URL}"
    emailext body: bodyMsg, subject: "[${getBuildBranch()}][d] Quarkus 3 Pipeline",
                to: env.KOGITO_CI_EMAIL_TO
}

List getDefaultBuildParams() {
    buildBranchName = buildBranchName ?: getBuildBranch()
    List params = []
    addStringParam(params, 'DISPLAY_NAME', env.NIGHTLY_TAG)
    addBooleanParam(params, 'SEND_NOTIFICATION', true)
    addBooleanParam(buildParams, 'SKIP_TESTS', params.SKIP_TESTS)
    addBooleanParam(buildParams, 'SKIP_INTEGRATION_TESTS', params.SKIP_TESTS)
    return params
}

String getBuildBranch() {
    return env.GIT_BRANCH_NAME
}
