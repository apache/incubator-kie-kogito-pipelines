import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'ubuntu'
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    // environment {
    // Some generated env is also defined into ./dsl/jobs.groovy file
    // }

    stages {
        stage('Checkout repo') {
            steps {
                script {
                    deleteDir()
                    checkout(githubscm.resolveRepository('kogito-pipelines', 'apache', 'main', false))
                }
            }
        }
        stage('Build image') {
            steps {
                script {
                    dir('kogito-operator-jenkins-node') {
                        sh 'cekit -v build docker'
                    }
                }
            }
        }
        stage('Tag and push') {
            steps {
                script {
                    String version = ''
                    dir('kogito-operator-jenkins-node') {
                        version = sh(returnStdout:true, script: 'grep ^version: image.yaml | awk -F\\" \'{print $2}\'').trim()
                    }
                    echo "Got version for tagging -> ${version}"

                    sh """
                        docker tag kogito-operator-jenkins-node:latest quay.io/kiegroup/kogito-operator-jenkins-node:${version}
                        docker tag kogito-operator-jenkins-node:latest quay.io/kiegroup/kogito-operator-jenkins-node:latest
                    """

                    withCredentials([usernamePassword(credentialsId: 'nightly_kogito', usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
                        sh "docker login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} quay.io"
                    }

                    sh """
                        docker push quay.io/kiegroup/kogito-operator-jenkins-node:${version}
                        docker push quay.io/kiegroup/kogito-operator-jenkins-node:latest
                    """
                }
            }
        }
    }
}
