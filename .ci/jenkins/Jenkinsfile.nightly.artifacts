import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

ARTIFACTS_REPOSITORIES = [
    'drools' : [:],
    'kogito-runtimes' : [:],
    'kogito-apps' : [:],
    'kogito-examples' : [
        build : [
            extraParams : [ UPDATE_NIGHTLY_BRANCH: booleanParam(name: 'UPDATE_NIGHTLY_BRANCH', value: true) ]
        ]
    ],
    'optaplanner' : [:],
    'optaweb-vehicle-routing' : [:],
    'optaweb-employee-rostering' : [:],
    'optaplanner-quickstarts' : [
        deploy : [
            disabled : true
        ]
    ]
]

BUILD_AND_TEST_JOB_ID = 'build-and-test'
DEPLOY_ARTIFACTS_JOB_ID = 'deploy-artifacts'

// Map of executed jobs
// See https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
// for more options on built job entity
JOBS = [:]

// Should be multibranch pipeline
pipeline {
    // agent {
    //     label 'kie-rhel7 && !master'
    // }
    agent any

    options {
        timeout(time: 1380, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Some generated env is also defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        IMAGE_NAME_NIGHTLY_SUFFIX = 'nightly'

        // Use branch name in nightly tag as we may have parallel main and release branch builds
        NIGHTLY_TAG = """${getGitBranch()}-${sh(
                returnStdout: true,
                script: 'date -u "+%Y-%m-%d"'
            ).trim()}"""
}

    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "nightly tag is ${env.NIGHTLY_TAG}"

                    currentBuild.displayName = env.NIGHTLY_TAG
                }
            }
        }

        // Parallel on all artifacts jobs (they should be using the build-chain)
        // Build and test and if ok, deploy
        stage('Build & Deploy artifacts') {
            steps {
                script {
                    Map parallelJobs = [:]

                    ARTIFACTS_REPOSITORIES.each { repo, repoConfig ->
                        parallelJobs.put("Build & Deploy ${repo}", {
                            boolean buildOk = false

                            if (!repoConfig.build?.disabled) {
                                stage("Build&Test ${repo}") {
                                    // Call build & test job
                                    def buildParams = getDefaultBuildParams()
                                    addSkipTestsParam(buildParams)
                                    addSkipIntegrationTestsParam(buildParams)
                                    if (repoConfig.build?.extraParams) {
                                        buildParams.putAll(repoConfig.build.extraParams)
                                    }

                                    String jobName = buildJob(repo, BUILD_AND_TEST_JOB_ID, buildParams)
                                    buildOk = isJobSucceeded(jobName) || isJobUnstable(jobName)
                                }
                            }

                            if (buildOk && !repoConfig.deploy?.disabled && !isNative()) {
                                stage("Deploy ${repo}") {
                                    // Call deploy artifacts job
                                    def buildParams = getDefaultBuildParams()
                                    if (repoConfig.deploy?.extraParams) {
                                        buildParams.putAll(repoConfig.deploy.extraParams)
                                    }

                                    buildJob(repo, DEPLOY_ARTIFACTS_JOB_ID, buildParams)
                                }
                            }
                        })
                    }

                    // Launch in parallel
                    parallel parallelJobs
                }
            }
        }
    }
    post {
        always {
            // TODO call cloud nightly
        }
        failure {
            sendNotification("[${getGitBranch()}]")
        }
        aborted {
            sendNotification("[${getGitBranch()}]")
        }
    }
}

void sendNotification(String subject, String buildUrl = "${BUILD_URL}") {
    String notificationKey = 'Nightly'
    if (isNative()) {
        notificationKey += ' native'
        if (getNativeBuilderImage()) {
            notificationKey += ' lts'
        }
    }
    mailer.sendMarkdownTestSummaryNotification(notificationKey, subject, [env.KOGITO_CI_EMAIL_TO], '', buildUrl)
}

String buildJob(String repo, String jobNameSuffix, Map buildParams) {
    String jobName = constructJobName(repo, jobNameSuffix)
    echo "Build ${jobName} with params ${buildParams.values()}"

    def job = build(job: "./${jobName}", parameters: buildParams.values(), wait: true, propagate: false)
    registerJob(jobName, job)

    // Set Unstable if job did not succeed
    if (!isJobSucceeded(jobName)) {
        unstable("Job ${jobName} finished with result ${getJobResult(jobName)}")
        sendNotification("[${getGitBranch()}] ${getRepoNameCamelCase(repo)}", getJobUrl(jobName))
    }

    return jobName
}

String constructJobName(repo, jobNameSuffix) {
    return "${repo}.${jobNameSuffix}"
}

def registerJob(String jobName, def job) {
    JOBS[jobName] = job
}

def getJob(String jobName) {
    return JOBS[jobName]
}

String getJobUrl(String jobName) {
    echo "getJobUrl for ${jobName}"
    return getJob(jobName)?.absoluteUrl ?: ''
}

String getJobResult(String jobName) {
    echo "getJobResult for ${jobName}"
    return getJob(jobName)?.result ?: ''
}

boolean isJobSucceeded(String jobName) {
    return getJobResult(jobName) == 'SUCCESS'
}

boolean isJobUnstable(String jobName) {
    return getJobResult(jobName) == 'UNSTABLE'
}

Map getDefaultBuildParams() {
    Map params = [:]
    addStringParam(params, 'DISPLAY_NAME', "${env.NIGHTLY_TAG}")
    return params
}

void addSkipTestsParam(buildParams) {
    addBooleanParam(buildParams, 'SKIP_TESTS', params.SKIP_TESTS)
}

void addSkipIntegrationTestsParam(buildParams) {
    addBooleanParam(buildParams, 'SKIP_INTEGRATION_TESTS', params.SKIP_TESTS)
}

void addStringParam(Map params, String key, String value) {
    params.put(key, string(name: key, value: value))
}

void addBooleanParam(Map params, String key, boolean value) {
    params.put(key, booleanParam(name: key, value: value))
}

String getGitBranch() {
    return env.GIT_BRANCH_NAME
}

boolean isNative() {
    return env.NATIVE ? env.NATIVE.toBoolean() : false
}

String getNativeBuilderImage() {
    return env.NATIVE_BUILDER_IMAGE
}

String getRepoNameCamelCase(String repoName) {
    List words = repoName.split('-') as List
    return words.collect { it.isEmpty() ? it : it.substring(0, 1).toUpperCase() + it.substring(1).toLowerCase() }.join(' ')
}
