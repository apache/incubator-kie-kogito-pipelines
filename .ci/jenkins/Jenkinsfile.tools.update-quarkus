import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    assert getNewVersion()

                    currentBuild.displayName = getNewVersion()
                }
            }
        }

        stage('Update quarkus version on main kogito-pipelines') {
            steps {
                script {
                    dir('kogito-pipelines') {
                        deleteDir()
                        checkout(githubscm.resolveRepository('kogito-pipelines', getGitAuthor(), getBuildBranch(), false))

                        githubscm.createBranch(getPRBranch())

                        // Perform updates
                        // Not using `readYaml` here to avoid a full reformat of 
                        sh """
                            sed -i -E "s|(.*quarkus_version:).*|\\1 '${getNewVersionBranch()}'|g" 'dsl/config/branch.yaml'
                            sed -i -E "s|(.*targetExpression:).*(# <quarkus-branch>.*)|\\1 \\"process.env.QUARKUS_BRANCH ? process.env.QUARKUS_BRANCH : '${getNewVersionBranch()}'\\" \\2|g" '.ci/project-dependencies-quarkus.yaml'
                        """

                        if (githubscm.isThereAnyChanges()) {
                            String commitMsg = "[${getBuildBranch()}] Bump quarkus version to ${getNewVersion()}"
                            githubscm.commitChanges(commitMsg)
                            githubscm.pushObject('origin', getPRBranch(), getAuthorCredsId())

                            String prLink = githubscm.createPR(commitMsg, 'Please review and merge', getBuildBranch(), getAuthorCredsId())
                            echo "Created PR ${prLink}"

                            sendNotification("PR was created to update quarkus version to ${getNewVersion()}.\nPlease review and merge ${prLink}")
                        } else {
                            echo "No changes to commit. No PR is created !"
                        }
                    }
                }
            }
        }

        stage('Call update quarkus jobs') {
            steps {
                script {
                    [ 'drools', 'optaplanner', 'optaplanner-quickstarts', 'kogito-runtimes', 'kogito-examples' ].each { repo ->
                        launchUpdateQuarkusJob(repo)
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            script {
                sendErrorNotification()
            }
        }
        cleanup {
            cleanWs()
        }
    }
}

void sendNotification(String body) {
    emailext body: "**Quarkus version update job**\n${body}",
             subject: "[${getBuildBranch()}] ${getNotificationJobName()}",
             to: env.KOGITO_CI_EMAIL_TO
}

void sendErrorNotification() {
    sendNotification("Job #${BUILD_NUMBER} was: **${currentBuild.currentResult}**\nPlease look here: ${BUILD_URL}")
}

void launchUpdateQuarkusJob(String repo) {
    println "[INFO] Launch Update quarkus job for repo ${repo}"

    String jobName = "update-quarkus-${repo}"
    List jobParams = []
    jobParams.add(stringParam(name: 'NEW_VERSION', value: getNewVersion()))

    echo "Build ./${jobName} with parameters ${jobParams}"
    build(job: "./${jobName}", parameters: jobParams, wait: false)
}

String getNewVersion() {
    return params.NEW_VERSION
}

String getNewVersionBranch() {
    Integer[] versionSplit = util.parseVersion(getNewVersion())
    return "${versionSplit[0]}.${versionSplit[1]}"
}

String getBuildBranch() {
    return "${BUILD_BRANCH_NAME}"
}

String getGitAuthor() {
    return "${GIT_AUTHOR}"
}

String getPRBranch() {
    return "bump-${getPRPrefixBranch() ?: getBuildBranch()}-quarkus-${getNewVersion()}"
}

String getPRPrefixBranch() {
    return env.PR_PREFIX_BRANCH
}

String getAuthorCredsId() {
    return "${GIT_AUTHOR_CREDS_ID}"
}

String getNotificationJobName() {
    return "${NOTIFICATION_JOB_NAME}"
}

void updateYaml(String filePath, Closure updateClosure) {
    def yamlData = readYaml(file: filePath)
    updateClosure(yamlData)
    writeYaml(file: filePath, data: yamlData, overwrite: true)
}