@Library('jenkins-pipeline-shared-libraries')_

import org.jenkinsci.plugins.workflow.libs.Library
import org.kie.jenkins.MavenCommand

AGENT_LABEL="kie-rhel7 && kie-mem8g && !built-in"
MVN_TOOL="kie-maven-3.8.6"
JDK_TOOL="kie-jdk11"
VERSION="${params.KOGITO_VERSION}"
COMMAND="${params.COMMAND}"
PROJECT='kogito'
FORK_GIT_AUTOR='kie-ci'
pipelinesBaseBranch="${env.GIT_BRANCH_NAME}"
quarkusBaseBranch='main'
kogitoPipelinesRepo="kogito-pipelines"
quarkusPlatformRepo="quarkus-platform"

pipeline {

    agent {
        label "$AGENT_LABEL"
    }

    options{
        timestamps()
    }

    tools {
        maven "$MVN_TOOL"
        jdk "$JDK_TOOL"
    }

    stages{
        stage('CleanWorkspace') {
            steps {
                cleanWs()
            }
        }
		stage('clone kogito-pipelines') {
			steps{
				script{
                    dir(kogitoPipelinesRepo){
                        checkoutRepo(kogitoPipelinesRepo, 'kiegroup', pipelinesBaseBranch)
                    }
				}
			}
		}
        stage('clone quarkus-platform and update kogito version: stage') {
			when {
				expression {COMMAND	== 'stage'}
			}
            steps {
                script {
                    String prLink = null
                    String commitMsg = getCommitMessage()
                    String localBranch = getLocalBranchName()
                    dir(quarkusPlatformRepo){
                        checkoutRepo(quarkusPlatformRepo, 'quarkusio', quarkusBaseBranch)
                        githubscm.forkRepo()
                        githubscm.createBranch(localBranch)
                        // run update-quarkus-platform.sh with 'stage'
                        sh "../${kogitoPipelinesRepo}/tools/update-quarkus-platform.sh -s -v ${VERSION} -f ${FORK_GIT_AUTOR} -h ${localBranch} -n -r ${COMMAND}"
                        sh "git status"
                        // Add changed files, commit and open PR
                        prLink = commitAndCreatePR(commitMsg, { sh "git add --all" }, localBranch, quarkusBaseBranch)
                    }
                }
            }
        }
        stage('update kogito version: finalize') {
			when {
				expression {COMMAND	== 'finalize'}
			}
            steps {
                script {
                    String commitMsg = getCommitMessage()
                    String localBranch = getLocalBranchName()
                    dir(quarkusPlatformRepo){
                        checkoutRepo(quarkusPlatformRepo, 'quarkusio', quarkusBaseBranch)
                        githubscm.forkRepo()
                        sh "git fetch origin"
                        sh "git checkout ${localBranch}"
                        // run update-quarkus-platform.sh with 'finalize'
                        sh "../${kogitoPipelinesRepo}/tools/update-quarkus-platform.sh -s -d -v ${VERSION} -f ${FORK_GIT_AUTOR} -h ${localBranch} -n -r ${COMMAND}"
                        // squash commits
                        branchName = sh (script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                        mergeName = sh (script: "git merge-base main ${branchName}", returnStdout: true).trim()
                        sh "git reset ${mergeName}"
                        sh "git add -A"
                        sh "git commit -m \"${commitMsg}\" "
                        withCredentials([usernamePassword(credentialsId: ${FORK_GIT_AUTOR}, usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                            githubscm.setUserConfig(FORK_GIT_AUTOR)
                            sh("git config --local credential.helper \"!f() { echo username=\\$GITHUB_USER; echo password=\\$GITHUB_TOKEN; }; f\"")
                            sh "git push --force-with-lease"
                        }
                    }
                }
            }
        }
    }
}

String commitAndCreatePR(String commitMsg, Closure precommit, String localBranch, String targetBranch) {
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
    githubscm.commitChanges(commitMsg, precommit)
    githubscm.pushObject('origin', localBranch)
    return githubscm.createPrAsDraft(commitMsg, prBody, targetBranch)
}

void checkoutRepo(String repo, String GIT_AUTHOR, String branch) {
    checkout(githubscm.resolveRepository(repo, GIT_AUTHOR, branch, false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

String getCommitMessage() {
    return "bump up ${PROJECT} to ${VERSION}"
}

String getLocalBranchName() {
    return "bump-${PROJECT}-${VERSION}"
}
