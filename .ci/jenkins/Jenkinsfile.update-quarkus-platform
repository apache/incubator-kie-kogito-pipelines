import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

AGENT_LABEL="kie-rhel7 && kie-mem8g && !built-in"
kogitoPipelinesRepo="kogito-pipelines"
quarkusPlatformRepo="quarkus-platform"

pipeline {

    agent {
        label "${AGENT_LABEL}"
    }

    options{
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
    }

    tools {
        maven "${BUILD_MAVEN_TOOL}"
        jdk "${BUILD_JDK_TOOL}"
    }

    stages{
        stage('CleanWorkspace') {
            steps {
                cleanWs()
            }
        }
		stage('Initialize') {
			steps{
				script{
                    dir(kogitoPipelinesRepo){
                        checkoutRepo(kogitoPipelinesRepo, 'kiegroup', env.PIPELINES_BRANCH_NAME)
                    }

                    dir(quarkusPlatformRepo){
                        checkoutRepo(quarkusPlatformRepo, 'quarkusio', env.QUARKUS_BRANCH_NAME)
                        githubscm.forkRepo("${FORK_GIT_AUTHOR_CREDS_ID}")
                    }
				}
			}
		}
        stage('stage') {
			when {
				expression { getCommand() == 'stage' }
			}
            steps {
                script {
                    String prLink = null
                    String commitMsg = getCommitMessage()
                    String localBranch = getLocalBranchName()
                    dir(quarkusPlatformRepo){
                        githubscm.createBranch(localBranch)
                        // run update-quarkus-platform.sh with 'stage'
                        sh "${WORKSPACE}/${kogitoPipelinesRepo}/tools/update-quarkus-platform.sh -p ${getProjectName()} -s -v ${getNewVersion()} -f ${FORK_GIT_AUTHOR} -h ${localBranch} -n -r ${getCommand()}"
                        
                        sh "git status"

                        // Add changed files, commit and open PR
                        def prBody = "Generated by Kogito pipelines"
                        githubscm.commitChanges(commitMsg, { sh "git add --all" })
                        githubscm.pushObject('origin', localBranch, "${FORK_GIT_AUTHOR_CREDS_ID}")
                        prLink = githubscm.createPrAsDraft(commitMsg, prBody, env.QUARKUS_BRANCH_NAME, "${FORK_GIT_AUTHOR_CREDS_ID}")
                    }
                }
            }
        }
        stage('finalize') {
			when {
				expression { getCommand() == 'finalize' }
			}
            steps {
                script {
                    String commitMsg = getCommitMessage()
                    String localBranch = getLocalBranchName()
                    dir(quarkusPlatformRepo){
                        sh "git fetch origin"
                        sh "git checkout ${localBranch}"
                        
                        // run update-quarkus-platform.sh with 'finalize'
                        sh "${WORKSPACE}/${kogitoPipelinesRepo}/tools/update-quarkus-platform.sh -p ${getProjectName()} -s -d -v ${getNewVersion()} -f ${FORK_GIT_AUTHOR} -h ${localBranch} -n -r ${getCommand()}"
                        
                        squashCommits(env.QUARKUS_BRANCH_NAME, commitMsg)

                        githubscm.pushObject('--force-with-lease origin', localBranch, "${FORK_GIT_AUTHOR_CREDS_ID}")
                    }
                }
            }
        }
    }
}

String commitAndCreatePR(String commitMsg, Closure precommit, String localBranch, String targetBranch) {
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
    githubscm.commitChanges(commitMsg, precommit)
    githubscm.pushObject('origin', localBranch)
    return githubscm.createPrAsDraft(commitMsg, prBody, targetBranch)
}

def squashCommits(String baseBranch, String newCommitMsg) {
    String branchName = sh (script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
    String mergeName = sh (script: "git merge-base ${baseBranch} ${branchName}", returnStdout: true).trim()
    sh "git reset ${mergeName}"
    sh "git add -A"
    sh "git commit -m \"${commitMsg}\" "
}

void checkoutRepo(String repo, String GIT_AUTHOR, String branch) {
    checkout(githubscm.resolveRepository(repo, GIT_AUTHOR, branch, false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

String getCommitMessage() {
    return "Bump up ${getProjectName()} to ${getNewVersion()}"
}

String getLocalBranchName() {
    return params.PR_BRANCH ?: "bump-${getProjectName()}-${getNewVersion()}"
}

String getNewVersion() {
    return params.NEW_VERSION
}

String getCommand() {
    return params.COMMAND
}

String getProjectName() {
    return env.PROJECT_NAME
}
