import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand
import org.kie.jenkins.MavenSettingsUtils

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
        }
    }

    options {
        timestamps()
        timeout(time: 240, unit: 'MINUTES')
    }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        SETTINGS_FILE = "${WORKSPACE}/quarkus-platform/.github/mvn-settings.xml"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs(disableDeferredWipeout: true)
                    sh 'printenv'

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }
                }
            }
        }
        stage('Checkout artifacts\'s repositories') {
            steps {
                script {
                    dir('drools') {
                        deleteDir()
                        checkout(githubscm.resolveRepository('incubator-kie-drools', getGitAuthor(), getTargetBranch(7), false))
                    }
                    dir('kogito-runtimes') {
                        deleteDir()
                        checkout(githubscm.resolveRepository('incubator-kie-kogito-runtimes', getGitAuthor(), getGitBranch(), false))
                    }
                    dir('kogito-apps') {
                        deleteDir()
                        checkout(githubscm.resolveRepository('incubator-kie-kogito-apps', getGitAuthor(), getGitBranch(), false))
                    }
                    dir('optaplanner') {
                        deleteDir()
                        // Get current corresponding branch and if not working, latest tag
                        String opBranch = getTargetBranch(7)
                        try {
                            checkout(githubscm.resolveRepository('incubator-kie-optaplanner', getGitAuthor(), opBranch, false))
                        } catch(err) {
                            echo "Error checking out ${opBranch}. Fallback to latest tag."
                            String latestTag = githubscm.getLatestTag("${opBranch.split("\\.")[0]}\\.")
                            echo "Got latest tag = ${latestTag}"
                            checkout(githubscm.resolveRepository('incubator-kie-optaplanner', getGitAuthor(), latestTag, false))
                        }
                    }
                }
            }
        }
        stage('Retrieve versions') {
            steps {
                script {
                    dir('drools') {
                        env.DROOLS_VERSION = sh(script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -pl :drools-parent -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
                        assert env.DROOLS_VERSION : 'Cannot find the Drools version.'
                    }
                    dir('kogito-runtimes') {
                        env.KOGITO_VERSION = sh(script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -pl :kogito-runtimes -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
                        env.QUARKUS_VERSION = sh(script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -pl :kogito-dependencies-bom -Dexpression=version.io.quarkus -q -DforceStdout', returnStdout: true).trim()
                        assert env.KOGITO_VERSION : 'Cannot find the Kogito version.'
                        assert env.QUARKUS_VERSION : 'Cannot find the Quarkus version.'
                    }
                    dir('optaplanner') {
                        env.OPTAPLANNER_VERSION = sh(script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -pl :optaplanner-parent -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
                        assert env.OPTAPLANNER_VERSION : 'Cannot find the OptaPlanner version.'
                    }

                    echo "Configured Drools version ${env.DROOLS_VERSION}"
                    echo "Configured Kogito version ${env.KOGITO_VERSION}"
                    echo "Configured Quarkus version ${env.QUARKUS_VERSION}"
                    echo "Configured OptaPlanner version ${env.OPTAPLANNER_VERSION}"
                }
            }
        }
        stage('Prepare quarkus-platform') {
            steps {
                script {
                    dir('quarkus-platform') {
                        deleteDir()

                        String quarkusBranch = env.QUARKUS_VERSION.split("\\.")[0] + '.' + env.QUARKUS_VERSION.split("\\.")[1]
                        echo "Use quarkus branch ${quarkusBranch}"
                        checkout(githubscm.resolveRepository('quarkus-platform', 'quarkusio', quarkusBranch, false))

                        // Update platform mvn settings file
                        // We use platform settings file to be sure to get all needed artifacts
                        MavenSettingsUtils.setRepositoryInSettings(this, env.SETTINGS_FILE, 'kogito-staging', 'https://repository.apache.org/service/local/staging/deploy/maven2/')
                        MavenSettingsUtils.setRepositoryInSettings(this, env.SETTINGS_FILE, 'kogito-public', 'https://repository.apache.org/content/groups/public/')

                        String localQuarkusPlatformVersion = sh(script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
                        echo "Platform Quarkus version ${localQuarkusPlatformVersion}"

                        // Set Drools/OP & Kogito versions
                        maven.mvnSetVersionProperty('kogito-quarkus.version', env.KOGITO_VERSION)
                        maven.mvnSetVersionProperty('drools-quarkus.version', env.DROOLS_VERSION)
                        maven.mvnSetVersionProperty('optaplanner-quarkus.version', env.OPTAPLANNER_VERSION)
                        maven.mvnSetVersionProperty('quarkus.version', env.QUARKUS_VERSION)

                        // Update platform version
                        localQuarkusPlatformVersion = "kogito-${env.KOGITO_VERSION}"
                        echo "Set quarkus platform version ${localQuarkusPlatformVersion}"
                        maven.mvnVersionsSet(localQuarkusPlatformVersion, true)
                    }
                }
            }
        }
        stage('Install local artifacts') {
            steps {
                script {
                    [ 'drools', 'kogito-runtimes', 'kogito-apps', 'optaplanner'].each { directory ->
                        echo "Install ${directory} artifacts"
                        dir(directory) {
                            new MavenCommand(this, ['-fae', '-ntp'])
                                .withSettingsXmlFile(env.SETTINGS_FILE)
                                .withOptions(env.BUILD_MVN_OPTS ? [ env.BUILD_MVN_OPTS ] : [])
                                .withOptions(env.BUILD_MVN_OPTS_UPSTREAM ? [ env.BUILD_MVN_OPTS_UPSTREAM ] : [])
                                .withProperty('quickly')
                                .run('install')
                        }
                    }
                }
            }
        }
        stage('Deploy quarkus-platform') {
            steps {
                script {
                    dir('quarkus-platform') {
                        new MavenCommand(this, ['-fae', '-ntp'])
                            .withSettingsXmlFile(env.SETTINGS_FILE)
                            .withProperty('altDeploymentRepository', "local::default::file://${getMavenDeployLocalDir()}")
                            .withProperty('enforcer.skip', true)
                            .withProperty('maven.test.failure.ignore', true)
                            .run('deploy')

                        // Upload to specific repository with credentials
                        // Removed deployment to reposiory as no repository defined for now ...
                        // String mavenDeployRepositoryZipUrl = "${QUARKUS_PLATFORM_NEXUS_URL.replaceAll('/content/', '/service/local/').replaceFirst('/*$', '')}/content-compressed"
                        // maven.uploadLocalArtifacts("${QUARKUS_PLATFORM_NEXUS_CREDS}", getMavenDeployLocalDir(), mavenDeployRepositoryZipUrl)
                    }
                }
            }
            post {
                always {
                    junit(testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml, **/target/invoker-reports/**/*.xml', allowEmptyResults: true)
                }
                unsuccessful {
                    script {
                        util.archiveConsoleLog('', 300)
                    }
                }
            }
        }

    // Tests of platform should be done in a separate job
    }
    post {
        cleanup {
            cleanWs()
        }
        unsuccessful {
            sendErrorNotification()
        }
    }
}

void checkoutRepo(String repo, String gitAuthor, String branch, String gitAuthorCredsId) {
    checkout(githubscm.resolveRepository(repo, gitAuthor, branch, false, gitAuthorCredsId))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

String getGitBranch() {
    return env.GIT_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

void sendNotification(String body) {
    emailext body: "${body}",
             subject: "[${getGitBranch()}] Kogito Quarkus Platform",
             to: env.KOGITO_CI_EMAIL_TO
}

void sendErrorNotification() {
    sendNotification("Job #${BUILD_NUMBER} was: **${currentBuild.currentResult}**\nPlease look here: ${BUILD_URL}")
}

String getMavenDeployLocalDir() {
    return "${WORKSPACE}/maven_deploy_dir"
}

String getTargetBranch(Integer addToMajor) {
    String targetBranch = getGitBranch()
    List versionSplit = targetBranch.split("\\.") as List

    if (versionSplit[0].isNumber()) {
        targetBranch = "${Integer.parseInt(versionSplit[0]) + addToMajor}.${versionSplit.tail().join('.')}"
    } else {
        echo "Cannot parse targetBranch as release branch so going further with current value: ${targetBranch}"
    }
    return targetBranch
}
