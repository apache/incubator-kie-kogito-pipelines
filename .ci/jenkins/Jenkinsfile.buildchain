@Library('jenkins-pipeline-shared-libraries')_

agentLabel = "${env.ADDITIONAL_LABEL?.trim() ? ADDITIONAL_LABEL : 'kie-rhel7 && kie-mem16g'} && !built-in"
timeoutValue = env.ADDITIONAL_TIMEOUT?.trim() ?: "180"
jdkTool = env.BUILD_JDK_TOOL?.trim() ?: 'kie-jdk11'
mavenTool = env.BUILD_MAVEN_TOOL?.trim() ?: 'kie-maven-3.8.6'

prType = env.BUILDCHAIN_PR_TYPE?.trim() ?: 'pr'
settingsXmlId = isPR() || isFDB() ? 'kogito_pr_settings' : 'kogito_release_settings'

disableSonarCloudAnalysis = env.DISABLE_SONARCLOUD ? env.DISABLE_SONARCLOUD.toBoolean() : false
downstreamBuild = env.DOWNSTREAM_BUILD ? env.DOWNSTREAM_BUILD.toBoolean() : false
lts = env.LTS ? env.LTS.toBoolean() : false

buildChainConfigBranch = env.BUILDCHAIN_CONFIG_BRANCH ?: '\${BRANCH:main}'
buildChainAdditionalArguments = env.BUILDCHAIN_PROJECT ? "-sp=${env.BUILDCHAIN_PROJECT.trim()}" : ''

notificationJobName = env.NOTIFICATION_JOB_NAME ?: 'PR'

pipeline {
    agent {
        label agentLabel
    }
    tools {
        nodejs 'nodejs-12.16.3'
    }
    options {
        timestamps ()
        timeout(time: timeoutValue, unit: 'MINUTES')
    }
    environment {
        FIREFOX_FOLDER = '/opt/tools/firefox-60esr'
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    sh 'printenv > env_props'
                    archiveArtifacts artifacts: 'env_props'
                }
            }
        }
        stage('check space before build') {
            steps {
                script {
                    util.spaceLeft()
                }
            }
        }
        stage('Install build-chain tool') {
            steps {
                script {
                    println '[INFO] Getting build-chain version from composite action file'
                    def buildChainVersion = buildChain.getBuildChainVersionFromCompositeActionFile()
                    if ([null, 'null'].contains(buildChainVersion)) {
                        def errorMessage = "[ERROR] The build-chain version can't be recovered. Please contact administrator"
                        println errorMessage
                        error(errorMessage)
                    }
                    println "[INFO] build-chain version recovered '${buildChainVersion}'"
                    sh "npm install -g @kie/build-chain-action@${buildChainVersion} -registry=${NPM_REGISTRY_URL}"
                }
            }
        }
        stage('Build projects') {
            tools {
                jdk jdkTool
                maven mavenTool
            }
            steps {
                script {
                    env.BUILD_MVN_OPTS_CURRENT = env.BUILD_MVN_OPTS_CURRENT ?: ''
                    env.BUILD_MVN_OPTS_CURRENT += isSonarCloudAnalysis() ? ' -Prun-code-coverage' : ''

                    def buildChainActionInfo = getBuildChainActionInfo()

                    configFileProvider([configFile(fileId: settingsXmlId, variable: 'MAVEN_SETTINGS_FILE')]) {
                        withCredentials([string(credentialsId: 'kie-ci1-token', variable: 'GITHUB_TOKEN')]) {
                            sh "build-chain-action -token=${GITHUB_TOKEN} -df='https://raw.githubusercontent.com/kiegroup/kogito-pipelines/${buildChainConfigBranch}/.ci/${buildChainActionInfo.file}' -folder='bc' build ${buildChainActionInfo.action} -url=${env.ghprbPullLink} ${buildChainActionInfo.arguments} --skipParallelCheckout -cct '(^mvn .*)||\$1 -s ${MAVEN_SETTINGS_FILE} -Dmaven.wagon.http.ssl.insecure=true -Dmaven.test.failure.ignore=true'"
                        }
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'
                    archiveArtifacts artifacts: '**/*.log,**/cypress/screenshots/**,**/cypress/videos/**', allowEmptyArchive: true
                }
                unsuccessful {
                    script {
                        util.archiveConsoleLog('', 300)
                    }
                }
            }
        }
        stage('Sonar analysis') {
            tools {
                jdk jdkTool
                maven mavenTool
            }
            steps {
                script {
                    if (isSonarCloudAnalysis()) {
                        def project = (env.BUILDCHAIN_PROJECT ? util.getProjectGroupName(env.BUILDCHAIN_PROJECT) : util.getProjectTriggeringJob())[1]
                        // Project should define a `clone` for the current command so that the pom can be found for sonarcloud analysis
                        // Else this next step will fail
                        dir("bc/kiegroup_${project.replaceAll('-', '_')}/${project}") {
                            maven.runMavenWithSettingsSonar(settingsXmlId, "-e -nsu validate -Psonarcloud-analysis -Denforcer.skip=true ${env.SONARCLOUD_ANALYSIS_MVN_OPTS ?: ''}", 'SONARCLOUD_TOKEN', 'sonar_analysis.maven.log')
                        }
                    } else {
                        println '[INFO] No sonar analysis execution.'
                    }
                }
            }
        }
        stage('check space after build') {
            steps {
                script {
                    util.spaceLeft()
                }
            }
        }
    }
    post {
        unsuccessful {
            script {
                if (isPR()) {
                    pullrequest.postComment(util.getMarkdownTestSummary(notificationJobName, '', "${BUILD_URL}", 'GITHUB'))
                }
            }
        }
        cleanup {
            script {
                // Clean also docker in case of usage of testcontainers lib
                util.cleanNode('docker')
            }
        }
    }
}

boolean isPR() {
    return prType == 'pr'
}

boolean isFDB() {
    return prType == 'fdb'
}

boolean isSingle() {
    return prType == 'single'
}

def getBuildChainActionInfo() {
    def definitionFile = lts ? 'pull-request-lts-config.yaml' : 'pull-request-config.yaml'
    return isFDB() ? [action: 'fd', file: definitionFile, arguments: buildChainAdditionalArguments] :
                     isSingle() ? [action: 'single', file: definitionFile, arguments: buildChainAdditionalArguments] :
                     [action: 'pr', file: definitionFile, arguments: buildChainAdditionalArguments]
}

boolean isSonarCloudAnalysis() {
    if (disableSonarCloudAnalysis) {
        return false
    }
    if (isPR()) {
        return !downstreamBuild
    }
    return false
}