@Library('jenkins-pipeline-shared-libraries')_

agentLabel = "${env.ADDITIONAL_LABEL?.trim() ?: 'kie-rhel7 && kie-mem16g'} && !master"
timeoutValue = env.ADDITIONAL_TIMEOUT?.trim() ?: '180'
jdkTool = env.BUILD_JDK_TOOL?.trim() ?: 'kie-jdk11'
mavenTool = env.BUILD_MAVEN_TOOL?.trim() ?: 'kie-maven-3.8.1'

buildChainType = env.BUILDCHAIN_PR_TYPE?.trim() ?: 'pr'
buildChainProject = env.BUILDCHAIN_PROJECT?.trim()
settingsXmlId = isPRBuildChainType() || isFDBBuildChainType() ? 'kogito_pr_settings' : 'kogito_release_settings'

enableSonarCloudAnalysis = env.ENABLE_SONARCLOUD ? env.ENABLE_SONARCLOUD.toBoolean() : false
downstreamBuild = env.DOWNSTREAM_BUILD ? env.DOWNSTREAM_BUILD.toBoolean() : false
native_build = env.NATIVE ? env.NATIVE.toBoolean() : false
native_builder_image = env.NATIVE_BUILDER_IMAGE ?: ''

buildChainConfigBranch = env.BUILDCHAIN_CONFIG_BRANCH ?: '\${BRANCH:main}'
buildChainDefinitionFile = env.QUARKUS_BRANCH ? 'pull-request-quarkus-config.yaml' : 'pull-request-config.yaml'
buildChainAction = isFDBBuildChainType() ? 'fd' : buildChainType
buildChainAdditionalArguments = buildChainProject ? ["-sp=${buildChainProject}"] : []
if (isBranchBuildChainType()) {
    buildChainAdditionalArguments.add("-p=${buildChainProject.trim()}")
    buildChainAdditionalArguments.add("-b=${env.GIT_BRANCH_NAME.trim()}")
    buildChainAdditionalArguments.add("-g=${env.GIT_AUTHOR.trim()}")
} else {
    buildChainAdditionalArguments.add("-url=${env.ghprbPullLink}")
}

notificationJobName = env.NOTIFICATION_JOB_NAME ?: 'PR'
skipTests = params.SKIP_TESTS ?: false
skipIntegrationTests = params.SKIP_IT_TESTS ?: false
native_build = env.NATIVE ? env.NATIVE.toBoolean() : false
native_builder_image = env.NATIVE_BUILDER_IMAGE ?: ''

pipeline {
    agent {
        label agentLabel
    }
    tools {
        nodejs 'nodejs-12.16.3'
    }
    options {
        timestamps ()
        timeout(time: timeoutValue, unit: 'MINUTES')
    }
    environment {
        FIREFOX_FOLDER = '/opt/tools/firefox-60esr'
        MAVEN_OPTS = '-Xms1024m -Xmx6g -XX:PermSize=128m -XX:MaxPermSize=512m'
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    sh 'printenv > env_props'
                    archiveArtifacts artifacts: 'env_props'
                }
            }
        }
        stage('check space before build') {
            steps {
                script {
                    util.spaceLeft()
                }
            }
        }
        stage('Install build-chain tool') {
            steps {
                script {
                    println '[INFO] Getting build-chain version from composite action file'
                    def buildChainVersion = buildChain.getBuildChainVersionFromCompositeActionFile()
                    if ([null, 'null'].contains(buildChainVersion)) {
                        def errorMessage = "[ERROR] The build-chain version can't be recovered. Please contact administrator"
                        println errorMessage
                        error(errorMessage)
                    }
                    println "[INFO] build-chain version recovered '${buildChainVersion}'"
                    sh "npm install -g @kie/build-chain-action@${buildChainVersion}${env.NPM_REGISTRY_URL ? " -registry=${NPM_REGISTRY_URL}" : ''}"
                }
            }
        }
        stage('Build projects') {
            tools {
                jdk jdkTool
                maven mavenTool
            }
            steps {
                script {
                    env.BUILD_MVN_OPTS_CURRENT = getBuildMavenOptsCurrent()
                    echo "BUILD_MVN_OPTS_CURRENT = ${BUILD_MVN_OPTS_CURRENT}"

                    configFileProvider([configFile(fileId: settingsXmlId, variable: 'MAVEN_SETTINGS_FILE')]) {
                        withCredentials([string(credentialsId: 'kie-ci1-token', variable: 'GITHUB_TOKEN')]) {
                            sh "build-chain-action -token=${GITHUB_TOKEN} -df='https://raw.githubusercontent.com/radtriste/kogito-pipelines/${buildChainConfigBranch}/.ci/${buildChainDefinitionFile}' -folder='bc' build ${buildChainAction} ${buildChainAdditionalArguments.join(' ')} --skipParallelCheckout -cct '(^mvn .*)||\$1 -s ${MAVEN_SETTINGS_FILE} -Dmaven.wagon.http.ssl.insecure=true -Dmaven.test.failure.ignore=true'"
                        }
                    }
                }
            }
            post {
                always {
                    junit(testResults: '**/target/surefire-reports/**/*.xml,**/target/failsafe-reports/**/*.xml', allowEmptyResults: (skipTests || skipIntegrationTests))
                    archiveArtifacts(artifacts: '**/cypress/screenshots/**,**/cypress/videos/**', fingerprint: false, allowEmptyArchive: true)
                }
                unsuccessful {
                    script {
                        util.archiveConsoleLog('', 300)
                    }
                }
            }
        }
        stage('Sonar analysis') {
            when {
                expression { return enableSonarCloudAnalysis }
            }
            tools {
                jdk jdkTool
                maven mavenTool
            }
            steps {
                script {
                    def project = (buildChainProject ? util.getProjectGroupName(buildChainProject) : util.getProjectTriggeringJob())[1]
                    // Project should define a `clone` for the current command so that the pom can be found for sonarcloud analysis
                    // Else this next step will fail
                    dir("bc/kiegroup_${project.replaceAll('-', '_')}/${project}") {
                        maven.runMavenWithSettingsSonar(settingsXmlId, "-e -nsu validate -Psonarcloud-analysis -Denforcer.skip=true ${env.SONARCLOUD_ANALYSIS_MVN_OPTS ?: ''}", 'SONARCLOUD_TOKEN', 'sonar_analysis.maven.log')
                    }
                }
            }
        }
        stage('check space after build') {
            steps {
                script {
                    util.spaceLeft()
                }
            }
        }
    }
    post {
        unsuccessful {
            script {
                if (shouldNotify()) {
                    pullrequest.postComment(util.getMarkdownTestSummary(notificationJobName, '', "${BUILD_URL}", 'GITHUB'))
                }
            }
        }
        cleanup {
            script {
                // Clean also docker in case of usage of testcontainers lib
                util.cleanNode('docker')
            }
        }
    }
}

boolean isPRBuildChainType() {
    return buildChainType == 'pr'
}

boolean isFDBBuildChainType() {
    return buildChainType == 'fdb'
}

boolean isBranchBuildChainType() {
    return buildChainType == 'branch'
}

String getBuildMavenOptsCurrent() {
    List opts_current = env.BUILD_MVN_OPTS_CURRENT ? [ env.BUILD_MVN_OPTS_CURRENT ] : []
    enableSonarCloudAnalysis ? opts_current.add('-Prun-code-coverage') : null
    native_build ? opts_current.add('-Dquarkus.native.container-build=true -Dnative -Pnative') : null
    native_builder_image ? opts_current.add("-Dquarkus.native.builder-image=${native_builder_image}") : null
    skipTests ? opts_current.add('-DskipTests') : null
    skipIntegrationTests ? opts_current.add('-DskipITs') : null
    return opts_current.join(' ')
}

boolean shouldNotify() {
    return !isBranchBuildChainType()
}
