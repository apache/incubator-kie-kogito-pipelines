import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    assert getNewVersion()

                    currentBuild.displayName = getNewVersion()
                }
            }
        }

        stage('Update quarkus version in branch config') {
            steps {
                script {
                    String prBranch = getPRBranch("${SEED_BRANCH_CONFIG_FILE_GIT_BRANCH}")
                    dir("${SEED_BRANCH_CONFIG_FILE_GIT_REPOSITORY}") {
                        deleteDir()
                        checkout(githubscm.resolveRepository("${SEED_BRANCH_CONFIG_FILE_GIT_REPOSITORY}", "${SEED_BRANCH_CONFIG_FILE_GIT_AUTHOR_NAME}", "${SEED_BRANCH_CONFIG_FILE_GIT_BRANCH}", false, "${SEED_BRANCH_CONFIG_FILE_GIT_AUTHOR_CREDS_ID}"))

                        getOrCreateGitBranch(prBranch, "${SEED_BRANCH_CONFIG_FILE_GIT_AUTHOR_CREDS_ID}")

                        updateYaml("${SEED_BRANCH_CONFIG_FILE_PATH}") { branchConfig ->
                            if(branchConfig.environment?.quarkus?.branch?.version) {
                                branchConfig.environment.quarkus.branch.version = getNewVersionBranch()
                            }
                        }

                        if (githubscm.isThereAnyChanges()) {
                            String commitMsg = "[${SEED_BRANCH_CONFIG_FILE_GIT_BRANCH}] Bump quarkus version to ${getNewVersion()}"
                            githubscm.commitChanges(commitMsg)
                            githubscm.pushObject('origin', prBranch, "${SEED_BRANCH_CONFIG_FILE_GIT_AUTHOR_CREDS_ID}")

                            String prLink = githubscm.createPR(commitMsg, 'Please review and merge', "${SEED_BRANCH_CONFIG_FILE_GIT_BRANCH}", "${SEED_BRANCH_CONFIG_FILE_GIT_AUTHOR_CREDS_ID}")
                            echo "Created PR ${prLink}"

                            sendNotification("PR was created to update quarkus version in branch config to ${getNewVersion()}.\nPlease review and merge ${prLink}")
                        } else {
                            echo 'No changes to commit. No PR is created !'
                        }
                    }
                }
            }
        }

        stage('Update quarkus version in seed repo') {
            steps {
                script {
                    String prBranch = getPRBranch("${SEED_BRANCH}")
                    dir("${SEED_REPO}") {
                        deleteDir()
                        checkout(githubscm.resolveRepository("${SEED_REPO}", "${SEED_AUTHOR}", "${SEED_BRANCH}", false, "${SEED_AUTHOR_CREDS_ID}"))

                        getOrCreateGitBranch(prBranch, "${SEED_AUTHOR_CREDS_ID}")

                        // Perform updates
                        // Not using `readYaml` here to avoid a full reformat of the config
                        sh """
                            sed -i -E "s|(.*targetExpression:).*(# <quarkus-branch>.*)|\\1 \\"process.env.QUARKUS_BRANCH ? process.env.QUARKUS_BRANCH : '${getNewVersionBranch()}'\\" \\2|g" '.ci/project-dependencies-quarkus.yaml'
                        """

                        if (githubscm.isThereAnyChanges()) {
                            String commitMsg = "[${SEED_BRANCH}] Bump quarkus version to ${getNewVersion()}"
                            githubscm.commitChanges(commitMsg)
                            githubscm.pushObject('origin', prBranch, "${SEED_AUTHOR_CREDS_ID}")

                            // Create PR only if repo/author/branch is different from previous changes
                            if ("${SEED_REPO}" != "${SEED_BRANCH_CONFIG_FILE_GIT_REPOSITORY}" ||
                                    "${SEED_AUTHOR}" != "${SEED_BRANCH_CONFIG_FILE_GIT_AUTHOR_NAME}" ||
                                    "${SEED_BRANCH}" != "${SEED_BRANCH_CONFIG_FILE_GIT_BRANCH}") {
                                        String prLink = githubscm.createPR(commitMsg, 'Please review and merge', "${SEED_BRANCH}", "${SEED_AUTHOR_CREDS_ID}")
                                echo "Created PR ${prLink}"

                                sendNotification("PR was created to update quarkus version in seed repo to ${getNewVersion()}.\nPlease review and merge ${prLink}")
                            } else {
                                echo 'PR was already created. Will not try to create a new one ...'
                            }
                        } else {
                            echo 'No changes to commit. No PR is created !'
                        }
                    }
                }
            }
        }

        stage('Call update quarkus jobs') {
            steps {
                script {
                    env.PROJECTS_TO_UPDATE.split(',').each { repo ->
                        launchUpdateQuarkusJob(repo)
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            script {
                sendErrorNotification()
            }
        }
        cleanup {
            cleanWs()
        }
    }
}

void sendNotification(String body) {
    emailext body: "**Quarkus version update job**\n${body}",
             subject: "[${getBuildBranch()}] ${getNotificationJobName()}",
             to: env.KOGITO_CI_EMAIL_TO
}

void sendErrorNotification() {
    sendNotification("Job #${BUILD_NUMBER} was: **${currentBuild.currentResult}**\nPlease look here: ${BUILD_URL}")
}

void launchUpdateQuarkusJob(String repo) {
    println "[INFO] Launch Update quarkus job for repo ${repo}"

    String jobName = "update-quarkus-${repo}"
    List jobParams = []
    jobParams.add(stringParam(name: 'NEW_VERSION', value: getNewVersion()))

    echo "Build ./${jobName} with parameters ${jobParams}"
    build(job: "./${jobName}", parameters: jobParams, wait: false)
}

String getNewVersion() {
    return params.NEW_VERSION
}

String getNewVersionBranch() {
    Integer[] versionSplit = util.parseVersion(getNewVersion())
    return "${versionSplit[0]}.${versionSplit[1]}"
}

String getBuildBranch() {
    return "${BUILD_BRANCH_NAME}"
}

String getPRBranch(String branch) {
    return "bump-seed-${branch}-quarkus-${getNewVersion()}"
}

String getNotificationJobName() {
    return "${env.REPO_NAME}"
}

void updateYaml(String filePath, Closure updateClosure) {
    def yamlData = readYaml(file: filePath)
    updateClosure(yamlData)
    writeYaml(file: filePath, data: yamlData, overwrite: true)
}

void getOrCreateGitBranch(String branch, String credentialsId) {
    sh 'git fetch origin'
    String branchRemoteResult = sh(script: "git ls-remote origin ${branch} | wc -l", returnStdout: true).trim()
    if (Integer.parseInt(branchRemoteResult) > 0) {
        echo "Branch ${branch} already exist ... will not create it. Checking out !"
        sh "git checkout origin/${branch} -b ${branch}"
    } else {
        echo "Branch ${branch} does not exist ... gonna create it"
        githubscm.createBranch(branch)
        githubscm.pushObject('origin', branch,  credentialsId)
    }
}