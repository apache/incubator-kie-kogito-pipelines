import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'ubuntu'
    }

    environment {
        DOCKER_CONFIG = "${WORKSPACE}/.docker"

        IMAGE_NAME = 'quay.io/kiegroup/kogito-ci-build'
        IMAGE_TAG = "${BRANCH_NAME}-build-${BUILD_NUMBER}"
        IMAGE_NAME_TAG = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    stages {
        stage('Build image') {
            steps {
                script {
                    sh 'printenv'

                    currentBuild.displayName = env.IMAGE_TAG

                    cloud.loginContainerRegistry('quay.io', 'quay_kiegroup_registry_token')

                    dir('kogito-pipelines') {
                        deleteDir()

                        checkout scm

                        sh """
                            docker build --build-arg SDKMAN_JAVA=11.0.20-tem -t ${env.IMAGE_NAME_TAG} -f apache-nodes/Dockerfile.kogito-ci-build .
                            docker tag ${env.IMAGE_NAME_TAG} ${env.IMAGE_NAME}:${GIT_COMMIT}
                            docker tag ${env.IMAGE_NAME_TAG} ${env.IMAGE_NAME}:${BRANCH_NAME}-latest
                        """

                        sh """
                            docker --config ${DOCKER_CONFIG} push ${env.IMAGE_NAME_TAG}
                            docker --config ${DOCKER_CONFIG} push ${env.IMAGE_NAME}:${GIT_COMMIT}
                            docker --config ${DOCKER_CONFIG} push ${env.IMAGE_NAME}:${BRANCH_NAME}-latest
                        """
                    }
                }
            }
            post {
                always {
                    script {
                        sh "rm -rf ${DOCKER_CONFIG}"
                        sh 'docker logout quay.io'
                    }
                }
            }
        }
        stage('Test built image') {
            agent {
                docker {
                    image env.IMAGE_NAME_TAG
                    args '-v /var/run/docker.sock:/var/run/docker.sock --group-add docker --group-add input --group-add render'
                }
            }
            steps {
                echo 'Debug basics'
                sh '''
                    locale
                    printenv
                '''

                echo 'Test tools'
                sh '''
                    java -version
                    mvn --version
                    python --version
                    pip --version
                    node --version
                    npm --version
                    go version
                    s2i version
                    gh version
                    kubectl version --client
                    oc version --client
                '''

                echo 'Test docker'
                sh '''
                    docker info
                    docker run hello-world
                '''
            }
        }
    }
}
