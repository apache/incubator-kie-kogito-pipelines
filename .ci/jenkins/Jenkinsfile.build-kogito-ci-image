import org.jenkinsci.plugins.workflow.libs.Library

pipeline {
    libraries {
        lib("jenkins-pipeline-shared-libraries@${BRANCH_NAME}")
    }

    agent {
        label util.avoidFaultyNodes('ubuntu')
    }

    environment {
        DOCKER_CONFIG = "${WORKSPACE}/.docker"

        IMAGE_NAME = 'docker.io/apache/incubator-kie-kogito-ci-build'
        IMAGE_TAG = "${BRANCH_NAME}-build-${BUILD_NUMBER}"
        IMAGE_NAME_TAG = "${env.IMAGE_NAME}:${env.IMAGE_TAG}"
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    stages {
        stage('Build image') {
            steps {
                script {
                    sh 'printenv'

                    currentBuild.displayName = env.IMAGE_TAG

                    cloud.loginContainerRegistry('docker.io', 'DOCKERHUB_USER', 'DOCKERHUB_TOKEN')

                    dir('kogito-pipelines') {
                        deleteDir()

                        checkout scm

                        sh """
                            docker build -t ${env.IMAGE_NAME_TAG} -f apache-nodes/Dockerfile.kogito-ci-build ./apache-nodes
                            docker tag ${env.IMAGE_NAME_TAG} ${env.IMAGE_NAME}:${env.GIT_COMMIT?:githubscm.getCommitHash()}
                            docker tag ${env.IMAGE_NAME_TAG} ${env.IMAGE_NAME}:${BRANCH_NAME}-latest
                        """

                        sh """
                            docker --config ${DOCKER_CONFIG} push ${env.IMAGE_NAME_TAG}
                            docker --config ${DOCKER_CONFIG} push ${env.IMAGE_NAME}:${env.GIT_COMMIT?:githubscm.getCommitHash()}
                            docker --config ${DOCKER_CONFIG} push ${env.IMAGE_NAME}:${BRANCH_NAME}-latest
                        """
                    }
                }
            }
            post {
                always {
                    script {
                        sh "rm -rf ${DOCKER_CONFIG}"
                        sh 'docker logout docker.io'
                    }
                }
            }
        }
        stage('Test built image') {
            agent {
                docker {
                    image env.IMAGE_NAME_TAG
                    args '--privileged --group-add docker'
                }
            }
            steps {
                echo 'Init docker'
                script {
                    util.waitForDocker()
                }
                echo 'Debug basics'
                sh '''
                    sh --version
                    locale
                    printenv
                '''

                echo 'Test tools'
                sh '''
                    java -version
                    mvn --version
                    python --version
                    pip --version
                    node --version
                    npm --version
                    go version
                    s2i version
                    gh version
                    kubectl version --client
                    oc version --client
                    hub version
                '''

                echo 'Test docker'
                sh '''
                    docker info
                    docker run hello-world
                '''
            }
        }
    }
}
