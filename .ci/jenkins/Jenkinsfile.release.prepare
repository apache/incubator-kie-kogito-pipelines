import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

CREATE_RELEASE_BRANCHES = 'create-release-branches'

PIPELINE_REPO = 'kogito-pipelines'
OPTAPLANNER_REPO = 'optaplanner'
OPTAPLANNER_QUICKSTARTS_REPO = 'optaplanner-quickstarts'

PIPELINE_REPOS = ["${PIPELINE_REPO}"]
RUNTIMES_REPOS = ['kogito-runtimes', 'kogito-apps', 'kogito-examples']
OPTAPLANNER_REPOS = ["${OPTAPLANNER_REPO}", 'optaweb-vehicle-routing', 'optaweb-employee-rostering', "${OPTAPLANNER_QUICKSTARTS_REPO}"]
IMAGES_REPOS = ['kogito-images']
OPERATOR_REPOS = ['kogito-operator']

KOGITO_PRODUCT_REPOS = ['rhpam-kogito-operator']

JOBS = [:]

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Some generated env is also defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        MASTER_KOGITO_VERSION = '2.0.0-SNAPSHOT' // Could be changed later to 999.9.9-SNAPSHOT
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    assert getKogitoVersion() != ''
                    assert getOptaPlannerVersion() != ''

                    // Set release branch
                    env.RELEASE_BRANCH = util.getReleaseBranchFromVersion(getKogitoVersion())
                    echo "Kogito Release Branch ${getKogitoReleaseBranch()}"

                    env.OPTAPLANNER_RELEASE_BRANCH = util.getReleaseBranchFromVersion(getOptaPlannerVersion())
                    echo "OptaPlanner Release Branch ${getOptaPlannerReleaseBranch()}"

                    currentBuild.displayName = getDisplayName("${getKogitoReleaseBranch()}/${getOptaPlannerReleaseBranch()}")

                    sendNotification("Cut-off for Kogito branch ${getKogitoReleaseBranch()} and Optaplanner branch ${getOptaPlannerReleaseBranch()} has started...\n=> ${env.BUILD_URL}")
                }
            }
        }

        stage('Create Kogito release branches') {
            steps {
                script {
                    def repositories = []
                    repositories += PIPELINE_REPOS
                    repositories += RUNTIMES_REPOS
                    repositories += IMAGES_REPOS
                    repositories += OPERATOR_REPOS

                    if (params.BRANCH_PRODUCT_REPOSITORIES) {
                        repositories += KOGITO_PRODUCT_REPOS
                    }

                    echo "Create ${getKogitoReleaseBranch()} on repositories ${repositories}"
                    createBranches(repositories, getKogitoReleaseBranch())

                    sendNotification("${getKogitoReleaseBranch()} branches have been created for repositories: ${repositories}")
                }
            }
        }

        stage('Create OptaPlanner release branches') {
            steps {
                script {
                    def repositories = OPTAPLANNER_REPOS

                    echo "Create ${getOptaPlannerReleaseBranch()} on repositories ${repositories}"
                    createBranches(repositories, getOptaPlannerReleaseBranch())

                    sendNotification("${getOptaPlannerReleaseBranch()} branches have been created for repositories: ${repositories}")
                }
            }
        }

        stage('Update kogito-pipelines branch config') {
            steps {
                script {
                    String branchConfigFile = 'dsl/seed/config/branch.yaml'

                    dir('pipelines-branch') {
                        deleteDir()
                        checkout(githubscm.resolveRepository(PIPELINE_REPO, getGitAuthor(), getKogitoReleaseBranch(), false))
                        sh "git checkout ${getKogitoReleaseBranch()}"

                        repositories = []
                        repositories.addAll(collectRepos(PIPELINE_REPOS, getKogitoReleaseBranch()))
                        repositories.addAll(collectRepos(RUNTIMES_REPOS, getKogitoReleaseBranch()))
                        repositories.addAll(collectRepos(IMAGES_REPOS, getKogitoReleaseBranch()))
                        repositories.addAll(collectRepos(OPERATOR_REPOS, getKogitoReleaseBranch()))
                        repositories.addAll(collectRepos([OPTAPLANNER_REPO, OPTAPLANNER_QUICKSTARTS_REPO], getOptaPlannerReleaseBranch()))

                        if (params.BRANCH_PRODUCT_REPOSITORIES) {
                            repositories.addAll(collectRepos(KOGITO_PRODUCT_REPOS, getKogitoReleaseBranch()))
                        }

                        def branchConfig = readYaml file: "${branchConfigFile}"
                        branchConfig.repositories = repositories

                        echo "Write dsl branch_config => ${branchConfig}"
                        sh "rm -f ${branchConfigFile}"
                        writeYaml file: "${branchConfigFile}", data: branchConfig, overwrite: true

                        if (githubscm.isThereAnyChanges()) {
                            githubscm.commitChanges('Update DSL branch config after cut-off')
                            githubscm.pushObject('origin', getKogitoReleaseBranch(), getGitAuthorCredsId())

                            sendNotification("kogito-pipelines ${getKogitoReleaseBranch()} `${branchConfigFile}` has been updated with correct configuration")
                        } else {
                            println '[WARN] No changes to commit'
                        }
                    }
                }
            }
        }

        stage('Update seed config') {
            steps {
                script {
                    String botBranch = "${getKogitoReleaseBranch()}-${util.generateHash(10)}"
                    String seedConfigFile = 'dsl/seed/config/main.yaml'

                    dir('pipelines-seed') {
                        deleteDir()
                        checkout(githubscm.resolveRepository(PIPELINE_REPO, getGitAuthor(), env.PIPELINE_MAIN_BRANCH, false))
                        sh "git checkout ${env.PIPELINE_MAIN_BRANCH}"

                        def seedConfig = readYaml file: seedConfigFile

                        if (!seedConfig.git.branches.find { it == getKogitoReleaseBranch() }) {
                            seedConfig.git.branches.add(getKogitoReleaseBranch())
                    }

                        echo "Write seed config => ${seedConfig}"
                        sh "rm ${seedConfigFile}"
                        writeYaml file: seedConfigFile, data: seedConfig, overwrite: true

                        if (githubscm.isThereAnyChanges()) {
                            githubscm.commitChanges("Add release branch ${getKogitoReleaseBranch()} after cut-off")
                            githubscm.pushObject('origin', env.PIPELINE_MAIN_BRANCH, getGitAuthorCredsId())

                            sendNotification("kogito-pipelines seed job config on branch `${env.PIPELINE_MAIN_BRANCH}` has been update.")
                        } else {
                            println '[WARN] No changes to PR'
                        }
                }
            }
        }

        stage('Update versions') {
            parallel {
                stage('Update version on release branch') {
                    steps {
                        script {
                            // Call release branch nightly with `UPDATE_VERSIONS`
                            List parameters = [:]
                            parameters.add(string(name: 'JOB_RETRY_NB', value: '3'))
                            parameters.add(booleanParam(name: 'SKIP_TESTS', value: true))
                            parameters.add(booleanParam(name: 'UPDATE_VERSIONS', value: true))
                            parameters.add(string(name: 'KOGITO_VERSION', value: getKogitoVersion()))
                            parameters.add(string(name: 'OPTAPLANNER_VERSION', value: getOptaPlannerVersion()))

                            // Retry every 15 min for the next 12 hours
                            retry(48) {
                                sleep(15, MINUTES)
                                echo "Build '../nightly/master/kogito-nightly' with parameters ${parameters}"
                                // def job = build(job: "../nightly/${getKogitoReleaseBranch()}/kogito-nightly", wait: true, parameters: parameters.values(), propagate: false)
                                // sendNotification("Update version pipeline on branch ${getKogitoReleaseBranch()} has been started. Please review its status here: ${job.absoluteUrl}")
                            }
                        }
                    }
                }

                stage('Update version on master') {
                    steps {
                        script {
                            // Call nightly with `UPDATE_VERSIONS`
                            List parameters = [:]
                            parameters.add(string(name: 'JOB_RETRY_NB', value: '3'))
                            parameters.add(booleanParam(name: 'SKIP_TESTS', value: true))
                            parameters.add(booleanParam(name: 'UPDATE_VERSIONS', value: true))
                            parameters.add(string(name: 'KOGITO_VERSION', value: env.MASTER_KOGITO_VERSION))
                            parameters.add(string(name: 'OPTAPLANNER_VERSION', value: util.getNextVersion(getOptaPlannerVersion(), 'micro')))
                            echo "Build '../nightly/master/kogito-nightly' with parameters ${parameters}"
                            // build(job: "../nightly/master/kogito-nightly", wait: true, parameters: parameters.values(), propagate: false)
                            // sendNotification("Update version pipeline on main branch has been started. Please review its status here: ${job.absoluteUrl}")
                        }
                    }
                }
            }
        }

        // TODO we should update here the Kogito version on release branch
        // create a update all project version with a base branch and a boolean (merge automatically)
        // this one will

    // TODO we should create the PRs for the new Optaplanner version on master
    }
}

void createBranches(List repositories, String releaseBranch) {
    for (String repo : repositories) {
        echo "Checkout repo ${repo}"
        dir(repo) {
            deleteDir()
            checkout(githubscm.resolveRepository(getUrl(repo), getGitAuthor(), getBase(repo), false))
            sh 'git fetch origin'
            String branchRemoteResult = sh(script: "git ls-remote origin ${releaseBranch} | wc -l", returnStdout: true).trim()
            if (Integer.parseInt(branchRemoteResult) > 0) {
                echo 'Release branch already exist ... will not create it'
            } else {
                echo "Release branch ${releaseBranch} does not exist ... gonna create it"
                githubscm.createBranch(releaseBranch)
                githubscm.pushObject('origin', releaseBranch, getGitAuthorCredsId())
            }
        }
    }
}

void sendErrorNotification() {
    sendNotification("Kogito release job #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}")
}

void sendNotification(String body) {
    echo 'Send Notification'
    echo body
    emailext body: body, subject: "[${getKogitoReleaseBranch()}] Cut-off Pipeline",
                to: env.KOGITO_CI_EMAIL_TO
}

String getDisplayName(branch = '') {
    return "Cut-off ${branch ?: getKogitoReleaseBranch()}"
}

String getKogitoVersion() {
    return params.KOGITO_VERSION
}

String getOptaPlannerVersion() {
    return params.OPTAPLANNER_VERSION
}

String getKogitoReleaseBranch() {
    return env.RELEASE_BRANCH
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getBotAuthorCredsID() {
    return env.GIT_BOT_AUTHOR_CREDS_ID
}

String getOptaPlannerReleaseBranch() {
    return env.OPTAPLANNER_RELEASE_BRANCH
}

String getRepoName(String repo) {
    return (repo.find(':')) ? repo.split(':')[0] : repo
}

List collectRepos(List repos, String branch, String jenkins_config_path = '') {
    return repos.collect { repoBranch ->
        String repo = getRepoName(repoBranch)
        Map map = [
            name : repo,
            branch : branch
        ]
        if (jenkins_config_path) {
            map.jenkins_config_path = jenkins_config_path
        }
        return map
    }
}

String getUrl(String repo) {
    return repo.split(':')[0]
}

String getBase(String repo) {
    return (repo.find(':')) ? repo.split(':')[1] : env.DEFAULT_BASE_BRANCH
}
