import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

pipelinesCommon = null

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }
    
    tools {
        maven 'kie-maven-3.8.1'
        jdk 'kie-jdk11'
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()

                    checkout scm
                    pipelinesCommon = load "${WORKSPACE}/${PIPELINES_COMMON_SCRIPT_PATH}"
                    
                    assert getNewVersion()
                    pipelinesCommon.init(getNewVersion())

                    checkout scm

                    pipelinesCommon.checkoutRepo()
                }
            }
        }
        stage('Prepare for PR') {
            steps {
                script {
                    pipelinesCommon.prepareForPR()
                }
            }
        }
        stage('Update Maven dependencies') {
            when {
                expression { return getMavenCompareDepsRemotePoms() }
            }
            steps {
                script {
                    dir(pipelinesCommon.getRepoName()) {
                        getMavenCompareDepsRemotePoms().each { remotePom ->
                            if (getMavenModules()) {
                                getMavenModules().each { module ->
                                    sh "${WORKSPACE}/tools/update-maven-compare-dependencies.sh ${remotePom} ${getNewVersion()} ${module}"
                                }
                            } else {
                                sh "${WORKSPACE}/tools/update-maven-compare-dependencies.sh ${remotePom} ${getNewVersion()}"
                            }
                        }
                    }
                }
            }
        }
        stage('Update Maven properties') {
            when {
                expression { return getMavenProperties() }
            }
            steps {
                script {
                    dir(pipelinesCommon.getRepoName()) {
                        getMavenProperties().each { prop ->
                            if (getMavenModules()) {
                                getMavenModules().each { module ->
                                    sh "${WORKSPACE}/tools/update-maven-module-property.sh ${prop} ${getNewVersion()} ${module}"
                                }
                            } else {
                                sh "${WORKSPACE}/tools/update-maven-module-property.sh ${prop} ${getNewVersion()}"
                            }
                        }
                    }
                }
            }
        }
        stage('Update Gradle properties') {
            when {
                expression { return getGradleRegex() }
            }
            steps {
                script {
                    dir(pipelinesCommon.getRepoName()) {
                        getGradleRegex().each { regex ->
                            sh "${WORKSPACE}/tools/update-build-gradle-regex-line.sh '${regex}' ${getNewVersion()}"
                        }
                    }
                }
            }
        }
        stage('Create PRs') {
            steps {
                script {
                    dir(pipelinesCommon.getRepoName()) {
                        String commitMsg = "[${pipelinesCommon.getGitBranch()}] Bump ${getDependencyName()} version to ${getNewVersion()}"

                        pipelinesCommon.stageAllFiles()
                        pipelinesCommon.commitChanges(commitMsg)
                        String prLink = pipelinesCommon.createPR(commitMsg)

                        echo "Created PR ${prLink}"
                        pipelinesCommon.sendNotification("PR was created to update ${getDependencyName()} version to ${getNewVersion()}.\nPlease review and merge ${prLink}.\n\nJob URL: ${BUILD_URL}display/redirect")
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            script {
                pipelinesCommon.sendNotification("Error updating ${getDependencyName()} version to ${getNewVersion()}.\nPlease check job logs: ${BUILD_URL}display/redirect")
            }
        }
        cleanup {
            cleanWs()
        }
    }
}

String getDependencyName() {
    return pipelinesCommon.getParamOrEnv('DEPENDENCY_NAME')
}

String getPRBranch() {
    return "bump-${getPRPrefixBranch() ?: getBuildBranch()}-${getDependencyName().toLowerCase()}-${getNewVersion()}"
}

String getPRPrefixBranch() {
    return env.PR_PREFIX_BRANCH
}

String getNewVersion() {
    return pipelinesCommon.getParamOrEnv('NEW_VERSION')
}

List getMavenModules() {
    return env.MAVEN_MODULES ? readJSON(text: env.MAVEN_MODULES) : []
}

List getMavenCompareDepsRemotePoms() {
    return env.MAVEN_COMPARE_DEPS_REMOTE_POMS ? readJSON(text: env.MAVEN_COMPARE_DEPS_REMOTE_POMS) : []
}

List getMavenProperties() {
    return env.MAVEN_PROPERTIES ? readJSON(text: env.MAVEN_PROPERTIES) : []
}

List getGradleRegex() {
    return env.GRADLE_REGEX ? readJSON(text: env.GRADLE_REGEX) : []
}
