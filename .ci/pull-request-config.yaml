version: "2.1"

dependencies: ./project-dependencies.yaml

pre: |
  export BUILD_MVN_OPTS="${{ env.BUILD_MVN_OPTS }} -nsu -ntp -fae -e -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dmaven.wagon.http.retryHandler.count=3"
  echo "BUILD_MVN_OPTS=${{ env.BUILD_MVN_OPTS }}"
  export BUILD_MVN_OPTS_CURRENT="${{ env.BUILD_MVN_OPTS_CURRENT }} dependency:tree"
  echo "BUILD_MVN_OPTS_CURRENT=${{ env.BUILD_MVN_OPTS_CURRENT }}"
  echo "QUARKUS_VERSION=${{ env.QUARKUS_VERSION }}"
  echo "ENABLE_DEPLOY=${{ env.ENABLE_DEPLOY }}"

default:
  build-command:
    current: |
      mvn clean install ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_CURRENT }}
    upstream: |
      mvn clean install -Dquickly ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_UPSTREAM }}
    after:
      current: |
        docker system prune -f

build:
  - project: kiegroup/drools
    build-command:
      before:
        current: |
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn -f drools/pom.xml versions:compare-dependencies -pl :drools-build-parent -DremotePom=io.quarkus:quarkus-bom:${{ env.QUARKUS_VERSION }} -DupdatePropertyVersions=true -DupdateDependencies=true -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.DROOLS_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn -f drools/pom.xml versions:set-property -pl :drools-build-parent -Dproperty=version.io.quarkus -DnewVersion=${{ env.QUARKUS_VERSION }} -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.DROOLS_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "cd drools && if which git; then git diff; fi"
        upstream: |
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn versions:compare-dependencies -pl :drools-build-parent -DremotePom=io.quarkus:quarkus-bom:${{ env.QUARKUS_VERSION }} -DupdatePropertyVersions=true -DupdateDependencies=true -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.DROOLS_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn versions:set-property -pl :drools-build-parent -Dproperty=version.io.quarkus -DnewVersion=${{ env.QUARKUS_VERSION }} -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.DROOLS_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "if which git; then git diff; fi"
      current: |
        export MVN_CMD=`bash -c "if [ '${{ env.ENABLE_DEPLOY }}' = 'true' ]; then printf 'deploy ${{ env.DEPLOY_MVN_OPTS }} ${{ env.DROOLS_DEPLOY_MVN_OPTS }}'; else printf 'install'; fi"`
        mvn -f drools/pom.xml clean ${{ env.MVN_CMD }} ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_CURRENT }} ${{ env.DROOLS_BUILD_MVN_OPTS }}
      upstream: |
        mvn clean install -Dquickly ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_UPSTREAM }} ${{ env.DROOLS_BUILD_MVN_OPTS_UPSTREAM }}
    clone:
      - drools
  
  - project: kiegroup/kogito-runtimes
    build-command:
      before:
        current: |
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn -f kogito-runtimes/pom.xml versions:compare-dependencies -pl :kogito-dependencies-bom -pl :kogito-build-parent -pl :kogito-quarkus-bom -pl :kogito-build-no-bom-parent -DremotePom=io.quarkus:quarkus-bom:${{ env.QUARKUS_VERSION }} -DupdatePropertyVersions=true -DupdateDependencies=true -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.KOGITO_RUNTIMES_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn -f kogito-runtimes/pom.xml versions:set-property -pl :kogito-dependencies-bom -Dproperty=version.io.quarkus -DnewVersion=${{ env.QUARKUS_VERSION }} -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.KOGITO_RUNTIMES_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "cd kogito-runtimes && if which git; then git diff; fi"
        upstream: |
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn versions:compare-dependencies -pl :kogito-dependencies-bom -pl :kogito-build-parent -pl :kogito-quarkus-bom -pl :kogito-build-no-bom-parent -DremotePom=io.quarkus:quarkus-bom:${{ env.QUARKUS_VERSION }} -DupdatePropertyVersions=true -DupdateDependencies=true -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.KOGITO_RUNTIMES_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn versions:set-property -pl :kogito-dependencies-bom -Dproperty=version.io.quarkus -DnewVersion=${{ env.QUARKUS_VERSION }} -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.KOGITO_RUNTIMES_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "if which git; then git diff; fi"
      current: |
        export MVN_CMD=`bash -c "if [ '${{ env.ENABLE_DEPLOY }}' = 'true' ]; then printf 'deploy ${{ env.DEPLOY_MVN_OPTS }} ${{ env.KOGITO_RUNTIMES_DEPLOY_MVN_OPTS }}'; else printf 'install'; fi"`
        mvn -f kogito-runtimes/pom.xml clean ${{ env.MVN_CMD }} -Dvalidate-formatting ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_CURRENT }} ${{ env.KOGITO_RUNTIMES_BUILD_MVN_OPTS }}
      upstream: |
        mvn clean install -Dquickly ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_UPSTREAM }} ${{ env.KOGITO_RUNTIMES_BUILD_MVN_OPTS_UPSTREAM }}
    clone:
      - kogito-runtimes

  - project: kiegroup/kogito-apps
    build-command: 
      current: |
        export MVN_CMD=`bash -c "if [ '${{ env.ENABLE_DEPLOY }}' = 'true' ]; then printf 'deploy ${{ env.DEPLOY_MVN_OPTS }} ${{ env.KOGITO_APPS_DEPLOY_MVN_OPTS }}'; else printf 'install'; fi"`
        mvn -f kogito-apps/pom.xml clean ${{ env.MVN_CMD }} -Dvalidate-formatting ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_CURRENT }} ${{ env.KOGITO_APPS_BUILD_MVN_OPTS }}
      upstream: |
        mvn clean install -Dquickly ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_UPSTREAM }} ${{ env.KOGITO_APPS_BUILD_MVN_OPTS_UPSTREAM }}
    clone:
      - kogito-apps
    archive-artifacts:
      path: |
        **/*.log
        **/cypress/screenshots/**
        **/cypress/videos/**

  - project: kiegroup/kogito-examples
    build-command: 
      before:
        current: |
          echo "KOGITO_EXAMPLES_SUBFOLDER_POM=${{ env.KOGITO_EXAMPLES_SUBFOLDER_POM }}"
          
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn -f kogito-examples/pom.xml versions:set-property -Dproperty=quarkus.platform.version -DnewVersion=${{ env.QUARKUS_VERSION }} -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.KOGITO_EXAMPLES_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn -f kogito-examples/pom.xml versions:set-property -Dproperty=quarkus-plugin.version -DnewVersion=${{ env.QUARKUS_VERSION }} -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_QUARKUS_UPDATE }} ${{ env.KOGITO_EXAMPLES_BUILD_MVN_OPTS_QUARKUS_UPDATE }}; fi"
          bash -c "cd kogito-examples && if which git; then git diff; fi"
        upstream: |
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn versions:set-property -Dproperty=quarkus.platform.version -DnewVersion=${{ env.QUARKUS_VERSION }} -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_CURRENT }} ${{ env.KOGITO_EXAMPLES_BUILD_MVN_OPTS }}; fi"
          bash -c "if [ ! -z '${{ env.QUARKUS_VERSION }}' ]; then mvn versions:set-property -Dproperty=quarkus-plugin.version -DnewVersion=${{ env.QUARKUS_VERSION }} -DgenerateBackupPoms=false ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_CURRENT }} ${{ env.KOGITO_EXAMPLES_BUILD_MVN_OPTS }}; fi"
          bash -c "if which git; then git diff; fi"

      # First install the main pom
      # Then build the required submodule pom
      current: |
        export MVN_CMD=`bash -c "if [ '${{ env.ENABLE_DEPLOY }}' = 'true' ]; then printf 'deploy ${{ env.DEPLOY_MVN_OPTS }} ${{ env.KOGITO_EXAMPLES_DEPLOY_MVN_OPTS }}'; else printf 'install'; fi"`
        mvn -pl :kogito-examples clean ${{ env.MVN_CMD }} ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_CURRENT }} ${{ env.KOGITO_EXAMPLES_BUILD_MVN_OPTS }}
        mvn -f ${{ env.KOGITO_EXAMPLES_SUBFOLDER_POM }}pom.xml clean ${{ env.MVN_CMD }} ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_CURRENT }} ${{ env.KOGITO_EXAMPLES_BUILD_MVN_OPTS }}
      upstream: |
        mvn clean install -Dquickly ${{ env.BUILD_MVN_OPTS }} ${{ env.BUILD_MVN_OPTS_UPSTREAM }} ${{ env.KOGITO_EXAMPLES_BUILD_MVN_OPTS_UPSTREAM }}
    clone:
      - kogito-examples
