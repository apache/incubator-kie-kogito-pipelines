@Library('jenkins-pipeline-shared-libraries')_

RUNTIMES_DEPLOY = 'kogito-runtimes-deploy'
EXAMPLES_DEPLOY = 'kogito-examples-deploy'
IMAGES_DEPLOY = 'kogito-images-deploy'
OPERATOR_DEPLOY = 'kogito-operator-deploy'
OPTAPLANNER_DEPLOY = 'optaplanner-deploy'
RUNTIMES_PROMOTE = 'kogito-runtimes-promote'
EXAMPLES_PROMOTE = 'kogito-examples-promote'
IMAGES_PROMOTE = 'kogito-images-promote'
OPERATOR_PROMOTE = 'kogito-operator-promote'

// Map of executed jobs
// See https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
// for more options on built job entity
JOBS = [:]

FAILED_STAGES=[]
UNSTABLE_STAGES=[]

// Should be multibranch pipeline
pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    triggers {
        cron ('H 0 * * *')
    }

    parameters {
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip all tests')

        booleanParam(name: 'SKIP_ARTIFACTS', defaultValue: false, description: 'To skip Artifacts (runtimes, examples, optaplanner) Deployment')
        booleanParam(name: 'SKIP_IMAGES', defaultValue: false, description: 'To skip Images Deployment')
        booleanParam(name: 'SKIP_OPERATOR', defaultValue: false, description: 'To skip Operator Deployment')

        booleanParam(name: 'USE_TEMP_OPENSHIFT_REGISTRY', defaultValue: false, description: 'If enabled, use Openshift registry to push temporary images')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')

        // We use quay as temporary registry for testing between the jobs instead of Openshift, due to https://issues.redhat.com/browse/KOGITO-2219
        IMAGE_REGISTRY_CREDENTIALS = 'nightly_kogito'
        IMAGE_REGISTRY = 'quay.io'
        IMAGE_NAMESPACE = 'kiegroup'
        IMAGE_NAME_SUFFIX = 'nightly'
        TEMP_TAG = "temp-${getBuildBranch()}-tests"
        
        // Use branch name in nightly tag as we may have parallel master and release branch builds
        NIGHTLY_TAG = """${getBuildBranch()}-${sh(
                returnStdout: true,
                script: 'date -u "+%Y-%m-%d"'
            ).trim()}"""

        BRANCH_FOR_LATEST='master'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "temporary tag is ${env.TEMP_TAG}"
                    echo "nightly tag is ${env.NIGHTLY_TAG}"

                    currentBuild.displayName = env.NIGHTLY_TAG
                }
            }
        }

        stage('Build & Deploy Kogito Runtimes') {
            when {
                expression { return isArtifactsDeploy() }
            }
            steps {
                script {
                    echo "Call ${RUNTIMES_DEPLOY} job"
                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    
                    // images and operator deploy testing will use older working artifacts if that one fails
                    buildJob(RUNTIMES_DEPLOY, buildParams, false)
                }
            }
            post {
                failure {
                    addFailedStage()
                }
            }
        }

        stage('Build & Deploy OptaPlanner') {
            when {
                expression { return isArtifactsDeploy() }
            }
            steps {
                script {
                    echo "Call ${OPTAPLANNER_DEPLOY} job"
                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)

                    buildJob(OPTAPLANNER_DEPLOY, buildParams, false)
                }
            }
            post {
                failure {
                    addFailedStage()
                }
            }
        }

        stage('Build & Deploy Kogito Examples') {
            when {
                expression { return isArtifactsDeploy() }
            }
            steps {
                script {
                    echo "Call ${EXAMPLES_DEPLOY} job"
                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    
                    // images and operator deploy testing will use older working artifacts if that one fails
                    buildJob(EXAMPLES_DEPLOY, buildParams, false)
                }
            }
            post {
                failure {
                    addFailedStage()
                }
            }
        }

        stage('Build & Deploy Images') {
            when {
                expression { return isImagesDeploy() }
            }
            steps {
                script {
                    echo "Call ${IMAGES_DEPLOY} job"

                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    addImageBuildParams(buildParams, '', env.TEMP_TAG, true, false)
                    addStringParam(buildParams, 'EXAMPLES_URI', "https://github.com/${getGitAuthor()}/kogito-examples")
                    addStringParam(buildParams, 'EXAMPLES_REF', getBuildBranch())

                    buildJob(IMAGES_DEPLOY, buildParams, false)
                }
            }
            post {
                failure {
                    addFailedStage()
                }
            }
        }

        stage('Build & Deploy Operator') {
            when {
                expression { return isOperatorDeploy() }
            }
            steps {
                script {
                    echo "Call ${OPERATOR_DEPLOY} job"
                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    addImageBuildParams(buildParams, '', env.TEMP_TAG, true, false)

                    // For BDD tests
                    addBooleanParam(buildParams, 'KOGITO_IMAGES_IN_OPENSHIFT_REGISTRY', params.USE_TEMP_OPENSHIFT_REGISTRY)
                    addStringParam(buildParams, 'KOGITO_IMAGES_REGISTRY', env.IMAGE_REGISTRY)
                    addStringParam(buildParams, 'KOGITO_IMAGES_NAMESPACE', env.IMAGE_NAMESPACE)
                    addStringParam(buildParams, 'KOGITO_IMAGES_NAME_SUFFIX', env.IMAGE_NAME_SUFFIX)
                    addStringParam(buildParams, 'KOGITO_IMAGES_TAG', env.TEMP_TAG)
                    addStringParam(buildParams, 'EXAMPLES_URI', "https://github.com/${getGitAuthor()}/kogito-examples")
                    addStringParam(buildParams, 'EXAMPLES_REF', getBuildBranch())

                    buildJob(OPERATOR_DEPLOY, buildParams, false)
                }
            }
            post {
                failure {
                    addFailedStage()
                }
            }
        }

        stage('Promote images') {
            when {
                expression { return isImagesPromote() }
            }
            steps {
                script {
                    echo "Call ${IMAGES_PROMOTE} job"

                    def buildParams = getDefaultBuildParams()
                    addImageBuildParams(buildParams, 'BASE', env.TEMP_TAG, true, false)
                    addImageBuildParams(buildParams, 'PROMOTE', env.NIGHTLY_TAG, true, true)
                    if(getBuildBranch() == env.BRANCH_FOR_LATEST){
                        addBooleanParam(buildParams, 'DEPLOY_WITH_LATEST_TAG', true)
                    }

                    buildJob(IMAGES_PROMOTE, buildParams)
                }
            }
            post {
                failure {
                    addFailedStage()
                }
            }
        }

        stage('Promote operator image') {
            when {
                expression { return isOperatorPromote() }
            }
            steps {
                script {
                    echo "Call ${OPERATOR_PROMOTE} job"

                    def buildParams = getDefaultBuildParams()
                    addImageBuildParams(buildParams, 'BASE', env.TEMP_TAG, true, false)
                    addImageBuildParams(buildParams, 'PROMOTE', env.NIGHTLY_TAG, true, true)
                    if(getBuildBranch() == env.BRANCH_FOR_LATEST){
                        addBooleanParam(buildParams, 'DEPLOY_WITH_LATEST_TAG', true)
                    }

                    buildJob(OPERATOR_PROMOTE, buildParams)
                }
            }
            post {
                failure {
                    addFailedStage()
                }
            }
        }
    }
    post {
        unsuccessful {
            sendPipelineErrorNotification()
        }
    }
}

def buildJob(String jobName, List buildParams, boolean propagate=true){
    echo "Build ${jobName} with params ${buildParams} and propagate = ${propagate}"

    def job = build(job: "../${jobName}", wait: true, parameters: buildParams, propagate: propagate)
    JOBS[jobName] = job

    // Set Unstable if we don't propagate and job failed
    if(!propagate && !isJobSucceeded(jobName)){
        addUnstableStage()
        unstable("Job ${jobName} finished with result ${job.getResult()}")
    }
    return job
}

def getJob(String jobName){
    return JOBS[jobName]
}

boolean isJobSucceeded(String jobName){
    def job = getJob(jobName)
    return job ? job.getResult() == 'SUCCESS' : false
}

void addFailedStage(){
    FAILED_STAGES.add("${STAGE_NAME}")
}
void addUnstableStage(){
    UNSTABLE_STAGES.add("${STAGE_NAME}")
}

void sendPipelineErrorNotification(){
    String bodyMsg = "Kogito nightly job #${BUILD_NUMBER} was: ${currentBuild.currentResult}"
    if(FAILED_STAGES.size() > 0){
        bodyMsg += "\nFailed stages: \n- "
        bodyMsg += FAILED_STAGES.join("\n- ")
    }
    if(UNSTABLE_STAGES.size() > 0){
        bodyMsg += "\nUnstable stages: \n- "
        bodyMsg += UNSTABLE_STAGES.join("\n- ")
    }
    bodyMsg += "\nPlease look here: ${BUILD_URL}"
    emailext body: bodyMsg, subject: "[${getBuildBranch()}][d] Full Pipeline",
                to: env.KOGITO_CI_EMAIL_TO
}

List getDefaultBuildParams(){
    List params = []
    addStringParam(params, 'DISPLAY_NAME', env.NIGHTLY_TAG)
    addStringParam(params, 'BUILD_BRANCH_NAME', getBuildBranch())
    addStringParam(params, 'GIT_AUTHOR', getGitAuthor())

    return params
}

void addSkipTestsParam(buildParams){
    addBooleanParam(buildParams, 'SKIP_TESTS', params.SKIP_TESTS)
}

void addImageBuildParams(List buildParams = [], String paramsPrefix = '', String tag, boolean isRegistryIncluded = false, boolean isFinalImage = false){
    if (!isFinalImage && params.USE_TEMP_OPENSHIFT_REGISTRY) {
        addBooleanParam(buildParams, constructKey(paramsPrefix, 'IMAGE_USE_OPENSHIFT_REGISTRY'), true)
    } else if(isRegistryIncluded) {
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_REGISTRY_CREDENTIALS'), env.IMAGE_REGISTRY_CREDENTIALS)
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_REGISTRY'), env.IMAGE_REGISTRY)
        addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_NAMESPACE'), env.IMAGE_NAMESPACE)
    }
    addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_NAME_SUFFIX'), env.IMAGE_NAME_SUFFIX)
    addStringParam(buildParams, constructKey(paramsPrefix, 'IMAGE_TAG'), tag)
}

void addStringParam(List params, String key, String value){
    params.add(string(name: key, value: value))
}

void addBooleanParam(List params, String key, boolean value){
    params.add(booleanParam(name: key, value: value))
}

String constructKey(String prefix, String paramId){
    return prefix == null || prefix == '' ? paramId : "${prefix}_${paramId}"
}

String getBuildBranch(){
    return env.BRANCH_NAME
}

String getGitAuthor(){
    return 'kiegroup'
}

boolean isArtifactsDeploy(){
    return !params.SKIP_ARTIFACTS
}

boolean isImagesDeploy(){
    return !params.SKIP_IMAGES
}

boolean isOperatorDeploy(){
    return !params.SKIP_OPERATOR
}

boolean isImagesPromote(){
    return isImagesDeploy() && isJobSucceeded(IMAGES_DEPLOY)
}

boolean isOperatorPromote(){
    return isOperatorDeploy() && isJobSucceeded(OPERATOR_DEPLOY)
}